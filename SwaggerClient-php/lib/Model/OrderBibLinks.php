<?php
/**
 * OrderBibLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  SierraApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SierraApi\Model;

use \ArrayAccess;
use \SierraApi\ObjectSerializer;

/**
 * OrderBibLinks Class Doc Comment
 *
 * @category Class
 * @description the links to the new order and bib records
 * @package  SierraApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderBibLinks implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrderBibLinks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'control_number' => 'string',
        'order_id' => 'string',
        'bib_id' => 'string',
        'warnings' => 'string[]',
        'vendor_id_numbers' => 'string[]',
        'legacy_order_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'control_number' => null,
        'order_id' => null,
        'bib_id' => null,
        'warnings' => null,
        'vendor_id_numbers' => null,
        'legacy_order_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'control_number' => 'controlNumber',
        'order_id' => 'orderId',
        'bib_id' => 'bibId',
        'warnings' => 'warnings',
        'vendor_id_numbers' => 'vendorIDNumbers',
        'legacy_order_id' => 'legacyOrderId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'control_number' => 'setControlNumber',
        'order_id' => 'setOrderId',
        'bib_id' => 'setBibId',
        'warnings' => 'setWarnings',
        'vendor_id_numbers' => 'setVendorIdNumbers',
        'legacy_order_id' => 'setLegacyOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'control_number' => 'getControlNumber',
        'order_id' => 'getOrderId',
        'bib_id' => 'getBibId',
        'warnings' => 'getWarnings',
        'vendor_id_numbers' => 'getVendorIdNumbers',
        'legacy_order_id' => 'getLegacyOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['control_number'] = isset($data['control_number']) ? $data['control_number'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['bib_id'] = isset($data['bib_id']) ? $data['bib_id'] : null;
        $this->container['warnings'] = isset($data['warnings']) ? $data['warnings'] : null;
        $this->container['vendor_id_numbers'] = isset($data['vendor_id_numbers']) ? $data['vendor_id_numbers'] : null;
        $this->container['legacy_order_id'] = isset($data['legacy_order_id']) ? $data['legacy_order_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['bib_id'] === null) {
            $invalidProperties[] = "'bib_id' can't be null";
        }
        if ($this->container['legacy_order_id'] === null) {
            $invalidProperties[] = "'legacy_order_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['order_id'] === null) {
            return false;
        }
        if ($this->container['bib_id'] === null) {
            return false;
        }
        if ($this->container['legacy_order_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets control_number
     *
     * @return string
     */
    public function getControlNumber()
    {
        return $this->container['control_number'];
    }

    /**
     * Sets control_number
     *
     * @param string $control_number the control number of the MARC record
     *
     * @return $this
     */
    public function setControlNumber($control_number)
    {
        $this->container['control_number'] = $control_number;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id the order ID
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets bib_id
     *
     * @return string
     */
    public function getBibId()
    {
        return $this->container['bib_id'];
    }

    /**
     * Sets bib_id
     *
     * @param string $bib_id the bib ID
     *
     * @return $this
     */
    public function setBibId($bib_id)
    {
        $this->container['bib_id'] = $bib_id;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return string[]
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param string[] $warnings the warnings generated, if any, when creating orders and bibs
     *
     * @return $this
     */
    public function setWarnings($warnings)
    {
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Gets vendor_id_numbers
     *
     * @return string[]
     */
    public function getVendorIdNumbers()
    {
        return $this->container['vendor_id_numbers'];
    }

    /**
     * Sets vendor_id_numbers
     *
     * @param string[] $vendor_id_numbers the list of the vendor's identification numbers for the associated title
     *
     * @return $this
     */
    public function setVendorIdNumbers($vendor_id_numbers)
    {
        $this->container['vendor_id_numbers'] = $vendor_id_numbers;

        return $this;
    }

    /**
     * Gets legacy_order_id
     *
     * @return string
     */
    public function getLegacyOrderId()
    {
        return $this->container['legacy_order_id'];
    }

    /**
     * Sets legacy_order_id
     *
     * @param string $legacy_order_id the order ID in Innovative format, e.g., '.o12345678'
     *
     * @return $this
     */
    public function setLegacyOrderId($legacy_order_id)
    {
        $this->container['legacy_order_id'] = $legacy_order_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


