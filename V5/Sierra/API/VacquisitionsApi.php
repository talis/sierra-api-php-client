<?php
/**
 * VacquisitionsApi
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace API;

use \III\Sierra\V5\Configuration;
use \III\Sierra\V5\ApiClient;
use \III\Sierra\V5\ApiException;
use \III\Sierra\V5\ObjectSerializer;

/**
 * VacquisitionsApi Class Doc Comment
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VacquisitionsApi
{

    /**
     * API Client
     * @var \III\Sierra\V5\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \III\Sierra\V5\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://sandbox.iii.com/iii/sierra-api');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \III\Sierra\V5\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \III\Sierra\V5\ApiClient $apiClient set the API client
     * @return VacquisitionsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * createANewAcquisition
     *
     * Create a new acquisition
     *
     * @param \Models\AcquisitionOrderPost $acquisitionOrderPost the order information and the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     * @return \Models\OrderBibLinks
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function createANewAcquisition($acquisitionOrderPost)
    {
        list($response, $statusCode, $httpHeader) = $this->createANewAcquisitionWithHttpInfo ($acquisitionOrderPost);
        return $response; 
    }


    /**
     * createANewAcquisitionWithHttpInfo
     *
     * Create a new acquisition
     *
     * @param \Models\AcquisitionOrderPost $acquisitionOrderPost the order information and the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     * @return Array of \Models\OrderBibLinks, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function createANewAcquisitionWithHttpInfo($acquisitionOrderPost)
    {
        
        // verify the required parameter 'acquisitionOrderPost' is set
        if ($acquisitionOrderPost === null) {
            throw new \InvalidArgumentException('Missing the required parameter $acquisitionOrderPost when calling createANewAcquisition');
        }
  
        // parse inputs
        $resourcePath = "/v5/acquisitions/orders";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($acquisitionOrderPost)) {
            $_tempBody = $acquisitionOrderPost;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\OrderBibLinks'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\OrderBibLinks', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\OrderBibLinks', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createANewAcquisition_0
     *
     * Create a new acquisition
     *
     * @param string $login the Sierra username to associate with created orders (required)
     * @param string $location the shelving location or branch for which the order is placed (required)
     * @param string $fund the fund code against which the material is encumbered and paid (required)
     * @param string $vendor the library-defined code for the vendor who handles the order (required)
     * @param  $marc the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     * @param int $copies the number of copies ordered (optional)
     * @param double $price the estimated price per copy (optional)
     * @param string $acquisitionType the library-defined acquisition type code or the method of paying for the material (optional)
     * @param string $claim the claiming activity code (optional)
     * @param string $code1 the library-defined order code 1 (optional)
     * @param string $code2 the library-defined order code 2 (optional)
     * @param string $code3 the library-defined order code 3 (optional)
     * @param string $code4 the library-defined order code 4 (optional)
     * @param string $format a code representing the physical form of the material (any hash mark symbols &#39;#&#39; must be URL encoded (optional)
     * @param string $orderNote a code representing an order note to print on the purchase order form (optional)
     * @param string $orderType a code representing the type of order (optional)
     * @param string $raction a code representing the receiving action (optional)
     * @param string $rloc a code representing the receiving location (optional)
     * @param string $bloc a code representing the billing location (optional)
     * @param string $status a system-generated code representing that financial encumbering or disencumbering status of a record (optional)
     * @param string $tloc a code representing a temporary shelving location (optional)
     * @param string $odate the date the material was ordered, in the format mm-dd-yy (optional)
     * @param string $language the language of the material, based on the MARC 21 Code List for Languages (also used by UNIMARC format) (optional)
     * @param string $country the country of publication, based on the MARC 21 Code List of Countries, or ISO 3166/MA standard for UNIMARC systems (optional)
     * @param string $note a code representing the note that prints on the purchase order form (repeatable parameter) (optional)
     * @param string $staffNote a free-text internal (staff) note (repeatable parameter) (optional)
     * @param string $vendorNote a free-text note for vendor order information (repeatable parameter) (optional)
     * @param string $vendorIDNumber the vendor&#39;s identification number for this title (repeatable parameter) (optional)
     * @param string $volume the number of volumes for this title (optional)
     * @param string $selector a free text note identifying the selector of the item (repeatable parameter) (optional)
     * @param string $vendorAccount the vendor account number (repeatable parameter) (optional)
     * @param string $currencyCode the foreign currency code (optional)
     * @param string $identity a free text note, used to distinguish between order records (repeatable parameter) (optional)
     * @param string $shipTo the library address to which the vendor should ship materials (repeatable parameter) (optional)
     * @param string $requestor the requestor (repeatable parameter) (optional)
     * @param string $oldOrderNumber the old order number (repeatable parameter) (optional)
     * @param string $paidNote the paid note (repeatable parameter) (optional)
     * @param string $vendorAddress the vendor address (repeatable parameter) (optional)
     * @param string $customVarField1 custom var field 1 (repeatable parameter) (optional)
     * @param string $customVarField2 custom var field 2 (repeatable parameter) (optional)
     * @param string $customVarField3 custom var field 3 (repeatable parameter) (optional)
     * @param string $customVarField4 custom var field 4 (repeatable parameter) (optional)
     * @return \Models\OrderBibLinks
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function createANewAcquisition_0($login, $location, $fund, $vendor, $marc, $copies = null, $price = null, $acquisitionType = null, $claim = null, $code1 = null, $code2 = null, $code3 = null, $code4 = null, $format = null, $orderNote = null, $orderType = null, $raction = null, $rloc = null, $bloc = null, $status = null, $tloc = null, $odate = null, $language = null, $country = null, $note = null, $staffNote = null, $vendorNote = null, $vendorIDNumber = null, $volume = null, $selector = null, $vendorAccount = null, $currencyCode = null, $identity = null, $shipTo = null, $requestor = null, $oldOrderNumber = null, $paidNote = null, $vendorAddress = null, $customVarField1 = null, $customVarField2 = null, $customVarField3 = null, $customVarField4 = null)
    {
        list($response, $statusCode, $httpHeader) = $this->createANewAcquisition_0WithHttpInfo ($login, $location, $fund, $vendor, $marc, $copies, $price, $acquisitionType, $claim, $code1, $code2, $code3, $code4, $format, $orderNote, $orderType, $raction, $rloc, $bloc, $status, $tloc, $odate, $language, $country, $note, $staffNote, $vendorNote, $vendorIDNumber, $volume, $selector, $vendorAccount, $currencyCode, $identity, $shipTo, $requestor, $oldOrderNumber, $paidNote, $vendorAddress, $customVarField1, $customVarField2, $customVarField3, $customVarField4);
        return $response; 
    }


    /**
     * createANewAcquisition_0WithHttpInfo
     *
     * Create a new acquisition
     *
     * @param string $login the Sierra username to associate with created orders (required)
     * @param string $location the shelving location or branch for which the order is placed (required)
     * @param string $fund the fund code against which the material is encumbered and paid (required)
     * @param string $vendor the library-defined code for the vendor who handles the order (required)
     * @param  $marc the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     * @param int $copies the number of copies ordered (optional)
     * @param double $price the estimated price per copy (optional)
     * @param string $acquisitionType the library-defined acquisition type code or the method of paying for the material (optional)
     * @param string $claim the claiming activity code (optional)
     * @param string $code1 the library-defined order code 1 (optional)
     * @param string $code2 the library-defined order code 2 (optional)
     * @param string $code3 the library-defined order code 3 (optional)
     * @param string $code4 the library-defined order code 4 (optional)
     * @param string $format a code representing the physical form of the material (any hash mark symbols &#39;#&#39; must be URL encoded (optional)
     * @param string $orderNote a code representing an order note to print on the purchase order form (optional)
     * @param string $orderType a code representing the type of order (optional)
     * @param string $raction a code representing the receiving action (optional)
     * @param string $rloc a code representing the receiving location (optional)
     * @param string $bloc a code representing the billing location (optional)
     * @param string $status a system-generated code representing that financial encumbering or disencumbering status of a record (optional)
     * @param string $tloc a code representing a temporary shelving location (optional)
     * @param string $odate the date the material was ordered, in the format mm-dd-yy (optional)
     * @param string $language the language of the material, based on the MARC 21 Code List for Languages (also used by UNIMARC format) (optional)
     * @param string $country the country of publication, based on the MARC 21 Code List of Countries, or ISO 3166/MA standard for UNIMARC systems (optional)
     * @param string $note a code representing the note that prints on the purchase order form (repeatable parameter) (optional)
     * @param string $staffNote a free-text internal (staff) note (repeatable parameter) (optional)
     * @param string $vendorNote a free-text note for vendor order information (repeatable parameter) (optional)
     * @param string $vendorIDNumber the vendor&#39;s identification number for this title (repeatable parameter) (optional)
     * @param string $volume the number of volumes for this title (optional)
     * @param string $selector a free text note identifying the selector of the item (repeatable parameter) (optional)
     * @param string $vendorAccount the vendor account number (repeatable parameter) (optional)
     * @param string $currencyCode the foreign currency code (optional)
     * @param string $identity a free text note, used to distinguish between order records (repeatable parameter) (optional)
     * @param string $shipTo the library address to which the vendor should ship materials (repeatable parameter) (optional)
     * @param string $requestor the requestor (repeatable parameter) (optional)
     * @param string $oldOrderNumber the old order number (repeatable parameter) (optional)
     * @param string $paidNote the paid note (repeatable parameter) (optional)
     * @param string $vendorAddress the vendor address (repeatable parameter) (optional)
     * @param string $customVarField1 custom var field 1 (repeatable parameter) (optional)
     * @param string $customVarField2 custom var field 2 (repeatable parameter) (optional)
     * @param string $customVarField3 custom var field 3 (repeatable parameter) (optional)
     * @param string $customVarField4 custom var field 4 (repeatable parameter) (optional)
     * @return Array of \Models\OrderBibLinks, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function createANewAcquisition_0WithHttpInfo($login, $location, $fund, $vendor, $marc, $copies = null, $price = null, $acquisitionType = null, $claim = null, $code1 = null, $code2 = null, $code3 = null, $code4 = null, $format = null, $orderNote = null, $orderType = null, $raction = null, $rloc = null, $bloc = null, $status = null, $tloc = null, $odate = null, $language = null, $country = null, $note = null, $staffNote = null, $vendorNote = null, $vendorIDNumber = null, $volume = null, $selector = null, $vendorAccount = null, $currencyCode = null, $identity = null, $shipTo = null, $requestor = null, $oldOrderNumber = null, $paidNote = null, $vendorAddress = null, $customVarField1 = null, $customVarField2 = null, $customVarField3 = null, $customVarField4 = null)
    {
        
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling createANewAcquisition_0');
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException('Missing the required parameter $location when calling createANewAcquisition_0');
        }
        // verify the required parameter 'fund' is set
        if ($fund === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fund when calling createANewAcquisition_0');
        }
        // verify the required parameter 'vendor' is set
        if ($vendor === null) {
            throw new \InvalidArgumentException('Missing the required parameter $vendor when calling createANewAcquisition_0');
        }
        // verify the required parameter 'marc' is set
        if ($marc === null) {
            throw new \InvalidArgumentException('Missing the required parameter $marc when calling createANewAcquisition_0');
        }
  
        // parse inputs
        $resourcePath = "/v5/acquisitions/orders/classic";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/marc-json','application/marc-xml','application/marc-in-json'));
  
        // query params
        
        if ($login !== null) {
            $queryParams['login'] = $this->apiClient->getSerializer()->toQueryValue($login);
        }// query params
        
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }// query params
        
        if ($fund !== null) {
            $queryParams['fund'] = $this->apiClient->getSerializer()->toQueryValue($fund);
        }// query params
        
        if ($vendor !== null) {
            $queryParams['vendor'] = $this->apiClient->getSerializer()->toQueryValue($vendor);
        }// query params
        
        if ($copies !== null) {
            $queryParams['copies'] = $this->apiClient->getSerializer()->toQueryValue($copies);
        }// query params
        
        if ($price !== null) {
            $queryParams['price'] = $this->apiClient->getSerializer()->toQueryValue($price);
        }// query params
        
        if ($acquisitionType !== null) {
            $queryParams['acquisitionType'] = $this->apiClient->getSerializer()->toQueryValue($acquisitionType);
        }// query params
        
        if ($claim !== null) {
            $queryParams['claim'] = $this->apiClient->getSerializer()->toQueryValue($claim);
        }// query params
        
        if ($code1 !== null) {
            $queryParams['code1'] = $this->apiClient->getSerializer()->toQueryValue($code1);
        }// query params
        
        if ($code2 !== null) {
            $queryParams['code2'] = $this->apiClient->getSerializer()->toQueryValue($code2);
        }// query params
        
        if ($code3 !== null) {
            $queryParams['code3'] = $this->apiClient->getSerializer()->toQueryValue($code3);
        }// query params
        
        if ($code4 !== null) {
            $queryParams['code4'] = $this->apiClient->getSerializer()->toQueryValue($code4);
        }// query params
        
        if ($format !== null) {
            $queryParams['format'] = $this->apiClient->getSerializer()->toQueryValue($format);
        }// query params
        
        if ($orderNote !== null) {
            $queryParams['orderNote'] = $this->apiClient->getSerializer()->toQueryValue($orderNote);
        }// query params
        
        if ($orderType !== null) {
            $queryParams['orderType'] = $this->apiClient->getSerializer()->toQueryValue($orderType);
        }// query params
        
        if ($raction !== null) {
            $queryParams['raction'] = $this->apiClient->getSerializer()->toQueryValue($raction);
        }// query params
        
        if ($rloc !== null) {
            $queryParams['rloc'] = $this->apiClient->getSerializer()->toQueryValue($rloc);
        }// query params
        
        if ($bloc !== null) {
            $queryParams['bloc'] = $this->apiClient->getSerializer()->toQueryValue($bloc);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($tloc !== null) {
            $queryParams['tloc'] = $this->apiClient->getSerializer()->toQueryValue($tloc);
        }// query params
        
        if ($odate !== null) {
            $queryParams['odate'] = $this->apiClient->getSerializer()->toQueryValue($odate);
        }// query params
        
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }// query params
        
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }// query params
        
        if ($note !== null) {
            $queryParams['note'] = $this->apiClient->getSerializer()->toQueryValue($note);
        }// query params
        
        if ($staffNote !== null) {
            $queryParams['staffNote'] = $this->apiClient->getSerializer()->toQueryValue($staffNote);
        }// query params
        
        if ($vendorNote !== null) {
            $queryParams['vendorNote'] = $this->apiClient->getSerializer()->toQueryValue($vendorNote);
        }// query params
        
        if ($vendorIDNumber !== null) {
            $queryParams['vendorIDNumber'] = $this->apiClient->getSerializer()->toQueryValue($vendorIDNumber);
        }// query params
        
        if ($volume !== null) {
            $queryParams['volume'] = $this->apiClient->getSerializer()->toQueryValue($volume);
        }// query params
        
        if ($selector !== null) {
            $queryParams['selector'] = $this->apiClient->getSerializer()->toQueryValue($selector);
        }// query params
        
        if ($vendorAccount !== null) {
            $queryParams['vendorAccount'] = $this->apiClient->getSerializer()->toQueryValue($vendorAccount);
        }// query params
        
        if ($currencyCode !== null) {
            $queryParams['currencyCode'] = $this->apiClient->getSerializer()->toQueryValue($currencyCode);
        }// query params
        
        if ($identity !== null) {
            $queryParams['identity'] = $this->apiClient->getSerializer()->toQueryValue($identity);
        }// query params
        
        if ($shipTo !== null) {
            $queryParams['shipTo'] = $this->apiClient->getSerializer()->toQueryValue($shipTo);
        }// query params
        
        if ($requestor !== null) {
            $queryParams['requestor'] = $this->apiClient->getSerializer()->toQueryValue($requestor);
        }// query params
        
        if ($oldOrderNumber !== null) {
            $queryParams['oldOrderNumber'] = $this->apiClient->getSerializer()->toQueryValue($oldOrderNumber);
        }// query params
        
        if ($paidNote !== null) {
            $queryParams['paidNote'] = $this->apiClient->getSerializer()->toQueryValue($paidNote);
        }// query params
        
        if ($vendorAddress !== null) {
            $queryParams['vendorAddress'] = $this->apiClient->getSerializer()->toQueryValue($vendorAddress);
        }// query params
        
        if ($customVarField1 !== null) {
            $queryParams['customVarField1'] = $this->apiClient->getSerializer()->toQueryValue($customVarField1);
        }// query params
        
        if ($customVarField2 !== null) {
            $queryParams['customVarField2'] = $this->apiClient->getSerializer()->toQueryValue($customVarField2);
        }// query params
        
        if ($customVarField3 !== null) {
            $queryParams['customVarField3'] = $this->apiClient->getSerializer()->toQueryValue($customVarField3);
        }// query params
        
        if ($customVarField4 !== null) {
            $queryParams['customVarField4'] = $this->apiClient->getSerializer()->toQueryValue($customVarField4);
        }
        
        
        
        // body params
        $_tempBody = null;
        if (isset($marc)) {
            $_tempBody = $marc;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\OrderBibLinks'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\OrderBibLinks', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\OrderBibLinks', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * validateTheOrderData
     *
     * Validate the order data
     *
     * @param \Models\AcquisitionOrder $acquisitionOrderPost the order information (required)
     * @return \Models\ErrorCode
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function validateTheOrderData($acquisitionOrderPost)
    {
        list($response, $statusCode, $httpHeader) = $this->validateTheOrderDataWithHttpInfo ($acquisitionOrderPost);
        return $response; 
    }


    /**
     * validateTheOrderDataWithHttpInfo
     *
     * Validate the order data
     *
     * @param \Models\AcquisitionOrder $acquisitionOrderPost the order information (required)
     * @return Array of \Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function validateTheOrderDataWithHttpInfo($acquisitionOrderPost)
    {
        
        // verify the required parameter 'acquisitionOrderPost' is set
        if ($acquisitionOrderPost === null) {
            throw new \InvalidArgumentException('Missing the required parameter $acquisitionOrderPost when calling validateTheOrderData');
        }
  
        // parse inputs
        $resourcePath = "/v5/acquisitions/orders/validate";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($acquisitionOrderPost)) {
            $_tempBody = $acquisitionOrderPost;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\ErrorCode'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\ErrorCode', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\ErrorCode', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
