<?php
/**
 * VinvoicesApi
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace API;

use \III\Sierra\V5\Configuration;
use \III\Sierra\V5\ApiClient;
use \III\Sierra\V5\ApiException;
use \III\Sierra\V5\ObjectSerializer;

/**
 * VinvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VinvoicesApi
{

    /**
     * API Client
     * @var \III\Sierra\V5\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \III\Sierra\V5\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://sandbox.iii.com/iii/sierra-api');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \III\Sierra\V5\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \III\Sierra\V5\ApiClient $apiClient set the API client
     * @return VinvoicesApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * getAListOfInvoices
     *
     * Get a list of invoices
     *
     * @param string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $id a comma-delimited list of IDs of invoices to retrieve (optional)
     * @param string $invNum a comma-delimited list of invoice numbers (can include a single wildcard &#39;*&#39; to represent one or more final characters, for example, mult* or mul*) (optional)
     * @param string[] $statusCode a comma-delimited list of invoice status codes (optional)
     * @param string[] $fields if none provided, data for all fields are returned; otherwise only specified fields are returned (optional)
     * @param \DateTime $invoiceDate the date of invoice records (can be a range) (optional)
     * @param \DateTime $createdDate the creation date of invoice records to retrieve (can be a range) (optional)
     * @param \DateTime $updatedDate the modification date of invoice records to retrieve (can be a range) (optional)
     * @param bool $suppressed the suppressed flag value of invoice records to retrieve (optional)
     * @return \Models\InvoiceResultSet
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAListOfInvoices($login, $limit = null, $offset = null, $id = null, $invNum = null, $statusCode = null, $fields = null, $invoiceDate = null, $createdDate = null, $updatedDate = null, $suppressed = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAListOfInvoicesWithHttpInfo ($login, $limit, $offset, $id, $invNum, $statusCode, $fields, $invoiceDate, $createdDate, $updatedDate, $suppressed);
        return $response; 
    }


    /**
     * getAListOfInvoicesWithHttpInfo
     *
     * Get a list of invoices
     *
     * @param string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $id a comma-delimited list of IDs of invoices to retrieve (optional)
     * @param string $invNum a comma-delimited list of invoice numbers (can include a single wildcard &#39;*&#39; to represent one or more final characters, for example, mult* or mul*) (optional)
     * @param string[] $statusCode a comma-delimited list of invoice status codes (optional)
     * @param string[] $fields if none provided, data for all fields are returned; otherwise only specified fields are returned (optional)
     * @param \DateTime $invoiceDate the date of invoice records (can be a range) (optional)
     * @param \DateTime $createdDate the creation date of invoice records to retrieve (can be a range) (optional)
     * @param \DateTime $updatedDate the modification date of invoice records to retrieve (can be a range) (optional)
     * @param bool $suppressed the suppressed flag value of invoice records to retrieve (optional)
     * @return Array of \Models\InvoiceResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAListOfInvoicesWithHttpInfo($login, $limit = null, $offset = null, $id = null, $invNum = null, $statusCode = null, $fields = null, $invoiceDate = null, $createdDate = null, $updatedDate = null, $suppressed = null)
    {
        
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling getAListOfInvoices');
        }
  
        // parse inputs
        $resourcePath = "/v5/invoices/";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($login !== null) {
            $queryParams['login'] = $this->apiClient->getSerializer()->toQueryValue($login);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if (is_array($id)) {
            $id = $this->apiClient->getSerializer()->serializeCollection($id, 'csv', true);
        }
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($invNum !== null) {
            $queryParams['invNum'] = $this->apiClient->getSerializer()->toQueryValue($invNum);
        }// query params
        
        if (is_array($statusCode)) {
            $statusCode = $this->apiClient->getSerializer()->serializeCollection($statusCode, 'csv', true);
        }
        
        if ($statusCode !== null) {
            $queryParams['statusCode'] = $this->apiClient->getSerializer()->toQueryValue($statusCode);
        }// query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }// query params
        
        if ($invoiceDate !== null) {
            $queryParams['invoiceDate'] = $this->apiClient->getSerializer()->toQueryValue($invoiceDate);
        }// query params
        
        if ($createdDate !== null) {
            $queryParams['createdDate'] = $this->apiClient->getSerializer()->toQueryValue($createdDate);
        }// query params
        
        if ($updatedDate !== null) {
            $queryParams['updatedDate'] = $this->apiClient->getSerializer()->toQueryValue($updatedDate);
        }// query params
        
        if ($suppressed !== null) {
            $queryParams['suppressed'] = $this->apiClient->getSerializer()->toQueryValue($suppressed);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\InvoiceResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\InvoiceResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\InvoiceResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getALineItemRecordByLineID
     *
     * Get a line item record by line ID
     *
     * @param string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param int $id the invoice line ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return \Models\InvoiceLine
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getALineItemRecordByLineID($login, $id, $fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getALineItemRecordByLineIDWithHttpInfo ($login, $id, $fields);
        return $response; 
    }


    /**
     * getALineItemRecordByLineIDWithHttpInfo
     *
     * Get a line item record by line ID
     *
     * @param string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param int $id the invoice line ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return Array of \Models\InvoiceLine, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getALineItemRecordByLineIDWithHttpInfo($login, $id, $fields = null)
    {
        
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling getALineItemRecordByLineID');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getALineItemRecordByLineID');
        }
  
        // parse inputs
        $resourcePath = "/v5/invoices/lineItems/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($login !== null) {
            $queryParams['login'] = $this->apiClient->getSerializer()->toQueryValue($login);
        }// query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\InvoiceLine'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\InvoiceLine', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\InvoiceLine', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAListOfMetadata
     *
     * Get a list of metadata
     *
     * @param string $fields list of comma separated metadata fields (optional)
     * @param string $language an ISO 639-1 language code (default is en) (optional)
     * @return \Models\Metadata[]
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAListOfMetadata($fields = null, $language = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAListOfMetadataWithHttpInfo ($fields, $language);
        return $response; 
    }


    /**
     * getAListOfMetadataWithHttpInfo
     *
     * Get a list of metadata
     *
     * @param string $fields list of comma separated metadata fields (optional)
     * @param string $language an ISO 639-1 language code (default is en) (optional)
     * @return Array of \Models\Metadata[], HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAListOfMetadataWithHttpInfo($fields = null, $language = null)
    {
        
  
        // parse inputs
        $resourcePath = "/v5/invoices/metadata";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }// query params
        
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\Metadata[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\Metadata[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\Metadata[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAnInvoiceByRecordID
     *
     * Get an invoice by record ID
     *
     * @param string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param int $id the invoice record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return \Models\Invoice
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAnInvoiceByRecordID($login, $id, $fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAnInvoiceByRecordIDWithHttpInfo ($login, $id, $fields);
        return $response; 
    }


    /**
     * getAnInvoiceByRecordIDWithHttpInfo
     *
     * Get an invoice by record ID
     *
     * @param string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param int $id the invoice record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return Array of \Models\Invoice, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAnInvoiceByRecordIDWithHttpInfo($login, $id, $fields = null)
    {
        
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling getAnInvoiceByRecordID');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAnInvoiceByRecordID');
        }
  
        // parse inputs
        $resourcePath = "/v5/invoices/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($login !== null) {
            $queryParams['login'] = $this->apiClient->getSerializer()->toQueryValue($login);
        }// query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\Invoice'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\Invoice', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\Invoice', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getTheLineItemDataForASingleInvoiceRecord
     *
     * Get the line item data for a single invoice record
     *
     * @param string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param int $id the invoice record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return \Models\InvoiceLineResultSet
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getTheLineItemDataForASingleInvoiceRecord($login, $id, $fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getTheLineItemDataForASingleInvoiceRecordWithHttpInfo ($login, $id, $fields);
        return $response; 
    }


    /**
     * getTheLineItemDataForASingleInvoiceRecordWithHttpInfo
     *
     * Get the line item data for a single invoice record
     *
     * @param string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param int $id the invoice record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return Array of \Models\InvoiceLineResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getTheLineItemDataForASingleInvoiceRecordWithHttpInfo($login, $id, $fields = null)
    {
        
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException('Missing the required parameter $login when calling getTheLineItemDataForASingleInvoiceRecord');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getTheLineItemDataForASingleInvoiceRecord');
        }
  
        // parse inputs
        $resourcePath = "/v5/invoices/{id}/lineItems";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($login !== null) {
            $queryParams['login'] = $this->apiClient->getSerializer()->toQueryValue($login);
        }// query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\InvoiceLineResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\InvoiceLineResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\InvoiceLineResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
