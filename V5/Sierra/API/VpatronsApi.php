<?php
/**
 * VpatronsApi
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace API;

use \III\Sierra\V5\Configuration;
use \III\Sierra\V5\ApiClient;
use \III\Sierra\V5\ApiException;
use \III\Sierra\V5\ObjectSerializer;

/**
 * VpatronsApi Class Doc Comment
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VpatronsApi
{

    /**
     * API Client
     * @var \III\Sierra\V5\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \III\Sierra\V5\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://sandbox.iii.com/iii/sierra-api');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \III\Sierra\V5\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \III\Sierra\V5\ApiClient $apiClient set the API client
     * @return VpatronsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * getAListOfPatrons
     *
     * Get a list of patrons
     *
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param \DateTime $createdDate the creation date of patron records to retrieve (can be a range) (optional)
     * @param \DateTime $updatedDate the modification date of patron records to retrieve (can be a range) (optional)
     * @param \DateTime $deletedDate the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     * @param int[] $agencyCodes patron data for the specified and valid agencies is returned (optional)
     * @return \Models\PatronResultSet
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAListOfPatrons($limit = null, $offset = null, $id = null, $fields = null, $createdDate = null, $updatedDate = null, $deletedDate = null, $deleted = null, $suppressed = null, $agencyCodes = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAListOfPatronsWithHttpInfo ($limit, $offset, $id, $fields, $createdDate, $updatedDate, $deletedDate, $deleted, $suppressed, $agencyCodes);
        return $response; 
    }


    /**
     * getAListOfPatronsWithHttpInfo
     *
     * Get a list of patrons
     *
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param \DateTime $createdDate the creation date of patron records to retrieve (can be a range) (optional)
     * @param \DateTime $updatedDate the modification date of patron records to retrieve (can be a range) (optional)
     * @param \DateTime $deletedDate the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     * @param int[] $agencyCodes patron data for the specified and valid agencies is returned (optional)
     * @return Array of \Models\PatronResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAListOfPatronsWithHttpInfo($limit = null, $offset = null, $id = null, $fields = null, $createdDate = null, $updatedDate = null, $deletedDate = null, $deleted = null, $suppressed = null, $agencyCodes = null)
    {
        
  
        // parse inputs
        $resourcePath = "/v5/patrons/";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if (is_array($id)) {
            $id = $this->apiClient->getSerializer()->serializeCollection($id, 'csv', true);
        }
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }// query params
        
        if ($createdDate !== null) {
            $queryParams['createdDate'] = $this->apiClient->getSerializer()->toQueryValue($createdDate);
        }// query params
        
        if ($updatedDate !== null) {
            $queryParams['updatedDate'] = $this->apiClient->getSerializer()->toQueryValue($updatedDate);
        }// query params
        
        if ($deletedDate !== null) {
            $queryParams['deletedDate'] = $this->apiClient->getSerializer()->toQueryValue($deletedDate);
        }// query params
        
        if ($deleted !== null) {
            $queryParams['deleted'] = $this->apiClient->getSerializer()->toQueryValue($deleted);
        }// query params
        
        if ($suppressed !== null) {
            $queryParams['suppressed'] = $this->apiClient->getSerializer()->toQueryValue($suppressed);
        }// query params
        
        if (is_array($agencyCodes)) {
            $agencyCodes = $this->apiClient->getSerializer()->serializeCollection($agencyCodes, 'csv', true);
        }
        
        if ($agencyCodes !== null) {
            $queryParams['agencyCodes'] = $this->apiClient->getSerializer()->toQueryValue($agencyCodes);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\PatronResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\PatronResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\PatronResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * createAPatronRecord
     *
     * Create a patron record
     *
     * @param \Models\PatronPatch $body post request (required)
     * @return \Models\PatronResult
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function createAPatronRecord($body)
    {
        list($response, $statusCode, $httpHeader) = $this->createAPatronRecordWithHttpInfo ($body);
        return $response; 
    }


    /**
     * createAPatronRecordWithHttpInfo
     *
     * Create a patron record
     *
     * @param \Models\PatronPatch $body post request (required)
     * @return Array of \Models\PatronResult, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function createAPatronRecordWithHttpInfo($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createAPatronRecord');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\PatronResult'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\PatronResult', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\PatronResult', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getACheckoutByCheckoutID
     *
     * Get a checkout by checkout ID
     *
     * @param int $checkoutId the checkout record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return \Models\Checkout
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getACheckoutByCheckoutID($checkoutId, $fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getACheckoutByCheckoutIDWithHttpInfo ($checkoutId, $fields);
        return $response; 
    }


    /**
     * getACheckoutByCheckoutIDWithHttpInfo
     *
     * Get a checkout by checkout ID
     *
     * @param int $checkoutId the checkout record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return Array of \Models\Checkout, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getACheckoutByCheckoutIDWithHttpInfo($checkoutId, $fields = null)
    {
        
        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $checkoutId when calling getACheckoutByCheckoutID');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/checkouts/{checkoutId}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        
        // path params
        
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                "{" . "checkoutId" . "}",
                $this->apiClient->getSerializer()->toPathValue($checkoutId),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\Checkout'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\Checkout', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\Checkout', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * requestToRenewACheckout
     *
     * Request to renew a checkout
     *
     * @param int $checkoutId the checkout ID (required)
     * @param string $acceptLanguage the Accept-Language header (optional)
     * @return \Models\Checkout
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function requestToRenewACheckout($checkoutId, $acceptLanguage = null)
    {
        list($response, $statusCode, $httpHeader) = $this->requestToRenewACheckoutWithHttpInfo ($checkoutId, $acceptLanguage);
        return $response; 
    }


    /**
     * requestToRenewACheckoutWithHttpInfo
     *
     * Request to renew a checkout
     *
     * @param int $checkoutId the checkout ID (required)
     * @param string $acceptLanguage the Accept-Language header (optional)
     * @return Array of \Models\Checkout, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function requestToRenewACheckoutWithHttpInfo($checkoutId, $acceptLanguage = null)
    {
        
        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $checkoutId when calling requestToRenewACheckout');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/checkouts/{checkoutId}/renewal";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        // header params
        
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($acceptLanguage);
        }
        // path params
        
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                "{" . "checkoutId" . "}",
                $this->apiClient->getSerializer()->toPathValue($checkoutId),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\Checkout'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\Checkout', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\Checkout', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * findAPatronByVarFieldFieldTagAndVarFieldContent
     *
     * Find a patron by varField fieldTag and varField content
     *
     * @param string $varFieldTag the varField fieldTag to search by (required)
     * @param string $varFieldContent the varField content to search by (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return \Models\Patron
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function findAPatronByVarFieldFieldTagAndVarFieldContent($varFieldTag, $varFieldContent, $fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->findAPatronByVarFieldFieldTagAndVarFieldContentWithHttpInfo ($varFieldTag, $varFieldContent, $fields);
        return $response; 
    }


    /**
     * findAPatronByVarFieldFieldTagAndVarFieldContentWithHttpInfo
     *
     * Find a patron by varField fieldTag and varField content
     *
     * @param string $varFieldTag the varField fieldTag to search by (required)
     * @param string $varFieldContent the varField content to search by (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return Array of \Models\Patron, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function findAPatronByVarFieldFieldTagAndVarFieldContentWithHttpInfo($varFieldTag, $varFieldContent, $fields = null)
    {
        
        // verify the required parameter 'varFieldTag' is set
        if ($varFieldTag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $varFieldTag when calling findAPatronByVarFieldFieldTagAndVarFieldContent');
        }
        // verify the required parameter 'varFieldContent' is set
        if ($varFieldContent === null) {
            throw new \InvalidArgumentException('Missing the required parameter $varFieldContent when calling findAPatronByVarFieldFieldTagAndVarFieldContent');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/find";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($varFieldTag !== null) {
            $queryParams['varFieldTag'] = $this->apiClient->getSerializer()->toQueryValue($varFieldTag);
        }// query params
        
        if ($varFieldContent !== null) {
            $queryParams['varFieldContent'] = $this->apiClient->getSerializer()->toQueryValue($varFieldContent);
        }// query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\Patron'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\Patron', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\Patron', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAFineRecordByFineID
     *
     * Get a fine record by fine ID
     *
     * @param int $fineId the fine record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return \Models\Fine
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAFineRecordByFineID($fineId, $fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAFineRecordByFineIDWithHttpInfo ($fineId, $fields);
        return $response; 
    }


    /**
     * getAFineRecordByFineIDWithHttpInfo
     *
     * Get a fine record by fine ID
     *
     * @param int $fineId the fine record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return Array of \Models\Fine, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAFineRecordByFineIDWithHttpInfo($fineId, $fields = null)
    {
        
        // verify the required parameter 'fineId' is set
        if ($fineId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fineId when calling getAFineRecordByFineID');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/fines/{fineId}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        
        // path params
        
        if ($fineId !== null) {
            $resourcePath = str_replace(
                "{" . "fineId" . "}",
                $this->apiClient->getSerializer()->toPathValue($fineId),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\Fine'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\Fine', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\Fine', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAHoldRecordByHoldID
     *
     * Get a hold record by hold ID
     *
     * @param int $holdId the hold record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return \Models\Hold
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAHoldRecordByHoldID($holdId, $fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAHoldRecordByHoldIDWithHttpInfo ($holdId, $fields);
        return $response; 
    }


    /**
     * getAHoldRecordByHoldIDWithHttpInfo
     *
     * Get a hold record by hold ID
     *
     * @param int $holdId the hold record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return Array of \Models\Hold, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAHoldRecordByHoldIDWithHttpInfo($holdId, $fields = null)
    {
        
        // verify the required parameter 'holdId' is set
        if ($holdId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $holdId when calling getAHoldRecordByHoldID');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/holds/{holdId}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        
        // path params
        
        if ($holdId !== null) {
            $resourcePath = str_replace(
                "{" . "holdId" . "}",
                $this->apiClient->getSerializer()->toPathValue($holdId),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\Hold'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\Hold', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\Hold', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * modifyAHold
     *
     * Modify a hold
     *
     * @param int $holdId the hold record ID (required)
     * @param \Models\PatronHoldPut $body the details of the hold (required)
     * @param string $acceptLanguage the Accept-Language header (optional)
     * @return \Models\ErrorCode
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function modifyAHold($holdId, $body, $acceptLanguage = null)
    {
        list($response, $statusCode, $httpHeader) = $this->modifyAHoldWithHttpInfo ($holdId, $body, $acceptLanguage);
        return $response; 
    }


    /**
     * modifyAHoldWithHttpInfo
     *
     * Modify a hold
     *
     * @param int $holdId the hold record ID (required)
     * @param \Models\PatronHoldPut $body the details of the hold (required)
     * @param string $acceptLanguage the Accept-Language header (optional)
     * @return Array of \Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function modifyAHoldWithHttpInfo($holdId, $body, $acceptLanguage = null)
    {
        
        // verify the required parameter 'holdId' is set
        if ($holdId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $holdId when calling modifyAHold');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling modifyAHold');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/holds/{holdId}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        // header params
        
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($acceptLanguage);
        }
        // path params
        
        if ($holdId !== null) {
            $resourcePath = str_replace(
                "{" . "holdId" . "}",
                $this->apiClient->getSerializer()->toPathValue($holdId),
                $resourcePath
            );
        }
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\ErrorCode'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\ErrorCode', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\ErrorCode', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteAHoldByHoldID
     *
     * Delete a hold by hold ID
     *
     * @param int $holdId the hold record ID (required)
     * @param string $acceptLanguage the Accept-Language header (optional)
     * @return \Models\ErrorCode
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function deleteAHoldByHoldID($holdId, $acceptLanguage = null)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteAHoldByHoldIDWithHttpInfo ($holdId, $acceptLanguage);
        return $response; 
    }


    /**
     * deleteAHoldByHoldIDWithHttpInfo
     *
     * Delete a hold by hold ID
     *
     * @param int $holdId the hold record ID (required)
     * @param string $acceptLanguage the Accept-Language header (optional)
     * @return Array of \Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function deleteAHoldByHoldIDWithHttpInfo($holdId, $acceptLanguage = null)
    {
        
        // verify the required parameter 'holdId' is set
        if ($holdId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $holdId when calling deleteAHoldByHoldID');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/holds/{holdId}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        // header params
        
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($acceptLanguage);
        }
        // path params
        
        if ($holdId !== null) {
            $resourcePath = str_replace(
                "{" . "holdId" . "}",
                $this->apiClient->getSerializer()->toPathValue($holdId),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\ErrorCode'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\ErrorCode', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\ErrorCode', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAListOfMetadata
     *
     * Get a list of metadata
     *
     * @param string $fields list of comma separated metadata fields (optional)
     * @param string $language an ISO 639-1 language code (default is en) (optional)
     * @return \Models\Metadata[]
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAListOfMetadata($fields = null, $language = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAListOfMetadataWithHttpInfo ($fields, $language);
        return $response; 
    }


    /**
     * getAListOfMetadataWithHttpInfo
     *
     * Get a list of metadata
     *
     * @param string $fields list of comma separated metadata fields (optional)
     * @param string $language an ISO 639-1 language code (default is en) (optional)
     * @return Array of \Models\Metadata[], HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAListOfMetadataWithHttpInfo($fields = null, $language = null)
    {
        
  
        // parse inputs
        $resourcePath = "/v5/patrons/metadata";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }// query params
        
        if ($language !== null) {
            $queryParams['language'] = $this->apiClient->getSerializer()->toQueryValue($language);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\Metadata[]'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\Metadata[]', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\Metadata[]', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * filterTheRecordsByAQueryInJSONFormat
     *
     * Filter the records by a query in JSON format
     *
     * @param int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param int $limit the maximum number of results (required)
     * @param  $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     * @return \Models\QueryResultSet
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function filterTheRecordsByAQueryInJSONFormat($offset, $limit, $json)
    {
        list($response, $statusCode, $httpHeader) = $this->filterTheRecordsByAQueryInJSONFormatWithHttpInfo ($offset, $limit, $json);
        return $response; 
    }


    /**
     * filterTheRecordsByAQueryInJSONFormatWithHttpInfo
     *
     * Filter the records by a query in JSON format
     *
     * @param int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param int $limit the maximum number of results (required)
     * @param  $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     * @return Array of \Models\QueryResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function filterTheRecordsByAQueryInJSONFormatWithHttpInfo($offset, $limit, $json)
    {
        
        // verify the required parameter 'offset' is set
        if ($offset === null) {
            throw new \InvalidArgumentException('Missing the required parameter $offset when calling filterTheRecordsByAQueryInJSONFormat');
        }
        // verify the required parameter 'limit' is set
        if ($limit === null) {
            throw new \InvalidArgumentException('Missing the required parameter $limit when calling filterTheRecordsByAQueryInJSONFormat');
        }
        // verify the required parameter 'json' is set
        if ($json === null) {
            throw new \InvalidArgumentException('Missing the required parameter $json when calling filterTheRecordsByAQueryInJSONFormat');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/query";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        
        
        
        // body params
        $_tempBody = null;
        if (isset($json)) {
            $_tempBody = $json;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\QueryResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\QueryResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\QueryResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * validatePatronByBarcodeAndPIN
     *
     * Validate patron by barcode and PIN
     *
     * @param \Models\PatronValidation $body post request (required)
     * @return \Models\ErrorCode
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function validatePatronByBarcodeAndPIN($body)
    {
        list($response, $statusCode, $httpHeader) = $this->validatePatronByBarcodeAndPINWithHttpInfo ($body);
        return $response; 
    }


    /**
     * validatePatronByBarcodeAndPINWithHttpInfo
     *
     * Validate patron by barcode and PIN
     *
     * @param \Models\PatronValidation $body post request (required)
     * @return Array of \Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function validatePatronByBarcodeAndPINWithHttpInfo($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling validatePatronByBarcodeAndPIN');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/validate";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\ErrorCode'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\ErrorCode', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\ErrorCode', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getAPatronByRecordID
     *
     * Get a patron by record ID
     *
     * @param int $id the patron record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return \Models\Patron
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAPatronByRecordID($id, $fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getAPatronByRecordIDWithHttpInfo ($id, $fields);
        return $response; 
    }


    /**
     * getAPatronByRecordIDWithHttpInfo
     *
     * Get a patron by record ID
     *
     * @param int $id the patron record ID (required)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return Array of \Models\Patron, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getAPatronByRecordIDWithHttpInfo($id, $fields = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getAPatronByRecordID');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\Patron'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\Patron', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\Patron', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * updateThePatronRecord
     *
     * Update the Patron record
     *
     * @param int $id the patron record ID (required)
     * @param \Models\PatronPatch $body patron request (required)
     * @return \Models\ErrorCode
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function updateThePatronRecord($id, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->updateThePatronRecordWithHttpInfo ($id, $body);
        return $response; 
    }


    /**
     * updateThePatronRecordWithHttpInfo
     *
     * Update the Patron record
     *
     * @param int $id the patron record ID (required)
     * @param \Models\PatronPatch $body patron request (required)
     * @return Array of \Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function updateThePatronRecordWithHttpInfo($id, $body)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateThePatronRecord');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling updateThePatronRecord');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\ErrorCode'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\ErrorCode', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\ErrorCode', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * deleteAPatronRecord
     *
     * Delete a patron record
     *
     * @param int $id the patron record ID (required)
     * @return \Models\ErrorCode
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function deleteAPatronRecord($id)
    {
        list($response, $statusCode, $httpHeader) = $this->deleteAPatronRecordWithHttpInfo ($id);
        return $response; 
    }


    /**
     * deleteAPatronRecordWithHttpInfo
     *
     * Delete a patron record
     *
     * @param int $id the patron record ID (required)
     * @return Array of \Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function deleteAPatronRecordWithHttpInfo($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteAPatronRecord');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\ErrorCode'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\ErrorCode', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\ErrorCode', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getCheckoutDataForASinglePatronRecord
     *
     * Get checkout data for a single patron record
     *
     * @param int $id the patron record ID (required)
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return \Models\CheckoutResultSet
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getCheckoutDataForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getCheckoutDataForASinglePatronRecordWithHttpInfo ($id, $limit, $offset, $fields);
        return $response; 
    }


    /**
     * getCheckoutDataForASinglePatronRecordWithHttpInfo
     *
     * Get checkout data for a single patron record
     *
     * @param int $id the patron record ID (required)
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return Array of \Models\CheckoutResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getCheckoutDataForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getCheckoutDataForASinglePatronRecord');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/{id}/checkouts";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\CheckoutResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\CheckoutResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\CheckoutResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getCheckoutreadHistoryForASinglePatronRecord
     *
     * Get checkout/read history for a single patron record
     *
     * @param int $id the patron record ID (required)
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string $sortField a field to sort on (optional)
     * @param string $sortOrder the order to sort by desc or asc (optional)
     * @return \Models\CheckoutHistoryResultSet
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getCheckoutreadHistoryForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null, $sortField = null, $sortOrder = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getCheckoutreadHistoryForASinglePatronRecordWithHttpInfo ($id, $limit, $offset, $fields, $sortField, $sortOrder);
        return $response; 
    }


    /**
     * getCheckoutreadHistoryForASinglePatronRecordWithHttpInfo
     *
     * Get checkout/read history for a single patron record
     *
     * @param int $id the patron record ID (required)
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string $sortField a field to sort on (optional)
     * @param string $sortOrder the order to sort by desc or asc (optional)
     * @return Array of \Models\CheckoutHistoryResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getCheckoutreadHistoryForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null, $sortField = null, $sortOrder = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getCheckoutreadHistoryForASinglePatronRecord');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/{id}/checkouts/history";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }// query params
        
        if ($sortField !== null) {
            $queryParams['sortField'] = $this->apiClient->getSerializer()->toQueryValue($sortField);
        }// query params
        
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = $this->apiClient->getSerializer()->toQueryValue($sortOrder);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\CheckoutHistoryResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\CheckoutHistoryResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\CheckoutHistoryResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getTheFinesDataForASinglePatronRecord
     *
     * Get the fines data for a single patron record
     *
     * @param int $id the patron record ID (required)
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param \DateTime $assessedDate the assessed date of fines to retrieve (can be a range) (optional)
     * @return \Models\FineResultSet
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getTheFinesDataForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null, $assessedDate = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getTheFinesDataForASinglePatronRecordWithHttpInfo ($id, $limit, $offset, $fields, $assessedDate);
        return $response; 
    }


    /**
     * getTheFinesDataForASinglePatronRecordWithHttpInfo
     *
     * Get the fines data for a single patron record
     *
     * @param int $id the patron record ID (required)
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param \DateTime $assessedDate the assessed date of fines to retrieve (can be a range) (optional)
     * @return Array of \Models\FineResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getTheFinesDataForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null, $assessedDate = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getTheFinesDataForASinglePatronRecord');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/{id}/fines";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }// query params
        
        if ($assessedDate !== null) {
            $queryParams['assessedDate'] = $this->apiClient->getSerializer()->toQueryValue($assessedDate);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\FineResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\FineResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\FineResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * getTheHoldsDataForASinglePatronRecord
     *
     * Get the holds data for a single patron record
     *
     * @param string $id the patron record ID (required)
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return \Models\HoldResultSet
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getTheHoldsDataForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null)
    {
        list($response, $statusCode, $httpHeader) = $this->getTheHoldsDataForASinglePatronRecordWithHttpInfo ($id, $limit, $offset, $fields);
        return $response; 
    }


    /**
     * getTheHoldsDataForASinglePatronRecordWithHttpInfo
     *
     * Get the holds data for a single patron record
     *
     * @param string $id the patron record ID (required)
     * @param int $limit the maximum number of results (optional)
     * @param int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @return Array of \Models\HoldResultSet, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function getTheHoldsDataForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getTheHoldsDataForASinglePatronRecord');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/{id}/holds";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        // query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\HoldResultSet'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\HoldResultSet', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\HoldResultSet', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * cancelAllHoldsForTheSpecifiedPatron
     *
     * Cancel all holds for the specified patron
     *
     * @param int $id the patron record ID (required)
     * @param string $acceptLanguage the Accept-Language header (optional)
     * @return \Models\ErrorCode
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function cancelAllHoldsForTheSpecifiedPatron($id, $acceptLanguage = null)
    {
        list($response, $statusCode, $httpHeader) = $this->cancelAllHoldsForTheSpecifiedPatronWithHttpInfo ($id, $acceptLanguage);
        return $response; 
    }


    /**
     * cancelAllHoldsForTheSpecifiedPatronWithHttpInfo
     *
     * Cancel all holds for the specified patron
     *
     * @param int $id the patron record ID (required)
     * @param string $acceptLanguage the Accept-Language header (optional)
     * @return Array of \Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function cancelAllHoldsForTheSpecifiedPatronWithHttpInfo($id, $acceptLanguage = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling cancelAllHoldsForTheSpecifiedPatron');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/{id}/holds";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        // header params
        
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = $this->apiClient->getSerializer()->toHeaderValue($acceptLanguage);
        }
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\ErrorCode'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\ErrorCode', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\ErrorCode', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * placeANewHoldRequest
     *
     * Place a new hold request
     *
     * @param int $id the patron record ID (required)
     * @param \Models\PatronHoldPost $body details of the new hold (required)
     * @return \Models\ErrorCode
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function placeANewHoldRequest($id, $body)
    {
        list($response, $statusCode, $httpHeader) = $this->placeANewHoldRequestWithHttpInfo ($id, $body);
        return $response; 
    }


    /**
     * placeANewHoldRequestWithHttpInfo
     *
     * Place a new hold request
     *
     * @param int $id the patron record ID (required)
     * @param \Models\PatronHoldPost $body details of the new hold (required)
     * @return Array of \Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     * @throws \III\Sierra\V5\ApiException on non-2xx response
     */
    public function placeANewHoldRequestWithHttpInfo($id, $body)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling placeANewHoldRequest');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling placeANewHoldRequest');
        }
  
        // parse inputs
        $resourcePath = "/v5/patrons/{id}/holds/requests";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json', 'application/xml'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json','application/xml'));
  
        
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Models\ErrorCode'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array($this->apiClient->getSerializer()->deserialize($response, '\Models\ErrorCode', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            default:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Models\ErrorCode', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
