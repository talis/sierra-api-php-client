<?php
/**
 * MarcSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * MarcSummary Class Doc Comment
 *
 * @category    Class
 * @description a summary of the generated binary MARC data file
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MarcSummary implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'file' => 'string',
        'inputRecords' => 'int',
        'deletedRecords' => 'int',
        'outputRecords' => 'int',
        'errors' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'file' => 'file',
        'inputRecords' => 'inputRecords',
        'deletedRecords' => 'deletedRecords',
        'outputRecords' => 'outputRecords',
        'errors' => 'errors'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'file' => 'setFile',
        'inputRecords' => 'setInputRecords',
        'deletedRecords' => 'setDeletedRecords',
        'outputRecords' => 'setOutputRecords',
        'errors' => 'setErrors'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'file' => 'getFile',
        'inputRecords' => 'getInputRecords',
        'deletedRecords' => 'getDeletedRecords',
        'outputRecords' => 'getOutputRecords',
        'errors' => 'getErrors'
    );
  
    
    /**
      * $file a link to the generated binary MARC data file
      * @var string
      */
    protected $file;
    
    /**
      * $inputRecords the number of bibs processed
      * @var int
      */
    protected $inputRecords;
    
    /**
      * $deletedRecords the number of bibs processed that were in a deleted state
      * @var int
      */
    protected $deletedRecords;
    
    /**
      * $outputRecords the number of bibs written to the MARC data file
      * @var int
      */
    protected $outputRecords;
    
    /**
      * $errors the number of errors that occurred during the MARC data file generation
      * @var int
      */
    protected $errors;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->file = $data["file"];
            $this->inputRecords = $data["inputRecords"];
            $this->deletedRecords = $data["deletedRecords"];
            $this->outputRecords = $data["outputRecords"];
            $this->errors = $data["errors"];
        }
    }
    
    /**
     * Gets file
     * @return string
     */
    public function getFile()
    {
        return $this->file;
    }
  
    /**
     * Sets file
     * @param string $file a link to the generated binary MARC data file
     * @return $this
     */
    public function setFile($file)
    {
        
        $this->file = $file;
        return $this;
    }
    
    /**
     * Gets inputRecords
     * @return int
     */
    public function getInputRecords()
    {
        return $this->inputRecords;
    }
  
    /**
     * Sets inputRecords
     * @param int $inputRecords the number of bibs processed
     * @return $this
     */
    public function setInputRecords($inputRecords)
    {
        
        $this->inputRecords = $inputRecords;
        return $this;
    }
    
    /**
     * Gets deletedRecords
     * @return int
     */
    public function getDeletedRecords()
    {
        return $this->deletedRecords;
    }
  
    /**
     * Sets deletedRecords
     * @param int $deletedRecords the number of bibs processed that were in a deleted state
     * @return $this
     */
    public function setDeletedRecords($deletedRecords)
    {
        
        $this->deletedRecords = $deletedRecords;
        return $this;
    }
    
    /**
     * Gets outputRecords
     * @return int
     */
    public function getOutputRecords()
    {
        return $this->outputRecords;
    }
  
    /**
     * Sets outputRecords
     * @param int $outputRecords the number of bibs written to the MARC data file
     * @return $this
     */
    public function setOutputRecords($outputRecords)
    {
        
        $this->outputRecords = $outputRecords;
        return $this;
    }
    
    /**
     * Gets errors
     * @return int
     */
    public function getErrors()
    {
        return $this->errors;
    }
  
    /**
     * Sets errors
     * @param int $errors the number of errors that occurred during the MARC data file generation
     * @return $this
     */
    public function setErrors($errors)
    {
        
        $this->errors = $errors;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
