<?php
/**
 * Patron
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * Patron Class Doc Comment
 *
 * @category    Class
 * @description a patron record
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Patron implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'updatedDate' => '\DateTime',
        'createdDate' => '\DateTime',
        'deletedDate' => '\DateTime',
        'deleted' => 'bool',
        'suppressed' => 'bool',
        'names' => 'string[]',
        'barcodes' => 'string[]',
        'expirationDate' => '\DateTime',
        'birthDate' => '\DateTime',
        'emails' => 'string[]',
        'patronType' => 'int',
        'patronCodes' => '\Models\Codes',
        'homeLibraryCode' => 'string',
        'message' => '\Models\Message',
        'blockInfo' => '\Models\Block',
        'addresses' => '\Models\Address[]',
        'phones' => '\Models\Phone[]',
        'uniqueIds' => 'string[]',
        'moneyOwed' => 'double',
        'pMessage' => 'string',
        'langPref' => 'string',
        'fixedFields' => '\Models\map',
        'varFields' => '\Models\VarField[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'updatedDate' => 'updatedDate',
        'createdDate' => 'createdDate',
        'deletedDate' => 'deletedDate',
        'deleted' => 'deleted',
        'suppressed' => 'suppressed',
        'names' => 'names',
        'barcodes' => 'barcodes',
        'expirationDate' => 'expirationDate',
        'birthDate' => 'birthDate',
        'emails' => 'emails',
        'patronType' => 'patronType',
        'patronCodes' => 'patronCodes',
        'homeLibraryCode' => 'homeLibraryCode',
        'message' => 'message',
        'blockInfo' => 'blockInfo',
        'addresses' => 'addresses',
        'phones' => 'phones',
        'uniqueIds' => 'uniqueIds',
        'moneyOwed' => 'moneyOwed',
        'pMessage' => 'pMessage',
        'langPref' => 'langPref',
        'fixedFields' => 'fixedFields',
        'varFields' => 'varFields'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'updatedDate' => 'setUpdatedDate',
        'createdDate' => 'setCreatedDate',
        'deletedDate' => 'setDeletedDate',
        'deleted' => 'setDeleted',
        'suppressed' => 'setSuppressed',
        'names' => 'setNames',
        'barcodes' => 'setBarcodes',
        'expirationDate' => 'setExpirationDate',
        'birthDate' => 'setBirthDate',
        'emails' => 'setEmails',
        'patronType' => 'setPatronType',
        'patronCodes' => 'setPatronCodes',
        'homeLibraryCode' => 'setHomeLibraryCode',
        'message' => 'setMessage',
        'blockInfo' => 'setBlockInfo',
        'addresses' => 'setAddresses',
        'phones' => 'setPhones',
        'uniqueIds' => 'setUniqueIds',
        'moneyOwed' => 'setMoneyOwed',
        'pMessage' => 'setPMessage',
        'langPref' => 'setLangPref',
        'fixedFields' => 'setFixedFields',
        'varFields' => 'setVarFields'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'updatedDate' => 'getUpdatedDate',
        'createdDate' => 'getCreatedDate',
        'deletedDate' => 'getDeletedDate',
        'deleted' => 'getDeleted',
        'suppressed' => 'getSuppressed',
        'names' => 'getNames',
        'barcodes' => 'getBarcodes',
        'expirationDate' => 'getExpirationDate',
        'birthDate' => 'getBirthDate',
        'emails' => 'getEmails',
        'patronType' => 'getPatronType',
        'patronCodes' => 'getPatronCodes',
        'homeLibraryCode' => 'getHomeLibraryCode',
        'message' => 'getMessage',
        'blockInfo' => 'getBlockInfo',
        'addresses' => 'getAddresses',
        'phones' => 'getPhones',
        'uniqueIds' => 'getUniqueIds',
        'moneyOwed' => 'getMoneyOwed',
        'pMessage' => 'getPMessage',
        'langPref' => 'getLangPref',
        'fixedFields' => 'getFixedFields',
        'varFields' => 'getVarFields'
    );
  
    
    /**
      * $id the patron record ID
      * @var int
      */
    protected $id;
    
    /**
      * $updatedDate the date and time of the last update to the record, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
      * @var \DateTime
      */
    protected $updatedDate;
    
    /**
      * $createdDate the date and time the record was created, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
      * @var \DateTime
      */
    protected $createdDate;
    
    /**
      * $deletedDate the date the record was deleted, in ISO 8601 format (yyyy-MM-dd)
      * @var \DateTime
      */
    protected $deletedDate;
    
    /**
      * $deleted whether the record has been deleted
      * @var bool
      */
    protected $deleted;
    
    /**
      * $suppressed whether the record is suppressed from public display
      * @var bool
      */
    protected $suppressed;
    
    /**
      * $names a list of the patron's names
      * @var string[]
      */
    protected $names;
    
    /**
      * $barcodes the patron's barcode(s)
      * @var string[]
      */
    protected $barcodes;
    
    /**
      * $expirationDate the expiration date of the patron's borrowing privileges in ISO 8601 format (yyyy-MM-dd)
      * @var \DateTime
      */
    protected $expirationDate;
    
    /**
      * $birthDate the patron's date of birth in ISO 8601 format (yyyy-MM-dd)
      * @var \DateTime
      */
    protected $birthDate;
    
    /**
      * $emails the patron's email addresses
      * @var string[]
      */
    protected $emails;
    
    /**
      * $patronType the patron type code
      * @var int
      */
    protected $patronType;
    
    /**
      * $patronCodes the library-defined pcodes associated with the patron
      * @var \Models\Codes
      */
    protected $patronCodes;
    
    /**
      * $homeLibraryCode the patron's home library
      * @var string
      */
    protected $homeLibraryCode;
    
    /**
      * $message message-related data for the patron
      * @var \Models\Message
      */
    protected $message;
    
    /**
      * $blockInfo patron block information
      * @var \Models\Block
      */
    protected $blockInfo;
    
    /**
      * $addresses the patron's addresses
      * @var \Models\Address[]
      */
    protected $addresses;
    
    /**
      * $phones the patron's telephone numbers
      * @var \Models\Phone[]
      */
    protected $phones;
    
    /**
      * $uniqueIds the patron's unique IDs
      * @var string[]
      */
    protected $uniqueIds;
    
    /**
      * $moneyOwed the amount of money the patron owes in fines and charges
      * @var double
      */
    protected $moneyOwed;
    
    /**
      * $pMessage the patron's message
      * @var string
      */
    protected $pMessage;
    
    /**
      * $langPref the patron's language preference
      * @var string
      */
    protected $langPref;
    
    /**
      * $fixedFields the fixed-length fields from the patron record
      * @var \Models\map
      */
    protected $fixedFields;
    
    /**
      * $varFields the variable-length fields from the patron record
      * @var \Models\VarField[]
      */
    protected $varFields;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->updatedDate = $data["updatedDate"];
            $this->createdDate = $data["createdDate"];
            $this->deletedDate = $data["deletedDate"];
            $this->deleted = $data["deleted"];
            $this->suppressed = $data["suppressed"];
            $this->names = $data["names"];
            $this->barcodes = $data["barcodes"];
            $this->expirationDate = $data["expirationDate"];
            $this->birthDate = $data["birthDate"];
            $this->emails = $data["emails"];
            $this->patronType = $data["patronType"];
            $this->patronCodes = $data["patronCodes"];
            $this->homeLibraryCode = $data["homeLibraryCode"];
            $this->message = $data["message"];
            $this->blockInfo = $data["blockInfo"];
            $this->addresses = $data["addresses"];
            $this->phones = $data["phones"];
            $this->uniqueIds = $data["uniqueIds"];
            $this->moneyOwed = $data["moneyOwed"];
            $this->pMessage = $data["pMessage"];
            $this->langPref = $data["langPref"];
            $this->fixedFields = $data["fixedFields"];
            $this->varFields = $data["varFields"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id the patron record ID
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets updatedDate
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
  
    /**
     * Sets updatedDate
     * @param \DateTime $updatedDate the date and time of the last update to the record, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     * @return $this
     */
    public function setUpdatedDate($updatedDate)
    {
        
        $this->updatedDate = $updatedDate;
        return $this;
    }
    
    /**
     * Gets createdDate
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
  
    /**
     * Sets createdDate
     * @param \DateTime $createdDate the date and time the record was created, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        
        $this->createdDate = $createdDate;
        return $this;
    }
    
    /**
     * Gets deletedDate
     * @return \DateTime
     */
    public function getDeletedDate()
    {
        return $this->deletedDate;
    }
  
    /**
     * Sets deletedDate
     * @param \DateTime $deletedDate the date the record was deleted, in ISO 8601 format (yyyy-MM-dd)
     * @return $this
     */
    public function setDeletedDate($deletedDate)
    {
        
        $this->deletedDate = $deletedDate;
        return $this;
    }
    
    /**
     * Gets deleted
     * @return bool
     */
    public function getDeleted()
    {
        return $this->deleted;
    }
  
    /**
     * Sets deleted
     * @param bool $deleted whether the record has been deleted
     * @return $this
     */
    public function setDeleted($deleted)
    {
        
        $this->deleted = $deleted;
        return $this;
    }
    
    /**
     * Gets suppressed
     * @return bool
     */
    public function getSuppressed()
    {
        return $this->suppressed;
    }
  
    /**
     * Sets suppressed
     * @param bool $suppressed whether the record is suppressed from public display
     * @return $this
     */
    public function setSuppressed($suppressed)
    {
        
        $this->suppressed = $suppressed;
        return $this;
    }
    
    /**
     * Gets names
     * @return string[]
     */
    public function getNames()
    {
        return $this->names;
    }
  
    /**
     * Sets names
     * @param string[] $names a list of the patron's names
     * @return $this
     */
    public function setNames($names)
    {
        
        $this->names = $names;
        return $this;
    }
    
    /**
     * Gets barcodes
     * @return string[]
     */
    public function getBarcodes()
    {
        return $this->barcodes;
    }
  
    /**
     * Sets barcodes
     * @param string[] $barcodes the patron's barcode(s)
     * @return $this
     */
    public function setBarcodes($barcodes)
    {
        
        $this->barcodes = $barcodes;
        return $this;
    }
    
    /**
     * Gets expirationDate
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->expirationDate;
    }
  
    /**
     * Sets expirationDate
     * @param \DateTime $expirationDate the expiration date of the patron's borrowing privileges in ISO 8601 format (yyyy-MM-dd)
     * @return $this
     */
    public function setExpirationDate($expirationDate)
    {
        
        $this->expirationDate = $expirationDate;
        return $this;
    }
    
    /**
     * Gets birthDate
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->birthDate;
    }
  
    /**
     * Sets birthDate
     * @param \DateTime $birthDate the patron's date of birth in ISO 8601 format (yyyy-MM-dd)
     * @return $this
     */
    public function setBirthDate($birthDate)
    {
        
        $this->birthDate = $birthDate;
        return $this;
    }
    
    /**
     * Gets emails
     * @return string[]
     */
    public function getEmails()
    {
        return $this->emails;
    }
  
    /**
     * Sets emails
     * @param string[] $emails the patron's email addresses
     * @return $this
     */
    public function setEmails($emails)
    {
        
        $this->emails = $emails;
        return $this;
    }
    
    /**
     * Gets patronType
     * @return int
     */
    public function getPatronType()
    {
        return $this->patronType;
    }
  
    /**
     * Sets patronType
     * @param int $patronType the patron type code
     * @return $this
     */
    public function setPatronType($patronType)
    {
        
        $this->patronType = $patronType;
        return $this;
    }
    
    /**
     * Gets patronCodes
     * @return \Models\Codes
     */
    public function getPatronCodes()
    {
        return $this->patronCodes;
    }
  
    /**
     * Sets patronCodes
     * @param \Models\Codes $patronCodes the library-defined pcodes associated with the patron
     * @return $this
     */
    public function setPatronCodes($patronCodes)
    {
        
        $this->patronCodes = $patronCodes;
        return $this;
    }
    
    /**
     * Gets homeLibraryCode
     * @return string
     */
    public function getHomeLibraryCode()
    {
        return $this->homeLibraryCode;
    }
  
    /**
     * Sets homeLibraryCode
     * @param string $homeLibraryCode the patron's home library
     * @return $this
     */
    public function setHomeLibraryCode($homeLibraryCode)
    {
        
        $this->homeLibraryCode = $homeLibraryCode;
        return $this;
    }
    
    /**
     * Gets message
     * @return \Models\Message
     */
    public function getMessage()
    {
        return $this->message;
    }
  
    /**
     * Sets message
     * @param \Models\Message $message message-related data for the patron
     * @return $this
     */
    public function setMessage($message)
    {
        
        $this->message = $message;
        return $this;
    }
    
    /**
     * Gets blockInfo
     * @return \Models\Block
     */
    public function getBlockInfo()
    {
        return $this->blockInfo;
    }
  
    /**
     * Sets blockInfo
     * @param \Models\Block $blockInfo patron block information
     * @return $this
     */
    public function setBlockInfo($blockInfo)
    {
        
        $this->blockInfo = $blockInfo;
        return $this;
    }
    
    /**
     * Gets addresses
     * @return \Models\Address[]
     */
    public function getAddresses()
    {
        return $this->addresses;
    }
  
    /**
     * Sets addresses
     * @param \Models\Address[] $addresses the patron's addresses
     * @return $this
     */
    public function setAddresses($addresses)
    {
        
        $this->addresses = $addresses;
        return $this;
    }
    
    /**
     * Gets phones
     * @return \Models\Phone[]
     */
    public function getPhones()
    {
        return $this->phones;
    }
  
    /**
     * Sets phones
     * @param \Models\Phone[] $phones the patron's telephone numbers
     * @return $this
     */
    public function setPhones($phones)
    {
        
        $this->phones = $phones;
        return $this;
    }
    
    /**
     * Gets uniqueIds
     * @return string[]
     */
    public function getUniqueIds()
    {
        return $this->uniqueIds;
    }
  
    /**
     * Sets uniqueIds
     * @param string[] $uniqueIds the patron's unique IDs
     * @return $this
     */
    public function setUniqueIds($uniqueIds)
    {
        
        $this->uniqueIds = $uniqueIds;
        return $this;
    }
    
    /**
     * Gets moneyOwed
     * @return double
     */
    public function getMoneyOwed()
    {
        return $this->moneyOwed;
    }
  
    /**
     * Sets moneyOwed
     * @param double $moneyOwed the amount of money the patron owes in fines and charges
     * @return $this
     */
    public function setMoneyOwed($moneyOwed)
    {
        
        $this->moneyOwed = $moneyOwed;
        return $this;
    }
    
    /**
     * Gets pMessage
     * @return string
     */
    public function getPMessage()
    {
        return $this->pMessage;
    }
  
    /**
     * Sets pMessage
     * @param string $pMessage the patron's message
     * @return $this
     */
    public function setPMessage($pMessage)
    {
        
        $this->pMessage = $pMessage;
        return $this;
    }
    
    /**
     * Gets langPref
     * @return string
     */
    public function getLangPref()
    {
        return $this->langPref;
    }
  
    /**
     * Sets langPref
     * @param string $langPref the patron's language preference
     * @return $this
     */
    public function setLangPref($langPref)
    {
        
        $this->langPref = $langPref;
        return $this;
    }
    
    /**
     * Gets fixedFields
     * @return \Models\map
     */
    public function getFixedFields()
    {
        return $this->fixedFields;
    }
  
    /**
     * Sets fixedFields
     * @param \Models\map $fixedFields the fixed-length fields from the patron record
     * @return $this
     */
    public function setFixedFields($fixedFields)
    {
        
        $this->fixedFields = $fixedFields;
        return $this;
    }
    
    /**
     * Gets varFields
     * @return \Models\VarField[]
     */
    public function getVarFields()
    {
        return $this->varFields;
    }
  
    /**
     * Sets varFields
     * @param \Models\VarField[] $varFields the variable-length fields from the patron record
     * @return $this
     */
    public function setVarFields($varFields)
    {
        
        $this->varFields = $varFields;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
