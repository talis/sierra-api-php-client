<?php
/**
 * ChargedFund
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * ChargedFund Class Doc Comment
 *
 * @category    Class
 * @description order data related to one fund
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChargedFund implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'displayOrder' => 'int',
        'fund' => 'string',
        'copies' => 'int',
        'location' => '\Models\Location'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'displayOrder' => 'displayOrder',
        'fund' => 'fund',
        'copies' => 'copies',
        'location' => 'location'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'displayOrder' => 'setDisplayOrder',
        'fund' => 'setFund',
        'copies' => 'setCopies',
        'location' => 'setLocation'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'displayOrder' => 'getDisplayOrder',
        'fund' => 'getFund',
        'copies' => 'getCopies',
        'location' => 'getLocation'
    );
  
    
    /**
      * $displayOrder an integer to manage the display order of a list
      * @var int
      */
    protected $displayOrder;
    
    /**
      * $fund the fund to be charged for the ordered items
      * @var string
      */
    protected $fund;
    
    /**
      * $copies the number of copies ordered
      * @var int
      */
    protected $copies;
    
    /**
      * $location the location code that corresponds to the physical location of the item ordered
      * @var \Models\Location
      */
    protected $location;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->displayOrder = $data["displayOrder"];
            $this->fund = $data["fund"];
            $this->copies = $data["copies"];
            $this->location = $data["location"];
        }
    }
    
    /**
     * Gets displayOrder
     * @return int
     */
    public function getDisplayOrder()
    {
        return $this->displayOrder;
    }
  
    /**
     * Sets displayOrder
     * @param int $displayOrder an integer to manage the display order of a list
     * @return $this
     */
    public function setDisplayOrder($displayOrder)
    {
        
        $this->displayOrder = $displayOrder;
        return $this;
    }
    
    /**
     * Gets fund
     * @return string
     */
    public function getFund()
    {
        return $this->fund;
    }
  
    /**
     * Sets fund
     * @param string $fund the fund to be charged for the ordered items
     * @return $this
     */
    public function setFund($fund)
    {
        
        $this->fund = $fund;
        return $this;
    }
    
    /**
     * Gets copies
     * @return int
     */
    public function getCopies()
    {
        return $this->copies;
    }
  
    /**
     * Sets copies
     * @param int $copies the number of copies ordered
     * @return $this
     */
    public function setCopies($copies)
    {
        
        $this->copies = $copies;
        return $this;
    }
    
    /**
     * Gets location
     * @return \Models\Location
     */
    public function getLocation()
    {
        return $this->location;
    }
  
    /**
     * Sets location
     * @param \Models\Location $location the location code that corresponds to the physical location of the item ordered
     * @return $this
     */
    public function setLocation($location)
    {
        
        $this->location = $location;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
