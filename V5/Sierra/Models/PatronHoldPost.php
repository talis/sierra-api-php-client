<?php
/**
 * PatronHoldPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\V5\Models;

use \ArrayAccess;
use \III\Sierra\V5\ObjectSerializer;

/**
 * PatronHoldPost Class Doc Comment
 *
 * @category Class
 * @description a hold
 * @package  III\Sierra\V5
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PatronHoldPost implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PatronHoldPost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recordType' => 'string',
        'recordNumber' => 'int',
        'pickupLocation' => 'string',
        'neededBy' => '\DateTime',
        'numberOfCopies' => 'int',
        'note' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recordType' => null,
        'recordNumber' => 'int64',
        'pickupLocation' => null,
        'neededBy' => 'date',
        'numberOfCopies' => 'int32',
        'note' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recordType' => 'recordType',
        'recordNumber' => 'recordNumber',
        'pickupLocation' => 'pickupLocation',
        'neededBy' => 'neededBy',
        'numberOfCopies' => 'numberOfCopies',
        'note' => 'note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recordType' => 'setRecordType',
        'recordNumber' => 'setRecordNumber',
        'pickupLocation' => 'setPickupLocation',
        'neededBy' => 'setNeededBy',
        'numberOfCopies' => 'setNumberOfCopies',
        'note' => 'setNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recordType' => 'getRecordType',
        'recordNumber' => 'getRecordNumber',
        'pickupLocation' => 'getPickupLocation',
        'neededBy' => 'getNeededBy',
        'numberOfCopies' => 'getNumberOfCopies',
        'note' => 'getNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recordType'] = isset($data['recordType']) ? $data['recordType'] : null;
        $this->container['recordNumber'] = isset($data['recordNumber']) ? $data['recordNumber'] : null;
        $this->container['pickupLocation'] = isset($data['pickupLocation']) ? $data['pickupLocation'] : null;
        $this->container['neededBy'] = isset($data['neededBy']) ? $data['neededBy'] : null;
        $this->container['numberOfCopies'] = isset($data['numberOfCopies']) ? $data['numberOfCopies'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recordType'] === null) {
            $invalidProperties[] = "'recordType' can't be null";
        }
        if ($this->container['recordNumber'] === null) {
            $invalidProperties[] = "'recordNumber' can't be null";
        }
        if ($this->container['pickupLocation'] === null) {
            $invalidProperties[] = "'pickupLocation' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['recordType'] === null) {
            return false;
        }
        if ($this->container['recordNumber'] === null) {
            return false;
        }
        if ($this->container['pickupLocation'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets recordType
     *
     * @return string
     */
    public function getRecordType()
    {
        return $this->container['recordType'];
    }

    /**
     * Sets recordType
     *
     * @param string $recordType the record type code, i.e., bib (b), item (i), or volume (j), associated with the hold
     *
     * @return $this
     */
    public function setRecordType($recordType)
    {
        $this->container['recordType'] = $recordType;

        return $this;
    }

    /**
     * Gets recordNumber
     *
     * @return int
     */
    public function getRecordNumber()
    {
        return $this->container['recordNumber'];
    }

    /**
     * Sets recordNumber
     *
     * @param int $recordNumber the held record number
     *
     * @return $this
     */
    public function setRecordNumber($recordNumber)
    {
        $this->container['recordNumber'] = $recordNumber;

        return $this;
    }

    /**
     * Gets pickupLocation
     *
     * @return string
     */
    public function getPickupLocation()
    {
        return $this->container['pickupLocation'];
    }

    /**
     * Sets pickupLocation
     *
     * @param string $pickupLocation the pickup location code
     *
     * @return $this
     */
    public function setPickupLocation($pickupLocation)
    {
        $this->container['pickupLocation'] = $pickupLocation;

        return $this;
    }

    /**
     * Gets neededBy
     *
     * @return \DateTime
     */
    public function getNeededBy()
    {
        return $this->container['neededBy'];
    }

    /**
     * Sets neededBy
     *
     * @param \DateTime $neededBy the date after which the held item is no longer needed, in ISO 8601 format (yyyy-MM-dd)
     *
     * @return $this
     */
    public function setNeededBy($neededBy)
    {
        $this->container['neededBy'] = $neededBy;

        return $this;
    }

    /**
     * Gets numberOfCopies
     *
     * @return int
     */
    public function getNumberOfCopies()
    {
        return $this->container['numberOfCopies'];
    }

    /**
     * Sets numberOfCopies
     *
     * @param int $numberOfCopies the number of copies to hold
     *
     * @return $this
     */
    public function setNumberOfCopies($numberOfCopies)
    {
        $this->container['numberOfCopies'] = $numberOfCopies;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note an informational note related to the hold
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


