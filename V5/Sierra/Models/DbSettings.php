<?php
/**
 * DbSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * DbSettings Class Doc Comment
 *
 * @category    Class
 * @description The database settings
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DbSettings implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'vendor' => 'string',
        'host' => 'string',
        'port' => 'int',
        'database' => 'string',
        'options' => 'string',
        'username' => 'string',
        'password' => 'string',
        'minPoolSize' => 'int',
        'maxPoolSize' => 'int',
        'poolIncrement' => 'int',
        'testConnectionOnCheckout' => 'bool',
        'testConnectionOnCheckin' => 'bool',
        'idleConnectionTestPeriod' => 'int',
        'useJavaMelody' => 'bool',
        'path' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'vendor' => 'vendor',
        'host' => 'host',
        'port' => 'port',
        'database' => 'database',
        'options' => 'options',
        'username' => 'username',
        'password' => 'password',
        'minPoolSize' => 'minPoolSize',
        'maxPoolSize' => 'maxPoolSize',
        'poolIncrement' => 'poolIncrement',
        'testConnectionOnCheckout' => 'testConnectionOnCheckout',
        'testConnectionOnCheckin' => 'testConnectionOnCheckin',
        'idleConnectionTestPeriod' => 'idleConnectionTestPeriod',
        'useJavaMelody' => 'useJavaMelody',
        'path' => 'path'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'vendor' => 'setVendor',
        'host' => 'setHost',
        'port' => 'setPort',
        'database' => 'setDatabase',
        'options' => 'setOptions',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'minPoolSize' => 'setMinPoolSize',
        'maxPoolSize' => 'setMaxPoolSize',
        'poolIncrement' => 'setPoolIncrement',
        'testConnectionOnCheckout' => 'setTestConnectionOnCheckout',
        'testConnectionOnCheckin' => 'setTestConnectionOnCheckin',
        'idleConnectionTestPeriod' => 'setIdleConnectionTestPeriod',
        'useJavaMelody' => 'setUseJavaMelody',
        'path' => 'setPath'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'vendor' => 'getVendor',
        'host' => 'getHost',
        'port' => 'getPort',
        'database' => 'getDatabase',
        'options' => 'getOptions',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'minPoolSize' => 'getMinPoolSize',
        'maxPoolSize' => 'getMaxPoolSize',
        'poolIncrement' => 'getPoolIncrement',
        'testConnectionOnCheckout' => 'getTestConnectionOnCheckout',
        'testConnectionOnCheckin' => 'getTestConnectionOnCheckin',
        'idleConnectionTestPeriod' => 'getIdleConnectionTestPeriod',
        'useJavaMelody' => 'getUseJavaMelody',
        'path' => 'getPath'
    );
  
    
    /**
      * $vendor the database vendor
      * @var string
      */
    protected $vendor;
    
    /**
      * $host the database host
      * @var string
      */
    protected $host;
    
    /**
      * $port the database port
      * @var int
      */
    protected $port;
    
    /**
      * $database the database name
      * @var string
      */
    protected $database;
    
    /**
      * $options the database options
      * @var string
      */
    protected $options;
    
    /**
      * $username the database username
      * @var string
      */
    protected $username;
    
    /**
      * $password the database password
      * @var string
      */
    protected $password;
    
    /**
      * $minPoolSize the database minimum pool size
      * @var int
      */
    protected $minPoolSize;
    
    /**
      * $maxPoolSize the database maximum pool size
      * @var int
      */
    protected $maxPoolSize;
    
    /**
      * $poolIncrement the database pool increment
      * @var int
      */
    protected $poolIncrement;
    
    /**
      * $testConnectionOnCheckout the database connection pool on every connection checkout to verify that the connection is valid
      * @var bool
      */
    protected $testConnectionOnCheckout;
    
    /**
      * $testConnectionOnCheckin the database connection pool an operation will be performed asynchronously at every connection checkin to verify that the connection is valid
      * @var bool
      */
    protected $testConnectionOnCheckin;
    
    /**
      * $idleConnectionTestPeriod the database connection pool if this is a number greater than 0, c3p0 will test all idle, pooled but unchecked-out connections, every this number of seconds.
      * @var int
      */
    protected $idleConnectionTestPeriod;
    
    /**
      * $useJavaMelody whether the database uses java melody
      * @var bool
      */
    protected $useJavaMelody;
    
    /**
      * $path the database path
      * @var string
      */
    protected $path;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->vendor = $data["vendor"];
            $this->host = $data["host"];
            $this->port = $data["port"];
            $this->database = $data["database"];
            $this->options = $data["options"];
            $this->username = $data["username"];
            $this->password = $data["password"];
            $this->minPoolSize = $data["minPoolSize"];
            $this->maxPoolSize = $data["maxPoolSize"];
            $this->poolIncrement = $data["poolIncrement"];
            $this->testConnectionOnCheckout = $data["testConnectionOnCheckout"];
            $this->testConnectionOnCheckin = $data["testConnectionOnCheckin"];
            $this->idleConnectionTestPeriod = $data["idleConnectionTestPeriod"];
            $this->useJavaMelody = $data["useJavaMelody"];
            $this->path = $data["path"];
        }
    }
    
    /**
     * Gets vendor
     * @return string
     */
    public function getVendor()
    {
        return $this->vendor;
    }
  
    /**
     * Sets vendor
     * @param string $vendor the database vendor
     * @return $this
     */
    public function setVendor($vendor)
    {
        
        $this->vendor = $vendor;
        return $this;
    }
    
    /**
     * Gets host
     * @return string
     */
    public function getHost()
    {
        return $this->host;
    }
  
    /**
     * Sets host
     * @param string $host the database host
     * @return $this
     */
    public function setHost($host)
    {
        
        $this->host = $host;
        return $this;
    }
    
    /**
     * Gets port
     * @return int
     */
    public function getPort()
    {
        return $this->port;
    }
  
    /**
     * Sets port
     * @param int $port the database port
     * @return $this
     */
    public function setPort($port)
    {
        
        $this->port = $port;
        return $this;
    }
    
    /**
     * Gets database
     * @return string
     */
    public function getDatabase()
    {
        return $this->database;
    }
  
    /**
     * Sets database
     * @param string $database the database name
     * @return $this
     */
    public function setDatabase($database)
    {
        
        $this->database = $database;
        return $this;
    }
    
    /**
     * Gets options
     * @return string
     */
    public function getOptions()
    {
        return $this->options;
    }
  
    /**
     * Sets options
     * @param string $options the database options
     * @return $this
     */
    public function setOptions($options)
    {
        
        $this->options = $options;
        return $this;
    }
    
    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }
  
    /**
     * Sets username
     * @param string $username the database username
     * @return $this
     */
    public function setUsername($username)
    {
        
        $this->username = $username;
        return $this;
    }
    
    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }
  
    /**
     * Sets password
     * @param string $password the database password
     * @return $this
     */
    public function setPassword($password)
    {
        
        $this->password = $password;
        return $this;
    }
    
    /**
     * Gets minPoolSize
     * @return int
     */
    public function getMinPoolSize()
    {
        return $this->minPoolSize;
    }
  
    /**
     * Sets minPoolSize
     * @param int $minPoolSize the database minimum pool size
     * @return $this
     */
    public function setMinPoolSize($minPoolSize)
    {
        
        $this->minPoolSize = $minPoolSize;
        return $this;
    }
    
    /**
     * Gets maxPoolSize
     * @return int
     */
    public function getMaxPoolSize()
    {
        return $this->maxPoolSize;
    }
  
    /**
     * Sets maxPoolSize
     * @param int $maxPoolSize the database maximum pool size
     * @return $this
     */
    public function setMaxPoolSize($maxPoolSize)
    {
        
        $this->maxPoolSize = $maxPoolSize;
        return $this;
    }
    
    /**
     * Gets poolIncrement
     * @return int
     */
    public function getPoolIncrement()
    {
        return $this->poolIncrement;
    }
  
    /**
     * Sets poolIncrement
     * @param int $poolIncrement the database pool increment
     * @return $this
     */
    public function setPoolIncrement($poolIncrement)
    {
        
        $this->poolIncrement = $poolIncrement;
        return $this;
    }
    
    /**
     * Gets testConnectionOnCheckout
     * @return bool
     */
    public function getTestConnectionOnCheckout()
    {
        return $this->testConnectionOnCheckout;
    }
  
    /**
     * Sets testConnectionOnCheckout
     * @param bool $testConnectionOnCheckout the database connection pool on every connection checkout to verify that the connection is valid
     * @return $this
     */
    public function setTestConnectionOnCheckout($testConnectionOnCheckout)
    {
        
        $this->testConnectionOnCheckout = $testConnectionOnCheckout;
        return $this;
    }
    
    /**
     * Gets testConnectionOnCheckin
     * @return bool
     */
    public function getTestConnectionOnCheckin()
    {
        return $this->testConnectionOnCheckin;
    }
  
    /**
     * Sets testConnectionOnCheckin
     * @param bool $testConnectionOnCheckin the database connection pool an operation will be performed asynchronously at every connection checkin to verify that the connection is valid
     * @return $this
     */
    public function setTestConnectionOnCheckin($testConnectionOnCheckin)
    {
        
        $this->testConnectionOnCheckin = $testConnectionOnCheckin;
        return $this;
    }
    
    /**
     * Gets idleConnectionTestPeriod
     * @return int
     */
    public function getIdleConnectionTestPeriod()
    {
        return $this->idleConnectionTestPeriod;
    }
  
    /**
     * Sets idleConnectionTestPeriod
     * @param int $idleConnectionTestPeriod the database connection pool if this is a number greater than 0, c3p0 will test all idle, pooled but unchecked-out connections, every this number of seconds.
     * @return $this
     */
    public function setIdleConnectionTestPeriod($idleConnectionTestPeriod)
    {
        
        $this->idleConnectionTestPeriod = $idleConnectionTestPeriod;
        return $this;
    }
    
    /**
     * Gets useJavaMelody
     * @return bool
     */
    public function getUseJavaMelody()
    {
        return $this->useJavaMelody;
    }
  
    /**
     * Sets useJavaMelody
     * @param bool $useJavaMelody whether the database uses java melody
     * @return $this
     */
    public function setUseJavaMelody($useJavaMelody)
    {
        
        $this->useJavaMelody = $useJavaMelody;
        return $this;
    }
    
    /**
     * Gets path
     * @return string
     */
    public function getPath()
    {
        return $this->path;
    }
  
    /**
     * Sets path
     * @param string $path the database path
     * @return $this
     */
    public function setPath($path)
    {
        
        $this->path = $path;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
