<?php
/**
 * ErrorCode
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * ErrorCode Class Doc Comment
 *
 * @category    Class
 * @description an error code
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ErrorCode implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'code' => 'int',
        'specificCode' => 'int',
        'httpStatus' => 'int',
        'name' => 'string',
        'description' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'code' => 'code',
        'specificCode' => 'specificCode',
        'httpStatus' => 'httpStatus',
        'name' => 'name',
        'description' => 'description'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'code' => 'setCode',
        'specificCode' => 'setSpecificCode',
        'httpStatus' => 'setHttpStatus',
        'name' => 'setName',
        'description' => 'setDescription'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'code' => 'getCode',
        'specificCode' => 'getSpecificCode',
        'httpStatus' => 'getHttpStatus',
        'name' => 'getName',
        'description' => 'getDescription'
    );
  
    
    /**
      * $code the API error code
      * @var int
      */
    protected $code;
    
    /**
      * $specificCode an error code returned by an external service
      * @var int
      */
    protected $specificCode;
    
    /**
      * $httpStatus the HTTP status code
      * @var int
      */
    protected $httpStatus;
    
    /**
      * $name the error name
      * @var string
      */
    protected $name;
    
    /**
      * $description the error description
      * @var string
      */
    protected $description;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->code = $data["code"];
            $this->specificCode = $data["specificCode"];
            $this->httpStatus = $data["httpStatus"];
            $this->name = $data["name"];
            $this->description = $data["description"];
        }
    }
    
    /**
     * Gets code
     * @return int
     */
    public function getCode()
    {
        return $this->code;
    }
  
    /**
     * Sets code
     * @param int $code the API error code
     * @return $this
     */
    public function setCode($code)
    {
        
        $this->code = $code;
        return $this;
    }
    
    /**
     * Gets specificCode
     * @return int
     */
    public function getSpecificCode()
    {
        return $this->specificCode;
    }
  
    /**
     * Sets specificCode
     * @param int $specificCode an error code returned by an external service
     * @return $this
     */
    public function setSpecificCode($specificCode)
    {
        
        $this->specificCode = $specificCode;
        return $this;
    }
    
    /**
     * Gets httpStatus
     * @return int
     */
    public function getHttpStatus()
    {
        return $this->httpStatus;
    }
  
    /**
     * Sets httpStatus
     * @param int $httpStatus the HTTP status code
     * @return $this
     */
    public function setHttpStatus($httpStatus)
    {
        
        $this->httpStatus = $httpStatus;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name the error name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description the error description
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
