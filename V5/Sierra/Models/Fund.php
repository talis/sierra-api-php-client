<?php
/**
 * Fund
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * Fund Class Doc Comment
 *
 * @category    Class
 * @description the properties of a fund
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Fund implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'code' => 'string',
        'codeNumber' => 'int',
        'accountingUnitCodeNumber' => 'int',
        'fundName' => 'string',
        'note1' => 'string',
        'extCode' => 'int',
        'extFundName' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'code' => 'code',
        'codeNumber' => 'codeNumber',
        'accountingUnitCodeNumber' => 'accountingUnitCodeNumber',
        'fundName' => 'fundName',
        'note1' => 'note1',
        'extCode' => 'extCode',
        'extFundName' => 'extFundName'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'code' => 'setCode',
        'codeNumber' => 'setCodeNumber',
        'accountingUnitCodeNumber' => 'setAccountingUnitCodeNumber',
        'fundName' => 'setFundName',
        'note1' => 'setNote1',
        'extCode' => 'setExtCode',
        'extFundName' => 'setExtFundName'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'code' => 'getCode',
        'codeNumber' => 'getCodeNumber',
        'accountingUnitCodeNumber' => 'getAccountingUnitCodeNumber',
        'fundName' => 'getFundName',
        'note1' => 'getNote1',
        'extCode' => 'getExtCode',
        'extFundName' => 'getExtFundName'
    );
  
    
    /**
      * $code a fund code
      * @var string
      */
    protected $code;
    
    /**
      * $codeNumber a fund code number
      * @var int
      */
    protected $codeNumber;
    
    /**
      * $accountingUnitCodeNumber an accounting unit code number
      * @var int
      */
    protected $accountingUnitCodeNumber;
    
    /**
      * $fundName the fund name
      * @var string
      */
    protected $fundName;
    
    /**
      * $note1 a note associated with the fund
      * @var string
      */
    protected $note1;
    
    /**
      * $extCode an external fund code used to link the fund to an external fund
      * @var int
      */
    protected $extCode;
    
    /**
      * $extFundName the external fund name
      * @var string
      */
    protected $extFundName;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->code = $data["code"];
            $this->codeNumber = $data["codeNumber"];
            $this->accountingUnitCodeNumber = $data["accountingUnitCodeNumber"];
            $this->fundName = $data["fundName"];
            $this->note1 = $data["note1"];
            $this->extCode = $data["extCode"];
            $this->extFundName = $data["extFundName"];
        }
    }
    
    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }
  
    /**
     * Sets code
     * @param string $code a fund code
     * @return $this
     */
    public function setCode($code)
    {
        
        $this->code = $code;
        return $this;
    }
    
    /**
     * Gets codeNumber
     * @return int
     */
    public function getCodeNumber()
    {
        return $this->codeNumber;
    }
  
    /**
     * Sets codeNumber
     * @param int $codeNumber a fund code number
     * @return $this
     */
    public function setCodeNumber($codeNumber)
    {
        
        $this->codeNumber = $codeNumber;
        return $this;
    }
    
    /**
     * Gets accountingUnitCodeNumber
     * @return int
     */
    public function getAccountingUnitCodeNumber()
    {
        return $this->accountingUnitCodeNumber;
    }
  
    /**
     * Sets accountingUnitCodeNumber
     * @param int $accountingUnitCodeNumber an accounting unit code number
     * @return $this
     */
    public function setAccountingUnitCodeNumber($accountingUnitCodeNumber)
    {
        
        $this->accountingUnitCodeNumber = $accountingUnitCodeNumber;
        return $this;
    }
    
    /**
     * Gets fundName
     * @return string
     */
    public function getFundName()
    {
        return $this->fundName;
    }
  
    /**
     * Sets fundName
     * @param string $fundName the fund name
     * @return $this
     */
    public function setFundName($fundName)
    {
        
        $this->fundName = $fundName;
        return $this;
    }
    
    /**
     * Gets note1
     * @return string
     */
    public function getNote1()
    {
        return $this->note1;
    }
  
    /**
     * Sets note1
     * @param string $note1 a note associated with the fund
     * @return $this
     */
    public function setNote1($note1)
    {
        
        $this->note1 = $note1;
        return $this;
    }
    
    /**
     * Gets extCode
     * @return int
     */
    public function getExtCode()
    {
        return $this->extCode;
    }
  
    /**
     * Sets extCode
     * @param int $extCode an external fund code used to link the fund to an external fund
     * @return $this
     */
    public function setExtCode($extCode)
    {
        
        $this->extCode = $extCode;
        return $this;
    }
    
    /**
     * Gets extFundName
     * @return string
     */
    public function getExtFundName()
    {
        return $this->extFundName;
    }
  
    /**
     * Sets extFundName
     * @param string $extFundName the external fund name
     * @return $this
     */
    public function setExtFundName($extFundName)
    {
        
        $this->extFundName = $extFundName;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
