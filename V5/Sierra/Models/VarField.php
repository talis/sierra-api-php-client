<?php
/**
 * VarField
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\V5\Models;

use \ArrayAccess;
use \III\Sierra\V5\ObjectSerializer;

/**
 * VarField Class Doc Comment
 *
 * @category Class
 * @description a variable-length field for a bibliographic record or item record
 * @package  III\Sierra\V5
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VarField implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VarField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fieldTag' => '\III\Sierra\V5\Models\Char',
        'marcTag' => 'string',
        'ind1' => '\III\Sierra\V5\Models\Char',
        'ind2' => '\III\Sierra\V5\Models\Char',
        'content' => 'string',
        'subfields' => '\III\Sierra\V5\Models\SubField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fieldTag' => null,
        'marcTag' => null,
        'ind1' => null,
        'ind2' => null,
        'content' => null,
        'subfields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fieldTag' => 'fieldTag',
        'marcTag' => 'marcTag',
        'ind1' => 'ind1',
        'ind2' => 'ind2',
        'content' => 'content',
        'subfields' => 'subfields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fieldTag' => 'setFieldTag',
        'marcTag' => 'setMarcTag',
        'ind1' => 'setInd1',
        'ind2' => 'setInd2',
        'content' => 'setContent',
        'subfields' => 'setSubfields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fieldTag' => 'getFieldTag',
        'marcTag' => 'getMarcTag',
        'ind1' => 'getInd1',
        'ind2' => 'getInd2',
        'content' => 'getContent',
        'subfields' => 'getSubfields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fieldTag'] = isset($data['fieldTag']) ? $data['fieldTag'] : null;
        $this->container['marcTag'] = isset($data['marcTag']) ? $data['marcTag'] : null;
        $this->container['ind1'] = isset($data['ind1']) ? $data['ind1'] : null;
        $this->container['ind2'] = isset($data['ind2']) ? $data['ind2'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['subfields'] = isset($data['subfields']) ? $data['subfields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fieldTag'] === null) {
            $invalidProperties[] = "'fieldTag' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fieldTag
     *
     * @return \III\Sierra\V5\Models\Char
     */
    public function getFieldTag()
    {
        return $this->container['fieldTag'];
    }

    /**
     * Sets fieldTag
     *
     * @param \III\Sierra\V5\Models\Char $fieldTag the Innovative variable-length field type tag
     *
     * @return $this
     */
    public function setFieldTag($fieldTag)
    {
        $this->container['fieldTag'] = $fieldTag;

        return $this;
    }

    /**
     * Gets marcTag
     *
     * @return string
     */
    public function getMarcTag()
    {
        return $this->container['marcTag'];
    }

    /**
     * Sets marcTag
     *
     * @param string $marcTag the MARC tag
     *
     * @return $this
     */
    public function setMarcTag($marcTag)
    {
        $this->container['marcTag'] = $marcTag;

        return $this;
    }

    /**
     * Gets ind1
     *
     * @return \III\Sierra\V5\Models\Char
     */
    public function getInd1()
    {
        return $this->container['ind1'];
    }

    /**
     * Sets ind1
     *
     * @param \III\Sierra\V5\Models\Char $ind1 the first MARC indicator, if present
     *
     * @return $this
     */
    public function setInd1($ind1)
    {
        $this->container['ind1'] = $ind1;

        return $this;
    }

    /**
     * Gets ind2
     *
     * @return \III\Sierra\V5\Models\Char
     */
    public function getInd2()
    {
        return $this->container['ind2'];
    }

    /**
     * Sets ind2
     *
     * @param \III\Sierra\V5\Models\Char $ind2 the second MARC indicator, if present
     *
     * @return $this
     */
    public function setInd2($ind2)
    {
        $this->container['ind2'] = $ind2;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content the field content for varfields with no subfields
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets subfields
     *
     * @return \III\Sierra\V5\Models\SubField[]
     */
    public function getSubfields()
    {
        return $this->container['subfields'];
    }

    /**
     * Sets subfields
     *
     * @param \III\Sierra\V5\Models\SubField[] $subfields a list of subfields, if present
     *
     * @return $this
     */
    public function setSubfields($subfields)
    {
        $this->container['subfields'] = $subfields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


