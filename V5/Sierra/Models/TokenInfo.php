<?php
/**
 * TokenInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * TokenInfo Class Doc Comment
 *
 * @category    Class
 * @description the token information details
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TokenInfo implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'patronId' => 'string',
        'keyId' => 'string',
        'grantType' => 'string',
        'authorizationScheme' => 'string',
        'expiresIn' => 'int',
        'roles' => '\Models\TokenInfoRole[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'patronId' => 'patronId',
        'keyId' => 'keyId',
        'grantType' => 'grantType',
        'authorizationScheme' => 'authorizationScheme',
        'expiresIn' => 'expiresIn',
        'roles' => 'roles'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'patronId' => 'setPatronId',
        'keyId' => 'setKeyId',
        'grantType' => 'setGrantType',
        'authorizationScheme' => 'setAuthorizationScheme',
        'expiresIn' => 'setExpiresIn',
        'roles' => 'setRoles'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'patronId' => 'getPatronId',
        'keyId' => 'getKeyId',
        'grantType' => 'getGrantType',
        'authorizationScheme' => 'getAuthorizationScheme',
        'expiresIn' => 'getExpiresIn',
        'roles' => 'getRoles'
    );
  
    
    /**
      * $patronId the associated patron ID (applies only to authorization code grant sessions)
      * @var string
      */
    protected $patronId;
    
    /**
      * $keyId the key ID
      * @var string
      */
    protected $keyId;
    
    /**
      * $grantType the grant type, i.e., authorization code grant or client credentials grant
      * @var string
      */
    protected $grantType;
    
    /**
      * $authorizationScheme the authorization scheme, such as 'Bearer' or 'Basic'
      * @var string
      */
    protected $authorizationScheme;
    
    /**
      * $expiresIn the remaining time (in seconds) after which the token expires
      * @var int
      */
    protected $expiresIn;
    
    /**
      * $roles the user role associated with the token
      * @var \Models\TokenInfoRole[]
      */
    protected $roles;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->patronId = $data["patronId"];
            $this->keyId = $data["keyId"];
            $this->grantType = $data["grantType"];
            $this->authorizationScheme = $data["authorizationScheme"];
            $this->expiresIn = $data["expiresIn"];
            $this->roles = $data["roles"];
        }
    }
    
    /**
     * Gets patronId
     * @return string
     */
    public function getPatronId()
    {
        return $this->patronId;
    }
  
    /**
     * Sets patronId
     * @param string $patronId the associated patron ID (applies only to authorization code grant sessions)
     * @return $this
     */
    public function setPatronId($patronId)
    {
        
        $this->patronId = $patronId;
        return $this;
    }
    
    /**
     * Gets keyId
     * @return string
     */
    public function getKeyId()
    {
        return $this->keyId;
    }
  
    /**
     * Sets keyId
     * @param string $keyId the key ID
     * @return $this
     */
    public function setKeyId($keyId)
    {
        
        $this->keyId = $keyId;
        return $this;
    }
    
    /**
     * Gets grantType
     * @return string
     */
    public function getGrantType()
    {
        return $this->grantType;
    }
  
    /**
     * Sets grantType
     * @param string $grantType the grant type, i.e., authorization code grant or client credentials grant
     * @return $this
     */
    public function setGrantType($grantType)
    {
        
        $this->grantType = $grantType;
        return $this;
    }
    
    /**
     * Gets authorizationScheme
     * @return string
     */
    public function getAuthorizationScheme()
    {
        return $this->authorizationScheme;
    }
  
    /**
     * Sets authorizationScheme
     * @param string $authorizationScheme the authorization scheme, such as 'Bearer' or 'Basic'
     * @return $this
     */
    public function setAuthorizationScheme($authorizationScheme)
    {
        
        $this->authorizationScheme = $authorizationScheme;
        return $this;
    }
    
    /**
     * Gets expiresIn
     * @return int
     */
    public function getExpiresIn()
    {
        return $this->expiresIn;
    }
  
    /**
     * Sets expiresIn
     * @param int $expiresIn the remaining time (in seconds) after which the token expires
     * @return $this
     */
    public function setExpiresIn($expiresIn)
    {
        
        $this->expiresIn = $expiresIn;
        return $this;
    }
    
    /**
     * Gets roles
     * @return \Models\TokenInfoRole[]
     */
    public function getRoles()
    {
        return $this->roles;
    }
  
    /**
     * Sets roles
     * @param \Models\TokenInfoRole[] $roles the user role associated with the token
     * @return $this
     */
    public function setRoles($roles)
    {
        
        $this->roles = $roles;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
