<?php
/**
 * InvoiceLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * InvoiceLine Class Doc Comment
 *
 * @category    Class
 * @description an invoice line item record
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InvoiceLine implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'invoice' => 'string',
        'order' => 'string',
        'paidAmount' => 'double',
        'lienAmount' => 'double',
        'lienFlag' => 'int',
        'listPrice' => 'double',
        'fund' => 'string',
        'subFund' => 'int',
        'noOfCopies' => 'int',
        'externalFund' => 'int',
        'orderStatus' => 'string',
        'useTax' => 'bool',
        'lineItemNote' => 'string',
        'title' => 'string',
        'multiFlag' => 'string',
        'vendor' => 'string',
        'subStartingDate' => '\DateTime',
        'subEndingDate' => '\DateTime',
        'tax' => 'double'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'invoice' => 'invoice',
        'order' => 'order',
        'paidAmount' => 'paidAmount',
        'lienAmount' => 'lienAmount',
        'lienFlag' => 'lienFlag',
        'listPrice' => 'listPrice',
        'fund' => 'fund',
        'subFund' => 'subFund',
        'noOfCopies' => 'noOfCopies',
        'externalFund' => 'externalFund',
        'orderStatus' => 'orderStatus',
        'useTax' => 'useTax',
        'lineItemNote' => 'lineItemNote',
        'title' => 'title',
        'multiFlag' => 'multiFlag',
        'vendor' => 'vendor',
        'subStartingDate' => 'subStartingDate',
        'subEndingDate' => 'subEndingDate',
        'tax' => 'tax'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'invoice' => 'setInvoice',
        'order' => 'setOrder',
        'paidAmount' => 'setPaidAmount',
        'lienAmount' => 'setLienAmount',
        'lienFlag' => 'setLienFlag',
        'listPrice' => 'setListPrice',
        'fund' => 'setFund',
        'subFund' => 'setSubFund',
        'noOfCopies' => 'setNoOfCopies',
        'externalFund' => 'setExternalFund',
        'orderStatus' => 'setOrderStatus',
        'useTax' => 'setUseTax',
        'lineItemNote' => 'setLineItemNote',
        'title' => 'setTitle',
        'multiFlag' => 'setMultiFlag',
        'vendor' => 'setVendor',
        'subStartingDate' => 'setSubStartingDate',
        'subEndingDate' => 'setSubEndingDate',
        'tax' => 'setTax'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'invoice' => 'getInvoice',
        'order' => 'getOrder',
        'paidAmount' => 'getPaidAmount',
        'lienAmount' => 'getLienAmount',
        'lienFlag' => 'getLienFlag',
        'listPrice' => 'getListPrice',
        'fund' => 'getFund',
        'subFund' => 'getSubFund',
        'noOfCopies' => 'getNoOfCopies',
        'externalFund' => 'getExternalFund',
        'orderStatus' => 'getOrderStatus',
        'useTax' => 'getUseTax',
        'lineItemNote' => 'getLineItemNote',
        'title' => 'getTitle',
        'multiFlag' => 'getMultiFlag',
        'vendor' => 'getVendor',
        'subStartingDate' => 'getSubStartingDate',
        'subEndingDate' => 'getSubEndingDate',
        'tax' => 'getTax'
    );
  
    
    /**
      * $id system generated line number
      * @var string
      */
    protected $id;
    
    /**
      * $invoice link to invoice ID
      * @var string
      */
    protected $invoice;
    
    /**
      * $order link to order ID associated with this line item
      * @var string
      */
    protected $order;
    
    /**
      * $paidAmount paid amount, entered by user
      * @var double
      */
    protected $paidAmount;
    
    /**
      * $lienAmount lien amount
      * @var double
      */
    protected $lienAmount;
    
    /**
      * $lienFlag lien flag
      * @var int
      */
    protected $lienFlag;
    
    /**
      * $listPrice list price
      * @var double
      */
    protected $listPrice;
    
    /**
      * $fund internal fund code
      * @var string
      */
    protected $fund;
    
    /**
      * $subFund sub-fund associated with an internal fund code (max 7 per fund)
      * @var int
      */
    protected $subFund;
    
    /**
      * $noOfCopies number of copies of the material contained in this line item
      * @var int
      */
    protected $noOfCopies;
    
    /**
      * $externalFund external fund code
      * @var int
      */
    protected $externalFund;
    
    /**
      * $orderStatus status of this line item
      * @var string
      */
    protected $orderStatus;
    
    /**
      * $useTax whether use tax is used for this line item
      * @var bool
      */
    protected $useTax;
    
    /**
      * $lineItemNote note associated with this line item, entered by user
      * @var string
      */
    protected $lineItemNote;
    
    /**
      * $title title of material, supplied by system
      * @var string
      */
    protected $title;
    
    /**
      * $multiFlag multi-fund group code
      * @var string
      */
    protected $multiFlag;
    
    /**
      * $vendor 5-char vendor code
      * @var string
      */
    protected $vendor;
    
    /**
      * $subStartingDate subscription starting date, entered by user
      * @var \DateTime
      */
    protected $subStartingDate;
    
    /**
      * $subEndingDate subscription end date, entered by user
      * @var \DateTime
      */
    protected $subEndingDate;
    
    /**
      * $tax amount of tax for the line item, system generated
      * @var double
      */
    protected $tax;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->invoice = $data["invoice"];
            $this->order = $data["order"];
            $this->paidAmount = $data["paidAmount"];
            $this->lienAmount = $data["lienAmount"];
            $this->lienFlag = $data["lienFlag"];
            $this->listPrice = $data["listPrice"];
            $this->fund = $data["fund"];
            $this->subFund = $data["subFund"];
            $this->noOfCopies = $data["noOfCopies"];
            $this->externalFund = $data["externalFund"];
            $this->orderStatus = $data["orderStatus"];
            $this->useTax = $data["useTax"];
            $this->lineItemNote = $data["lineItemNote"];
            $this->title = $data["title"];
            $this->multiFlag = $data["multiFlag"];
            $this->vendor = $data["vendor"];
            $this->subStartingDate = $data["subStartingDate"];
            $this->subEndingDate = $data["subEndingDate"];
            $this->tax = $data["tax"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id system generated line number
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets invoice
     * @return string
     */
    public function getInvoice()
    {
        return $this->invoice;
    }
  
    /**
     * Sets invoice
     * @param string $invoice link to invoice ID
     * @return $this
     */
    public function setInvoice($invoice)
    {
        
        $this->invoice = $invoice;
        return $this;
    }
    
    /**
     * Gets order
     * @return string
     */
    public function getOrder()
    {
        return $this->order;
    }
  
    /**
     * Sets order
     * @param string $order link to order ID associated with this line item
     * @return $this
     */
    public function setOrder($order)
    {
        
        $this->order = $order;
        return $this;
    }
    
    /**
     * Gets paidAmount
     * @return double
     */
    public function getPaidAmount()
    {
        return $this->paidAmount;
    }
  
    /**
     * Sets paidAmount
     * @param double $paidAmount paid amount, entered by user
     * @return $this
     */
    public function setPaidAmount($paidAmount)
    {
        
        $this->paidAmount = $paidAmount;
        return $this;
    }
    
    /**
     * Gets lienAmount
     * @return double
     */
    public function getLienAmount()
    {
        return $this->lienAmount;
    }
  
    /**
     * Sets lienAmount
     * @param double $lienAmount lien amount
     * @return $this
     */
    public function setLienAmount($lienAmount)
    {
        
        $this->lienAmount = $lienAmount;
        return $this;
    }
    
    /**
     * Gets lienFlag
     * @return int
     */
    public function getLienFlag()
    {
        return $this->lienFlag;
    }
  
    /**
     * Sets lienFlag
     * @param int $lienFlag lien flag
     * @return $this
     */
    public function setLienFlag($lienFlag)
    {
        
        $this->lienFlag = $lienFlag;
        return $this;
    }
    
    /**
     * Gets listPrice
     * @return double
     */
    public function getListPrice()
    {
        return $this->listPrice;
    }
  
    /**
     * Sets listPrice
     * @param double $listPrice list price
     * @return $this
     */
    public function setListPrice($listPrice)
    {
        
        $this->listPrice = $listPrice;
        return $this;
    }
    
    /**
     * Gets fund
     * @return string
     */
    public function getFund()
    {
        return $this->fund;
    }
  
    /**
     * Sets fund
     * @param string $fund internal fund code
     * @return $this
     */
    public function setFund($fund)
    {
        
        $this->fund = $fund;
        return $this;
    }
    
    /**
     * Gets subFund
     * @return int
     */
    public function getSubFund()
    {
        return $this->subFund;
    }
  
    /**
     * Sets subFund
     * @param int $subFund sub-fund associated with an internal fund code (max 7 per fund)
     * @return $this
     */
    public function setSubFund($subFund)
    {
        
        $this->subFund = $subFund;
        return $this;
    }
    
    /**
     * Gets noOfCopies
     * @return int
     */
    public function getNoOfCopies()
    {
        return $this->noOfCopies;
    }
  
    /**
     * Sets noOfCopies
     * @param int $noOfCopies number of copies of the material contained in this line item
     * @return $this
     */
    public function setNoOfCopies($noOfCopies)
    {
        
        $this->noOfCopies = $noOfCopies;
        return $this;
    }
    
    /**
     * Gets externalFund
     * @return int
     */
    public function getExternalFund()
    {
        return $this->externalFund;
    }
  
    /**
     * Sets externalFund
     * @param int $externalFund external fund code
     * @return $this
     */
    public function setExternalFund($externalFund)
    {
        
        $this->externalFund = $externalFund;
        return $this;
    }
    
    /**
     * Gets orderStatus
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->orderStatus;
    }
  
    /**
     * Sets orderStatus
     * @param string $orderStatus status of this line item
     * @return $this
     */
    public function setOrderStatus($orderStatus)
    {
        
        $this->orderStatus = $orderStatus;
        return $this;
    }
    
    /**
     * Gets useTax
     * @return bool
     */
    public function getUseTax()
    {
        return $this->useTax;
    }
  
    /**
     * Sets useTax
     * @param bool $useTax whether use tax is used for this line item
     * @return $this
     */
    public function setUseTax($useTax)
    {
        
        $this->useTax = $useTax;
        return $this;
    }
    
    /**
     * Gets lineItemNote
     * @return string
     */
    public function getLineItemNote()
    {
        return $this->lineItemNote;
    }
  
    /**
     * Sets lineItemNote
     * @param string $lineItemNote note associated with this line item, entered by user
     * @return $this
     */
    public function setLineItemNote($lineItemNote)
    {
        
        $this->lineItemNote = $lineItemNote;
        return $this;
    }
    
    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
  
    /**
     * Sets title
     * @param string $title title of material, supplied by system
     * @return $this
     */
    public function setTitle($title)
    {
        
        $this->title = $title;
        return $this;
    }
    
    /**
     * Gets multiFlag
     * @return string
     */
    public function getMultiFlag()
    {
        return $this->multiFlag;
    }
  
    /**
     * Sets multiFlag
     * @param string $multiFlag multi-fund group code
     * @return $this
     */
    public function setMultiFlag($multiFlag)
    {
        
        $this->multiFlag = $multiFlag;
        return $this;
    }
    
    /**
     * Gets vendor
     * @return string
     */
    public function getVendor()
    {
        return $this->vendor;
    }
  
    /**
     * Sets vendor
     * @param string $vendor 5-char vendor code
     * @return $this
     */
    public function setVendor($vendor)
    {
        
        $this->vendor = $vendor;
        return $this;
    }
    
    /**
     * Gets subStartingDate
     * @return \DateTime
     */
    public function getSubStartingDate()
    {
        return $this->subStartingDate;
    }
  
    /**
     * Sets subStartingDate
     * @param \DateTime $subStartingDate subscription starting date, entered by user
     * @return $this
     */
    public function setSubStartingDate($subStartingDate)
    {
        
        $this->subStartingDate = $subStartingDate;
        return $this;
    }
    
    /**
     * Gets subEndingDate
     * @return \DateTime
     */
    public function getSubEndingDate()
    {
        return $this->subEndingDate;
    }
  
    /**
     * Sets subEndingDate
     * @param \DateTime $subEndingDate subscription end date, entered by user
     * @return $this
     */
    public function setSubEndingDate($subEndingDate)
    {
        
        $this->subEndingDate = $subEndingDate;
        return $this;
    }
    
    /**
     * Gets tax
     * @return double
     */
    public function getTax()
    {
        return $this->tax;
    }
  
    /**
     * Sets tax
     * @param double $tax amount of tax for the line item, system generated
     * @return $this
     */
    public function setTax($tax)
    {
        
        $this->tax = $tax;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
