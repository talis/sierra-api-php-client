<?php
/**
 * Checkout
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * Checkout Class Doc Comment
 *
 * @category    Class
 * @description the data describing a checkout
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Checkout implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'patron' => 'string',
        'item' => 'string',
        'barcode' => 'string',
        'dueDate' => '\DateTime',
        'callNumber' => 'string',
        'numberOfRenewals' => 'int',
        'outDate' => '\DateTime',
        'recallDate' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'patron' => 'patron',
        'item' => 'item',
        'barcode' => 'barcode',
        'dueDate' => 'dueDate',
        'callNumber' => 'callNumber',
        'numberOfRenewals' => 'numberOfRenewals',
        'outDate' => 'outDate',
        'recallDate' => 'recallDate'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'patron' => 'setPatron',
        'item' => 'setItem',
        'barcode' => 'setBarcode',
        'dueDate' => 'setDueDate',
        'callNumber' => 'setCallNumber',
        'numberOfRenewals' => 'setNumberOfRenewals',
        'outDate' => 'setOutDate',
        'recallDate' => 'setRecallDate'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'patron' => 'getPatron',
        'item' => 'getItem',
        'barcode' => 'getBarcode',
        'dueDate' => 'getDueDate',
        'callNumber' => 'getCallNumber',
        'numberOfRenewals' => 'getNumberOfRenewals',
        'outDate' => 'getOutDate',
        'recallDate' => 'getRecallDate'
    );
  
    
    /**
      * $id the ID of the checkout
      * @var string
      */
    protected $id;
    
    /**
      * $patron the patron record number associated with the checkout
      * @var string
      */
    protected $patron;
    
    /**
      * $item the item record number associated with the checkout
      * @var string
      */
    protected $item;
    
    /**
      * $barcode the barcode of the associated item
      * @var string
      */
    protected $barcode;
    
    /**
      * $dueDate the due date of the item, in ISO 8601 format
      * @var \DateTime
      */
    protected $dueDate;
    
    /**
      * $callNumber the call number of the associated item
      * @var string
      */
    protected $callNumber;
    
    /**
      * $numberOfRenewals the total number of times the item has been renewed
      * @var int
      */
    protected $numberOfRenewals;
    
    /**
      * $outDate the checkout date and time for the item, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
      * @var \DateTime
      */
    protected $outDate;
    
    /**
      * $recallDate the date the item was recalled (blank if the item has not been recalled), in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
      * @var \DateTime
      */
    protected $recallDate;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->patron = $data["patron"];
            $this->item = $data["item"];
            $this->barcode = $data["barcode"];
            $this->dueDate = $data["dueDate"];
            $this->callNumber = $data["callNumber"];
            $this->numberOfRenewals = $data["numberOfRenewals"];
            $this->outDate = $data["outDate"];
            $this->recallDate = $data["recallDate"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id the ID of the checkout
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets patron
     * @return string
     */
    public function getPatron()
    {
        return $this->patron;
    }
  
    /**
     * Sets patron
     * @param string $patron the patron record number associated with the checkout
     * @return $this
     */
    public function setPatron($patron)
    {
        
        $this->patron = $patron;
        return $this;
    }
    
    /**
     * Gets item
     * @return string
     */
    public function getItem()
    {
        return $this->item;
    }
  
    /**
     * Sets item
     * @param string $item the item record number associated with the checkout
     * @return $this
     */
    public function setItem($item)
    {
        
        $this->item = $item;
        return $this;
    }
    
    /**
     * Gets barcode
     * @return string
     */
    public function getBarcode()
    {
        return $this->barcode;
    }
  
    /**
     * Sets barcode
     * @param string $barcode the barcode of the associated item
     * @return $this
     */
    public function setBarcode($barcode)
    {
        
        $this->barcode = $barcode;
        return $this;
    }
    
    /**
     * Gets dueDate
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->dueDate;
    }
  
    /**
     * Sets dueDate
     * @param \DateTime $dueDate the due date of the item, in ISO 8601 format
     * @return $this
     */
    public function setDueDate($dueDate)
    {
        
        $this->dueDate = $dueDate;
        return $this;
    }
    
    /**
     * Gets callNumber
     * @return string
     */
    public function getCallNumber()
    {
        return $this->callNumber;
    }
  
    /**
     * Sets callNumber
     * @param string $callNumber the call number of the associated item
     * @return $this
     */
    public function setCallNumber($callNumber)
    {
        
        $this->callNumber = $callNumber;
        return $this;
    }
    
    /**
     * Gets numberOfRenewals
     * @return int
     */
    public function getNumberOfRenewals()
    {
        return $this->numberOfRenewals;
    }
  
    /**
     * Sets numberOfRenewals
     * @param int $numberOfRenewals the total number of times the item has been renewed
     * @return $this
     */
    public function setNumberOfRenewals($numberOfRenewals)
    {
        
        $this->numberOfRenewals = $numberOfRenewals;
        return $this;
    }
    
    /**
     * Gets outDate
     * @return \DateTime
     */
    public function getOutDate()
    {
        return $this->outDate;
    }
  
    /**
     * Sets outDate
     * @param \DateTime $outDate the checkout date and time for the item, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     * @return $this
     */
    public function setOutDate($outDate)
    {
        
        $this->outDate = $outDate;
        return $this;
    }
    
    /**
     * Gets recallDate
     * @return \DateTime
     */
    public function getRecallDate()
    {
        return $this->recallDate;
    }
  
    /**
     * Sets recallDate
     * @param \DateTime $recallDate the date the item was recalled (blank if the item has not been recalled), in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     * @return $this
     */
    public function setRecallDate($recallDate)
    {
        
        $this->recallDate = $recallDate;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
