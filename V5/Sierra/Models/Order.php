<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\V5\Models;

use \ArrayAccess;
use \III\Sierra\V5\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description the order
 * @package  III\Sierra\V5
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'updatedDate' => '\DateTime',
        'createdDate' => '\DateTime',
        'deletedDate' => '\DateTime',
        'deleted' => 'bool',
        'suppressed' => 'bool',
        'accountingUnit' => 'int',
        'estimatedPrice' => 'float',
        'vendorRecordCode' => 'string',
        'orderDate' => '\DateTime',
        'chargedFunds' => '\III\Sierra\V5\Models\ChargedFund[]',
        'vendorTitles' => 'string[]',
        'fixedFields' => '\III\Sierra\V5\Models\map',
        'varFields' => '\III\Sierra\V5\Models\VarField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'updatedDate' => 'date-time',
        'createdDate' => 'date-time',
        'deletedDate' => 'date',
        'deleted' => null,
        'suppressed' => null,
        'accountingUnit' => 'int64',
        'estimatedPrice' => null,
        'vendorRecordCode' => null,
        'orderDate' => 'date-time',
        'chargedFunds' => null,
        'vendorTitles' => null,
        'fixedFields' => null,
        'varFields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'updatedDate' => 'updatedDate',
        'createdDate' => 'createdDate',
        'deletedDate' => 'deletedDate',
        'deleted' => 'deleted',
        'suppressed' => 'suppressed',
        'accountingUnit' => 'accountingUnit',
        'estimatedPrice' => 'estimatedPrice',
        'vendorRecordCode' => 'vendorRecordCode',
        'orderDate' => 'orderDate',
        'chargedFunds' => 'chargedFunds',
        'vendorTitles' => 'vendorTitles',
        'fixedFields' => 'fixedFields',
        'varFields' => 'varFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'updatedDate' => 'setUpdatedDate',
        'createdDate' => 'setCreatedDate',
        'deletedDate' => 'setDeletedDate',
        'deleted' => 'setDeleted',
        'suppressed' => 'setSuppressed',
        'accountingUnit' => 'setAccountingUnit',
        'estimatedPrice' => 'setEstimatedPrice',
        'vendorRecordCode' => 'setVendorRecordCode',
        'orderDate' => 'setOrderDate',
        'chargedFunds' => 'setChargedFunds',
        'vendorTitles' => 'setVendorTitles',
        'fixedFields' => 'setFixedFields',
        'varFields' => 'setVarFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'updatedDate' => 'getUpdatedDate',
        'createdDate' => 'getCreatedDate',
        'deletedDate' => 'getDeletedDate',
        'deleted' => 'getDeleted',
        'suppressed' => 'getSuppressed',
        'accountingUnit' => 'getAccountingUnit',
        'estimatedPrice' => 'getEstimatedPrice',
        'vendorRecordCode' => 'getVendorRecordCode',
        'orderDate' => 'getOrderDate',
        'chargedFunds' => 'getChargedFunds',
        'vendorTitles' => 'getVendorTitles',
        'fixedFields' => 'getFixedFields',
        'varFields' => 'getVarFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['updatedDate'] = isset($data['updatedDate']) ? $data['updatedDate'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['deletedDate'] = isset($data['deletedDate']) ? $data['deletedDate'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['suppressed'] = isset($data['suppressed']) ? $data['suppressed'] : null;
        $this->container['accountingUnit'] = isset($data['accountingUnit']) ? $data['accountingUnit'] : null;
        $this->container['estimatedPrice'] = isset($data['estimatedPrice']) ? $data['estimatedPrice'] : null;
        $this->container['vendorRecordCode'] = isset($data['vendorRecordCode']) ? $data['vendorRecordCode'] : null;
        $this->container['orderDate'] = isset($data['orderDate']) ? $data['orderDate'] : null;
        $this->container['chargedFunds'] = isset($data['chargedFunds']) ? $data['chargedFunds'] : null;
        $this->container['vendorTitles'] = isset($data['vendorTitles']) ? $data['vendorTitles'] : null;
        $this->container['fixedFields'] = isset($data['fixedFields']) ? $data['fixedFields'] : null;
        $this->container['varFields'] = isset($data['varFields']) ? $data['varFields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['fixedFields'] === null) {
            $invalidProperties[] = "'fixedFields' can't be null";
        }
        if ($this->container['varFields'] === null) {
            $invalidProperties[] = "'varFields' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['deleted'] === null) {
            return false;
        }
        if ($this->container['fixedFields'] === null) {
            return false;
        }
        if ($this->container['varFields'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id the order ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets updatedDate
     *
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->container['updatedDate'];
    }

    /**
     * Sets updatedDate
     *
     * @param \DateTime $updatedDate the date and time of the last update to the record, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     *
     * @return $this
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->container['updatedDate'] = $updatedDate;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate the date and time the record was created, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets deletedDate
     *
     * @return \DateTime
     */
    public function getDeletedDate()
    {
        return $this->container['deletedDate'];
    }

    /**
     * Sets deletedDate
     *
     * @param \DateTime $deletedDate the date the record was deleted, in ISO 8601 format (yyyy-MM-dd)
     *
     * @return $this
     */
    public function setDeletedDate($deletedDate)
    {
        $this->container['deletedDate'] = $deletedDate;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted whether the record has been deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets suppressed
     *
     * @return bool
     */
    public function getSuppressed()
    {
        return $this->container['suppressed'];
    }

    /**
     * Sets suppressed
     *
     * @param bool $suppressed whether the record is suppressed from public display
     *
     * @return $this
     */
    public function setSuppressed($suppressed)
    {
        $this->container['suppressed'] = $suppressed;

        return $this;
    }

    /**
     * Gets accountingUnit
     *
     * @return int
     */
    public function getAccountingUnit()
    {
        return $this->container['accountingUnit'];
    }

    /**
     * Sets accountingUnit
     *
     * @param int $accountingUnit the accounting unit of the order
     *
     * @return $this
     */
    public function setAccountingUnit($accountingUnit)
    {
        $this->container['accountingUnit'] = $accountingUnit;

        return $this;
    }

    /**
     * Gets estimatedPrice
     *
     * @return float
     */
    public function getEstimatedPrice()
    {
        return $this->container['estimatedPrice'];
    }

    /**
     * Sets estimatedPrice
     *
     * @param float $estimatedPrice the estimated price for one copy of the ordered item
     *
     * @return $this
     */
    public function setEstimatedPrice($estimatedPrice)
    {
        $this->container['estimatedPrice'] = $estimatedPrice;

        return $this;
    }

    /**
     * Gets vendorRecordCode
     *
     * @return string
     */
    public function getVendorRecordCode()
    {
        return $this->container['vendorRecordCode'];
    }

    /**
     * Sets vendorRecordCode
     *
     * @param string $vendorRecordCode a library-defined code for the vendor who handles the order
     *
     * @return $this
     */
    public function setVendorRecordCode($vendorRecordCode)
    {
        $this->container['vendorRecordCode'] = $vendorRecordCode;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['orderDate'];
    }

    /**
     * Sets orderDate
     *
     * @param \DateTime $orderDate the date the material was ordered, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     *
     * @return $this
     */
    public function setOrderDate($orderDate)
    {
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets chargedFunds
     *
     * @return \III\Sierra\V5\Models\ChargedFund[]
     */
    public function getChargedFunds()
    {
        return $this->container['chargedFunds'];
    }

    /**
     * Sets chargedFunds
     *
     * @param \III\Sierra\V5\Models\ChargedFund[] $chargedFunds the list of funds to be charged and related data
     *
     * @return $this
     */
    public function setChargedFunds($chargedFunds)
    {
        $this->container['chargedFunds'] = $chargedFunds;

        return $this;
    }

    /**
     * Gets vendorTitles
     *
     * @return string[]
     */
    public function getVendorTitles()
    {
        return $this->container['vendorTitles'];
    }

    /**
     * Sets vendorTitles
     *
     * @param string[] $vendorTitles the list of the vendor's identification numbers for this title; the vendor's identification number is also called the Vendor ID #
     *
     * @return $this
     */
    public function setVendorTitles($vendorTitles)
    {
        $this->container['vendorTitles'] = $vendorTitles;

        return $this;
    }

    /**
     * Gets fixedFields
     *
     * @return \III\Sierra\V5\Models\map
     */
    public function getFixedFields()
    {
        return $this->container['fixedFields'];
    }

    /**
     * Sets fixedFields
     *
     * @param \III\Sierra\V5\Models\map $fixedFields the fixed-length fields from the order record
     *
     * @return $this
     */
    public function setFixedFields($fixedFields)
    {
        $this->container['fixedFields'] = $fixedFields;

        return $this;
    }

    /**
     * Gets varFields
     *
     * @return \III\Sierra\V5\Models\VarField[]
     */
    public function getVarFields()
    {
        return $this->container['varFields'];
    }

    /**
     * Sets varFields
     *
     * @param \III\Sierra\V5\Models\VarField[] $varFields the variable-length fields from the order record
     *
     * @return $this
     */
    public function setVarFields($varFields)
    {
        $this->container['varFields'] = $varFields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


