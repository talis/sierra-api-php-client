<?php
/**
 * InvoiceTotal
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * InvoiceTotal Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class InvoiceTotal implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'subTotal' => 'double',
        'shipping' => 'double',
        'tax' => 'double',
        'discountOrService' => 'double',
        'grandTotal' => 'double'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'subTotal' => 'subTotal',
        'shipping' => 'shipping',
        'tax' => 'tax',
        'discountOrService' => 'discountOrService',
        'grandTotal' => 'grandTotal'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'subTotal' => 'setSubTotal',
        'shipping' => 'setShipping',
        'tax' => 'setTax',
        'discountOrService' => 'setDiscountOrService',
        'grandTotal' => 'setGrandTotal'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'subTotal' => 'getSubTotal',
        'shipping' => 'getShipping',
        'tax' => 'getTax',
        'discountOrService' => 'getDiscountOrService',
        'grandTotal' => 'getGrandTotal'
    );
  
    
    /**
      * $subTotal sub-total of the invoice
      * @var double
      */
    protected $subTotal;
    
    /**
      * $shipping shipping charges associated with this invoice
      * @var double
      */
    protected $shipping;
    
    /**
      * $tax tax associated with this invoice
      * @var double
      */
    protected $tax;
    
    /**
      * $discountOrService discount or service charges associated with this invoice
      * @var double
      */
    protected $discountOrService;
    
    /**
      * $grandTotal invoice total of sub total, shipping charges, tax and discount/service charges
      * @var double
      */
    protected $grandTotal;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->subTotal = $data["subTotal"];
            $this->shipping = $data["shipping"];
            $this->tax = $data["tax"];
            $this->discountOrService = $data["discountOrService"];
            $this->grandTotal = $data["grandTotal"];
        }
    }
    
    /**
     * Gets subTotal
     * @return double
     */
    public function getSubTotal()
    {
        return $this->subTotal;
    }
  
    /**
     * Sets subTotal
     * @param double $subTotal sub-total of the invoice
     * @return $this
     */
    public function setSubTotal($subTotal)
    {
        
        $this->subTotal = $subTotal;
        return $this;
    }
    
    /**
     * Gets shipping
     * @return double
     */
    public function getShipping()
    {
        return $this->shipping;
    }
  
    /**
     * Sets shipping
     * @param double $shipping shipping charges associated with this invoice
     * @return $this
     */
    public function setShipping($shipping)
    {
        
        $this->shipping = $shipping;
        return $this;
    }
    
    /**
     * Gets tax
     * @return double
     */
    public function getTax()
    {
        return $this->tax;
    }
  
    /**
     * Sets tax
     * @param double $tax tax associated with this invoice
     * @return $this
     */
    public function setTax($tax)
    {
        
        $this->tax = $tax;
        return $this;
    }
    
    /**
     * Gets discountOrService
     * @return double
     */
    public function getDiscountOrService()
    {
        return $this->discountOrService;
    }
  
    /**
     * Sets discountOrService
     * @param double $discountOrService discount or service charges associated with this invoice
     * @return $this
     */
    public function setDiscountOrService($discountOrService)
    {
        
        $this->discountOrService = $discountOrService;
        return $this;
    }
    
    /**
     * Gets grandTotal
     * @return double
     */
    public function getGrandTotal()
    {
        return $this->grandTotal;
    }
  
    /**
     * Sets grandTotal
     * @param double $grandTotal invoice total of sub total, shipping charges, tax and discount/service charges
     * @return $this
     */
    public function setGrandTotal($grandTotal)
    {
        
        $this->grandTotal = $grandTotal;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
