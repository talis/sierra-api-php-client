<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * Invoice Class Doc Comment
 *
 * @category    Class
 * @description an invoice record
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'accountingUnit' => 'int',
        'invDate' => '\DateTime',
        'invNum' => 'string',
        'taxType' => 'string',
        'vendors' => '\Models\Vendor[]',
        'paidDate' => '\DateTime',
        'forCurrency' => '\Models\ForeignCurrency',
        'invTotal' => '\Models\InvoiceTotal',
        'useTax' => '\Models\UseTax',
        'lineItems' => 'string[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'accountingUnit' => 'accountingUnit',
        'invDate' => 'invDate',
        'invNum' => 'invNum',
        'taxType' => 'taxType',
        'vendors' => 'vendors',
        'paidDate' => 'paidDate',
        'forCurrency' => 'forCurrency',
        'invTotal' => 'invTotal',
        'useTax' => 'useTax',
        'lineItems' => 'lineItems'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'accountingUnit' => 'setAccountingUnit',
        'invDate' => 'setInvDate',
        'invNum' => 'setInvNum',
        'taxType' => 'setTaxType',
        'vendors' => 'setVendors',
        'paidDate' => 'setPaidDate',
        'forCurrency' => 'setForCurrency',
        'invTotal' => 'setInvTotal',
        'useTax' => 'setUseTax',
        'lineItems' => 'setLineItems'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'accountingUnit' => 'getAccountingUnit',
        'invDate' => 'getInvDate',
        'invNum' => 'getInvNum',
        'taxType' => 'getTaxType',
        'vendors' => 'getVendors',
        'paidDate' => 'getPaidDate',
        'forCurrency' => 'getForCurrency',
        'invTotal' => 'getInvTotal',
        'useTax' => 'getUseTax',
        'lineItems' => 'getLineItems'
    );
  
    
    /**
      * $id the record ID
      * @var int
      */
    protected $id;
    
    /**
      * $accountingUnit the accounting unit
      * @var int
      */
    protected $accountingUnit;
    
    /**
      * $invDate the invoice date and time as entered by the customer, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
      * @var \DateTime
      */
    protected $invDate;
    
    /**
      * $invNum invoice number as entered by the customer
      * @var string
      */
    protected $invNum;
    
    /**
      * $taxType tax information if your library has enabled the feature to pay invoices using GST or VAT
      * @var string
      */
    protected $taxType;
    
    /**
      * $vendors a list of vendor details for the invoice
      * @var \Models\Vendor[]
      */
    protected $vendors;
    
    /**
      * $paidDate the date and time that the invoice was paid, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
      * @var \DateTime
      */
    protected $paidDate;
    
    /**
      * $forCurrency the invoice's foreign currency code, rate and format
      * @var \Models\ForeignCurrency
      */
    protected $forCurrency;
    
    /**
      * $invTotal the invoice totals
      * @var \Models\InvoiceTotal
      */
    protected $invTotal;
    
    /**
      * $useTax the invoice's use tax percentage rate and fund
      * @var \Models\UseTax
      */
    protected $useTax;
    
    /**
      * $lineItems a list of links to line item ids for the invoice
      * @var string[]
      */
    protected $lineItems;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->accountingUnit = $data["accountingUnit"];
            $this->invDate = $data["invDate"];
            $this->invNum = $data["invNum"];
            $this->taxType = $data["taxType"];
            $this->vendors = $data["vendors"];
            $this->paidDate = $data["paidDate"];
            $this->forCurrency = $data["forCurrency"];
            $this->invTotal = $data["invTotal"];
            $this->useTax = $data["useTax"];
            $this->lineItems = $data["lineItems"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id the record ID
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets accountingUnit
     * @return int
     */
    public function getAccountingUnit()
    {
        return $this->accountingUnit;
    }
  
    /**
     * Sets accountingUnit
     * @param int $accountingUnit the accounting unit
     * @return $this
     */
    public function setAccountingUnit($accountingUnit)
    {
        
        $this->accountingUnit = $accountingUnit;
        return $this;
    }
    
    /**
     * Gets invDate
     * @return \DateTime
     */
    public function getInvDate()
    {
        return $this->invDate;
    }
  
    /**
     * Sets invDate
     * @param \DateTime $invDate the invoice date and time as entered by the customer, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     * @return $this
     */
    public function setInvDate($invDate)
    {
        
        $this->invDate = $invDate;
        return $this;
    }
    
    /**
     * Gets invNum
     * @return string
     */
    public function getInvNum()
    {
        return $this->invNum;
    }
  
    /**
     * Sets invNum
     * @param string $invNum invoice number as entered by the customer
     * @return $this
     */
    public function setInvNum($invNum)
    {
        
        $this->invNum = $invNum;
        return $this;
    }
    
    /**
     * Gets taxType
     * @return string
     */
    public function getTaxType()
    {
        return $this->taxType;
    }
  
    /**
     * Sets taxType
     * @param string $taxType tax information if your library has enabled the feature to pay invoices using GST or VAT
     * @return $this
     */
    public function setTaxType($taxType)
    {
        
        $this->taxType = $taxType;
        return $this;
    }
    
    /**
     * Gets vendors
     * @return \Models\Vendor[]
     */
    public function getVendors()
    {
        return $this->vendors;
    }
  
    /**
     * Sets vendors
     * @param \Models\Vendor[] $vendors a list of vendor details for the invoice
     * @return $this
     */
    public function setVendors($vendors)
    {
        
        $this->vendors = $vendors;
        return $this;
    }
    
    /**
     * Gets paidDate
     * @return \DateTime
     */
    public function getPaidDate()
    {
        return $this->paidDate;
    }
  
    /**
     * Sets paidDate
     * @param \DateTime $paidDate the date and time that the invoice was paid, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     * @return $this
     */
    public function setPaidDate($paidDate)
    {
        
        $this->paidDate = $paidDate;
        return $this;
    }
    
    /**
     * Gets forCurrency
     * @return \Models\ForeignCurrency
     */
    public function getForCurrency()
    {
        return $this->forCurrency;
    }
  
    /**
     * Sets forCurrency
     * @param \Models\ForeignCurrency $forCurrency the invoice's foreign currency code, rate and format
     * @return $this
     */
    public function setForCurrency($forCurrency)
    {
        
        $this->forCurrency = $forCurrency;
        return $this;
    }
    
    /**
     * Gets invTotal
     * @return \Models\InvoiceTotal
     */
    public function getInvTotal()
    {
        return $this->invTotal;
    }
  
    /**
     * Sets invTotal
     * @param \Models\InvoiceTotal $invTotal the invoice totals
     * @return $this
     */
    public function setInvTotal($invTotal)
    {
        
        $this->invTotal = $invTotal;
        return $this;
    }
    
    /**
     * Gets useTax
     * @return \Models\UseTax
     */
    public function getUseTax()
    {
        return $this->useTax;
    }
  
    /**
     * Sets useTax
     * @param \Models\UseTax $useTax the invoice's use tax percentage rate and fund
     * @return $this
     */
    public function setUseTax($useTax)
    {
        
        $this->useTax = $useTax;
        return $this;
    }
    
    /**
     * Gets lineItems
     * @return string[]
     */
    public function getLineItems()
    {
        return $this->lineItems;
    }
  
    /**
     * Sets lineItems
     * @param string[] $lineItems a list of links to line item ids for the invoice
     * @return $this
     */
    public function setLineItems($lineItems)
    {
        
        $this->lineItems = $lineItems;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
