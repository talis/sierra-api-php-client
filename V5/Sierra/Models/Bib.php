<?php
/**
 * Bib
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * Bib Class Doc Comment
 *
 * @category    Class
 * @description a bibliographic record
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Bib implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'updatedDate' => '\DateTime',
        'createdDate' => '\DateTime',
        'deletedDate' => '\DateTime',
        'deleted' => 'bool',
        'suppressed' => 'bool',
        'available' => 'bool',
        'lang' => '\Models\Language',
        'title' => 'string',
        'author' => 'string',
        'materialType' => '\Models\MaterialType',
        'bibLevel' => '\Models\BibLevel',
        'publishYear' => 'int',
        'catalogDate' => '\DateTime',
        'country' => '\Models\Country',
        'orders' => '\Models\OrderInfo[]',
        'normTitle' => 'string',
        'normAuthor' => 'string',
        'locations' => '\Models\Location[]',
        'fixedFields' => '\Models\map',
        'varFields' => '\Models\VarField[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'updatedDate' => 'updatedDate',
        'createdDate' => 'createdDate',
        'deletedDate' => 'deletedDate',
        'deleted' => 'deleted',
        'suppressed' => 'suppressed',
        'available' => 'available',
        'lang' => 'lang',
        'title' => 'title',
        'author' => 'author',
        'materialType' => 'materialType',
        'bibLevel' => 'bibLevel',
        'publishYear' => 'publishYear',
        'catalogDate' => 'catalogDate',
        'country' => 'country',
        'orders' => 'orders',
        'normTitle' => 'normTitle',
        'normAuthor' => 'normAuthor',
        'locations' => 'locations',
        'fixedFields' => 'fixedFields',
        'varFields' => 'varFields'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'updatedDate' => 'setUpdatedDate',
        'createdDate' => 'setCreatedDate',
        'deletedDate' => 'setDeletedDate',
        'deleted' => 'setDeleted',
        'suppressed' => 'setSuppressed',
        'available' => 'setAvailable',
        'lang' => 'setLang',
        'title' => 'setTitle',
        'author' => 'setAuthor',
        'materialType' => 'setMaterialType',
        'bibLevel' => 'setBibLevel',
        'publishYear' => 'setPublishYear',
        'catalogDate' => 'setCatalogDate',
        'country' => 'setCountry',
        'orders' => 'setOrders',
        'normTitle' => 'setNormTitle',
        'normAuthor' => 'setNormAuthor',
        'locations' => 'setLocations',
        'fixedFields' => 'setFixedFields',
        'varFields' => 'setVarFields'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'updatedDate' => 'getUpdatedDate',
        'createdDate' => 'getCreatedDate',
        'deletedDate' => 'getDeletedDate',
        'deleted' => 'getDeleted',
        'suppressed' => 'getSuppressed',
        'available' => 'getAvailable',
        'lang' => 'getLang',
        'title' => 'getTitle',
        'author' => 'getAuthor',
        'materialType' => 'getMaterialType',
        'bibLevel' => 'getBibLevel',
        'publishYear' => 'getPublishYear',
        'catalogDate' => 'getCatalogDate',
        'country' => 'getCountry',
        'orders' => 'getOrders',
        'normTitle' => 'getNormTitle',
        'normAuthor' => 'getNormAuthor',
        'locations' => 'getLocations',
        'fixedFields' => 'getFixedFields',
        'varFields' => 'getVarFields'
    );
  
    
    /**
      * $id the record ID
      * @var string
      */
    protected $id;
    
    /**
      * $updatedDate the date and time of the last update to the record, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
      * @var \DateTime
      */
    protected $updatedDate;
    
    /**
      * $createdDate the date and time the record was created, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
      * @var \DateTime
      */
    protected $createdDate;
    
    /**
      * $deletedDate the date the record was deleted, in ISO 8601 format (yyyy-MM-dd)
      * @var \DateTime
      */
    protected $deletedDate;
    
    /**
      * $deleted whether the record has been deleted
      * @var bool
      */
    protected $deleted;
    
    /**
      * $suppressed whether the record is suppressed from public display
      * @var bool
      */
    protected $suppressed;
    
    /**
      * $available whether the record is available for checkout
      * @var bool
      */
    protected $available;
    
    /**
      * $lang the language of the material (display value)
      * @var \Models\Language
      */
    protected $lang;
    
    /**
      * $title the title from the bib record
      * @var string
      */
    protected $title;
    
    /**
      * $author the most authoritative available representation of the author's name
      * @var string
      */
    protected $author;
    
    /**
      * $materialType the material type, such as book, serial, map, and so forth, based on MARC 21 Leader/06 values, or UNIMARC Label/06 values
      * @var \Models\MaterialType
      */
    protected $materialType;
    
    /**
      * $bibLevel the bibliographic level, based on MARC 21 Leader/07 values or UNIMARC Label/07 values
      * @var \Models\BibLevel
      */
    protected $bibLevel;
    
    /**
      * $publishYear the year of publication
      * @var int
      */
    protected $publishYear;
    
    /**
      * $catalogDate the date the record was added to the catalog, in ISO 8601 format (yyyy-MM-dd)
      * @var \DateTime
      */
    protected $catalogDate;
    
    /**
      * $country the country of publication (display value)
      * @var \Models\Country
      */
    protected $country;
    
    /**
      * $orders the order information for the bib record
      * @var \Models\OrderInfo[]
      */
    protected $orders;
    
    /**
      * $normTitle the normalized form of the most authoritative available version of the title
      * @var string
      */
    protected $normTitle;
    
    /**
      * $normAuthor the normalized form of the most authoritative available representation of the author's name
      * @var string
      */
    protected $normAuthor;
    
    /**
      * $locations the locations associated with the bib
      * @var \Models\Location[]
      */
    protected $locations;
    
    /**
      * $fixedFields the fixed-length fields from the bib record
      * @var \Models\map
      */
    protected $fixedFields;
    
    /**
      * $varFields the variable-length fields from the bib record
      * @var \Models\VarField[]
      */
    protected $varFields;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->updatedDate = $data["updatedDate"];
            $this->createdDate = $data["createdDate"];
            $this->deletedDate = $data["deletedDate"];
            $this->deleted = $data["deleted"];
            $this->suppressed = $data["suppressed"];
            $this->available = $data["available"];
            $this->lang = $data["lang"];
            $this->title = $data["title"];
            $this->author = $data["author"];
            $this->materialType = $data["materialType"];
            $this->bibLevel = $data["bibLevel"];
            $this->publishYear = $data["publishYear"];
            $this->catalogDate = $data["catalogDate"];
            $this->country = $data["country"];
            $this->orders = $data["orders"];
            $this->normTitle = $data["normTitle"];
            $this->normAuthor = $data["normAuthor"];
            $this->locations = $data["locations"];
            $this->fixedFields = $data["fixedFields"];
            $this->varFields = $data["varFields"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id the record ID
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets updatedDate
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
  
    /**
     * Sets updatedDate
     * @param \DateTime $updatedDate the date and time of the last update to the record, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     * @return $this
     */
    public function setUpdatedDate($updatedDate)
    {
        
        $this->updatedDate = $updatedDate;
        return $this;
    }
    
    /**
     * Gets createdDate
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
  
    /**
     * Sets createdDate
     * @param \DateTime $createdDate the date and time the record was created, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        
        $this->createdDate = $createdDate;
        return $this;
    }
    
    /**
     * Gets deletedDate
     * @return \DateTime
     */
    public function getDeletedDate()
    {
        return $this->deletedDate;
    }
  
    /**
     * Sets deletedDate
     * @param \DateTime $deletedDate the date the record was deleted, in ISO 8601 format (yyyy-MM-dd)
     * @return $this
     */
    public function setDeletedDate($deletedDate)
    {
        
        $this->deletedDate = $deletedDate;
        return $this;
    }
    
    /**
     * Gets deleted
     * @return bool
     */
    public function getDeleted()
    {
        return $this->deleted;
    }
  
    /**
     * Sets deleted
     * @param bool $deleted whether the record has been deleted
     * @return $this
     */
    public function setDeleted($deleted)
    {
        
        $this->deleted = $deleted;
        return $this;
    }
    
    /**
     * Gets suppressed
     * @return bool
     */
    public function getSuppressed()
    {
        return $this->suppressed;
    }
  
    /**
     * Sets suppressed
     * @param bool $suppressed whether the record is suppressed from public display
     * @return $this
     */
    public function setSuppressed($suppressed)
    {
        
        $this->suppressed = $suppressed;
        return $this;
    }
    
    /**
     * Gets available
     * @return bool
     */
    public function getAvailable()
    {
        return $this->available;
    }
  
    /**
     * Sets available
     * @param bool $available whether the record is available for checkout
     * @return $this
     */
    public function setAvailable($available)
    {
        
        $this->available = $available;
        return $this;
    }
    
    /**
     * Gets lang
     * @return \Models\Language
     */
    public function getLang()
    {
        return $this->lang;
    }
  
    /**
     * Sets lang
     * @param \Models\Language $lang the language of the material (display value)
     * @return $this
     */
    public function setLang($lang)
    {
        
        $this->lang = $lang;
        return $this;
    }
    
    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
  
    /**
     * Sets title
     * @param string $title the title from the bib record
     * @return $this
     */
    public function setTitle($title)
    {
        
        $this->title = $title;
        return $this;
    }
    
    /**
     * Gets author
     * @return string
     */
    public function getAuthor()
    {
        return $this->author;
    }
  
    /**
     * Sets author
     * @param string $author the most authoritative available representation of the author's name
     * @return $this
     */
    public function setAuthor($author)
    {
        
        $this->author = $author;
        return $this;
    }
    
    /**
     * Gets materialType
     * @return \Models\MaterialType
     */
    public function getMaterialType()
    {
        return $this->materialType;
    }
  
    /**
     * Sets materialType
     * @param \Models\MaterialType $materialType the material type, such as book, serial, map, and so forth, based on MARC 21 Leader/06 values, or UNIMARC Label/06 values
     * @return $this
     */
    public function setMaterialType($materialType)
    {
        
        $this->materialType = $materialType;
        return $this;
    }
    
    /**
     * Gets bibLevel
     * @return \Models\BibLevel
     */
    public function getBibLevel()
    {
        return $this->bibLevel;
    }
  
    /**
     * Sets bibLevel
     * @param \Models\BibLevel $bibLevel the bibliographic level, based on MARC 21 Leader/07 values or UNIMARC Label/07 values
     * @return $this
     */
    public function setBibLevel($bibLevel)
    {
        
        $this->bibLevel = $bibLevel;
        return $this;
    }
    
    /**
     * Gets publishYear
     * @return int
     */
    public function getPublishYear()
    {
        return $this->publishYear;
    }
  
    /**
     * Sets publishYear
     * @param int $publishYear the year of publication
     * @return $this
     */
    public function setPublishYear($publishYear)
    {
        
        $this->publishYear = $publishYear;
        return $this;
    }
    
    /**
     * Gets catalogDate
     * @return \DateTime
     */
    public function getCatalogDate()
    {
        return $this->catalogDate;
    }
  
    /**
     * Sets catalogDate
     * @param \DateTime $catalogDate the date the record was added to the catalog, in ISO 8601 format (yyyy-MM-dd)
     * @return $this
     */
    public function setCatalogDate($catalogDate)
    {
        
        $this->catalogDate = $catalogDate;
        return $this;
    }
    
    /**
     * Gets country
     * @return \Models\Country
     */
    public function getCountry()
    {
        return $this->country;
    }
  
    /**
     * Sets country
     * @param \Models\Country $country the country of publication (display value)
     * @return $this
     */
    public function setCountry($country)
    {
        
        $this->country = $country;
        return $this;
    }
    
    /**
     * Gets orders
     * @return \Models\OrderInfo[]
     */
    public function getOrders()
    {
        return $this->orders;
    }
  
    /**
     * Sets orders
     * @param \Models\OrderInfo[] $orders the order information for the bib record
     * @return $this
     */
    public function setOrders($orders)
    {
        
        $this->orders = $orders;
        return $this;
    }
    
    /**
     * Gets normTitle
     * @return string
     */
    public function getNormTitle()
    {
        return $this->normTitle;
    }
  
    /**
     * Sets normTitle
     * @param string $normTitle the normalized form of the most authoritative available version of the title
     * @return $this
     */
    public function setNormTitle($normTitle)
    {
        
        $this->normTitle = $normTitle;
        return $this;
    }
    
    /**
     * Gets normAuthor
     * @return string
     */
    public function getNormAuthor()
    {
        return $this->normAuthor;
    }
  
    /**
     * Sets normAuthor
     * @param string $normAuthor the normalized form of the most authoritative available representation of the author's name
     * @return $this
     */
    public function setNormAuthor($normAuthor)
    {
        
        $this->normAuthor = $normAuthor;
        return $this;
    }
    
    /**
     * Gets locations
     * @return \Models\Location[]
     */
    public function getLocations()
    {
        return $this->locations;
    }
  
    /**
     * Sets locations
     * @param \Models\Location[] $locations the locations associated with the bib
     * @return $this
     */
    public function setLocations($locations)
    {
        
        $this->locations = $locations;
        return $this;
    }
    
    /**
     * Gets fixedFields
     * @return \Models\map
     */
    public function getFixedFields()
    {
        return $this->fixedFields;
    }
  
    /**
     * Sets fixedFields
     * @param \Models\map $fixedFields the fixed-length fields from the bib record
     * @return $this
     */
    public function setFixedFields($fixedFields)
    {
        
        $this->fixedFields = $fixedFields;
        return $this;
    }
    
    /**
     * Gets varFields
     * @return \Models\VarField[]
     */
    public function getVarFields()
    {
        return $this->varFields;
    }
  
    /**
     * Sets varFields
     * @param \Models\VarField[] $varFields the variable-length fields from the bib record
     * @return $this
     */
    public function setVarFields($varFields)
    {
        
        $this->varFields = $varFields;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
