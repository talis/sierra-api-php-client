<?php
/**
 * Branch
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V5
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * Branch Class Doc Comment
 *
 * @category    Class
 * @description branch information
 * @package     III\Sierra\V5
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Branch implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'address' => 'string',
        'emailSource' => 'string',
        'emailReplyTo' => 'string',
        'latitude' => 'double',
        'longitude' => 'double'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'address' => 'address',
        'emailSource' => 'emailSource',
        'emailReplyTo' => 'emailReplyTo',
        'latitude' => 'latitude',
        'longitude' => 'longitude'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'address' => 'setAddress',
        'emailSource' => 'setEmailSource',
        'emailReplyTo' => 'setEmailReplyTo',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'address' => 'getAddress',
        'emailSource' => 'getEmailSource',
        'emailReplyTo' => 'getEmailReplyTo',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude'
    );
  
    
    /**
      * $id an ID corresponding to the branch
      * @var int
      */
    protected $id;
    
    /**
      * $name the branch name
      * @var string
      */
    protected $name;
    
    /**
      * $address the branch address
      * @var string
      */
    protected $address;
    
    /**
      * $emailSource the \"From\" address in the header of an emailed overdue notice
      * @var string
      */
    protected $emailSource;
    
    /**
      * $emailReplyTo the \"Reply To\" address in the header of an emailed overdue notice
      * @var string
      */
    protected $emailReplyTo;
    
    /**
      * $latitude the latitude of the branch address for geocoding
      * @var double
      */
    protected $latitude;
    
    /**
      * $longitude the longitude of the branch address for geocoding
      * @var double
      */
    protected $longitude;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->name = $data["name"];
            $this->address = $data["address"];
            $this->emailSource = $data["emailSource"];
            $this->emailReplyTo = $data["emailReplyTo"];
            $this->latitude = $data["latitude"];
            $this->longitude = $data["longitude"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id an ID corresponding to the branch
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name the branch name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets address
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }
  
    /**
     * Sets address
     * @param string $address the branch address
     * @return $this
     */
    public function setAddress($address)
    {
        
        $this->address = $address;
        return $this;
    }
    
    /**
     * Gets emailSource
     * @return string
     */
    public function getEmailSource()
    {
        return $this->emailSource;
    }
  
    /**
     * Sets emailSource
     * @param string $emailSource the \"From\" address in the header of an emailed overdue notice
     * @return $this
     */
    public function setEmailSource($emailSource)
    {
        
        $this->emailSource = $emailSource;
        return $this;
    }
    
    /**
     * Gets emailReplyTo
     * @return string
     */
    public function getEmailReplyTo()
    {
        return $this->emailReplyTo;
    }
  
    /**
     * Sets emailReplyTo
     * @param string $emailReplyTo the \"Reply To\" address in the header of an emailed overdue notice
     * @return $this
     */
    public function setEmailReplyTo($emailReplyTo)
    {
        
        $this->emailReplyTo = $emailReplyTo;
        return $this;
    }
    
    /**
     * Gets latitude
     * @return double
     */
    public function getLatitude()
    {
        return $this->latitude;
    }
  
    /**
     * Sets latitude
     * @param double $latitude the latitude of the branch address for geocoding
     * @return $this
     */
    public function setLatitude($latitude)
    {
        
        $this->latitude = $latitude;
        return $this;
    }
    
    /**
     * Gets longitude
     * @return double
     */
    public function getLongitude()
    {
        return $this->longitude;
    }
  
    /**
     * Sets longitude
     * @param double $longitude the longitude of the branch address for geocoding
     * @return $this
     */
    public function setLongitude($longitude)
    {
        
        $this->longitude = $longitude;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
