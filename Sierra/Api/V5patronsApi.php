<?php
/**
 * V5patronsApi
 * PHP version 5
 *
 * @category Class
 * @package  Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sierra\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Sierra\ApiException;
use Sierra\Configuration;
use Sierra\HeaderSelector;
use Sierra\ObjectSerializer;

/**
 * V5patronsApi Class Doc Comment
 *
 * @category Class
 * @package  Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V5patronsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelAllHoldsForTheSpecifiedPatron
     *
     * Cancel all holds for the specified patron
     *
     * @param  int $id the patron record ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\ErrorCode
     */
    public function cancelAllHoldsForTheSpecifiedPatron($id, $accept_language = null)
    {
        list($response) = $this->cancelAllHoldsForTheSpecifiedPatronWithHttpInfo($id, $accept_language);
        return $response;
    }

    /**
     * Operation cancelAllHoldsForTheSpecifiedPatronWithHttpInfo
     *
     * Cancel all holds for the specified patron
     *
     * @param  int $id the patron record ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelAllHoldsForTheSpecifiedPatronWithHttpInfo($id, $accept_language = null)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->cancelAllHoldsForTheSpecifiedPatronRequest($id, $accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelAllHoldsForTheSpecifiedPatronAsync
     *
     * Cancel all holds for the specified patron
     *
     * @param  int $id the patron record ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAllHoldsForTheSpecifiedPatronAsync($id, $accept_language = null)
    {
        return $this->cancelAllHoldsForTheSpecifiedPatronAsyncWithHttpInfo($id, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelAllHoldsForTheSpecifiedPatronAsyncWithHttpInfo
     *
     * Cancel all holds for the specified patron
     *
     * @param  int $id the patron record ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAllHoldsForTheSpecifiedPatronAsyncWithHttpInfo($id, $accept_language = null)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->cancelAllHoldsForTheSpecifiedPatronRequest($id, $accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelAllHoldsForTheSpecifiedPatron'
     *
     * @param  int $id the patron record ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelAllHoldsForTheSpecifiedPatronRequest($id, $accept_language = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelAllHoldsForTheSpecifiedPatron'
            );
        }

        $resourcePath = '/v5/patrons/{id}/holds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAPatronRecord
     *
     * Create a patron record
     *
     * @param  \Sierra\Models\PatronPatch $body post request (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\PatronResult
     */
    public function createAPatronRecord($body)
    {
        list($response) = $this->createAPatronRecordWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAPatronRecordWithHttpInfo
     *
     * Create a patron record
     *
     * @param  \Sierra\Models\PatronPatch $body post request (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\PatronResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAPatronRecordWithHttpInfo($body)
    {
        $returnType = '\Sierra\Models\PatronResult';
        $request = $this->createAPatronRecordRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\PatronResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAPatronRecordAsync
     *
     * Create a patron record
     *
     * @param  \Sierra\Models\PatronPatch $body post request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAPatronRecordAsync($body)
    {
        return $this->createAPatronRecordAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAPatronRecordAsyncWithHttpInfo
     *
     * Create a patron record
     *
     * @param  \Sierra\Models\PatronPatch $body post request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAPatronRecordAsyncWithHttpInfo($body)
    {
        $returnType = '\Sierra\Models\PatronResult';
        $request = $this->createAPatronRecordRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAPatronRecord'
     *
     * @param  \Sierra\Models\PatronPatch $body post request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAPatronRecordRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAPatronRecord'
            );
        }

        $resourcePath = '/v5/patrons/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAHoldByHoldID
     *
     * Delete a hold by hold ID
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\ErrorCode
     */
    public function deleteAHoldByHoldID($hold_id, $accept_language = null)
    {
        list($response) = $this->deleteAHoldByHoldIDWithHttpInfo($hold_id, $accept_language);
        return $response;
    }

    /**
     * Operation deleteAHoldByHoldIDWithHttpInfo
     *
     * Delete a hold by hold ID
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAHoldByHoldIDWithHttpInfo($hold_id, $accept_language = null)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->deleteAHoldByHoldIDRequest($hold_id, $accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAHoldByHoldIDAsync
     *
     * Delete a hold by hold ID
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAHoldByHoldIDAsync($hold_id, $accept_language = null)
    {
        return $this->deleteAHoldByHoldIDAsyncWithHttpInfo($hold_id, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAHoldByHoldIDAsyncWithHttpInfo
     *
     * Delete a hold by hold ID
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAHoldByHoldIDAsyncWithHttpInfo($hold_id, $accept_language = null)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->deleteAHoldByHoldIDRequest($hold_id, $accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAHoldByHoldID'
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAHoldByHoldIDRequest($hold_id, $accept_language = null)
    {
        // verify the required parameter 'hold_id' is set
        if ($hold_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hold_id when calling deleteAHoldByHoldID'
            );
        }

        $resourcePath = '/v5/patrons/holds/{holdId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($hold_id !== null) {
            $resourcePath = str_replace(
                '{' . 'holdId' . '}',
                ObjectSerializer::toPathValue($hold_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAPatronRecord
     *
     * Delete a patron record
     *
     * @param  int $id the patron record ID (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\ErrorCode
     */
    public function deleteAPatronRecord($id)
    {
        list($response) = $this->deleteAPatronRecordWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteAPatronRecordWithHttpInfo
     *
     * Delete a patron record
     *
     * @param  int $id the patron record ID (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAPatronRecordWithHttpInfo($id)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->deleteAPatronRecordRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAPatronRecordAsync
     *
     * Delete a patron record
     *
     * @param  int $id the patron record ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAPatronRecordAsync($id)
    {
        return $this->deleteAPatronRecordAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAPatronRecordAsyncWithHttpInfo
     *
     * Delete a patron record
     *
     * @param  int $id the patron record ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAPatronRecordAsyncWithHttpInfo($id)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->deleteAPatronRecordRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAPatronRecord'
     *
     * @param  int $id the patron record ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAPatronRecordRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAPatronRecord'
            );
        }

        $resourcePath = '/v5/patrons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filterTheRecordsByAQueryInJSONFormat
     *
     * Filter the records by a query in JSON format
     *
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param  int $limit the maximum number of results (required)
     * @param   $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\QueryResultSet
     */
    public function filterTheRecordsByAQueryInJSONFormat($offset, $limit, $json)
    {
        list($response) = $this->filterTheRecordsByAQueryInJSONFormatWithHttpInfo($offset, $limit, $json);
        return $response;
    }

    /**
     * Operation filterTheRecordsByAQueryInJSONFormatWithHttpInfo
     *
     * Filter the records by a query in JSON format
     *
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param  int $limit the maximum number of results (required)
     * @param   $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\QueryResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function filterTheRecordsByAQueryInJSONFormatWithHttpInfo($offset, $limit, $json)
    {
        $returnType = '\Sierra\Models\QueryResultSet';
        $request = $this->filterTheRecordsByAQueryInJSONFormatRequest($offset, $limit, $json);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\QueryResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filterTheRecordsByAQueryInJSONFormatAsync
     *
     * Filter the records by a query in JSON format
     *
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param  int $limit the maximum number of results (required)
     * @param   $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filterTheRecordsByAQueryInJSONFormatAsync($offset, $limit, $json)
    {
        return $this->filterTheRecordsByAQueryInJSONFormatAsyncWithHttpInfo($offset, $limit, $json)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filterTheRecordsByAQueryInJSONFormatAsyncWithHttpInfo
     *
     * Filter the records by a query in JSON format
     *
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param  int $limit the maximum number of results (required)
     * @param   $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filterTheRecordsByAQueryInJSONFormatAsyncWithHttpInfo($offset, $limit, $json)
    {
        $returnType = '\Sierra\Models\QueryResultSet';
        $request = $this->filterTheRecordsByAQueryInJSONFormatRequest($offset, $limit, $json);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filterTheRecordsByAQueryInJSONFormat'
     *
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param  int $limit the maximum number of results (required)
     * @param   $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function filterTheRecordsByAQueryInJSONFormatRequest($offset, $limit, $json)
    {
        // verify the required parameter 'offset' is set
        if ($offset === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling filterTheRecordsByAQueryInJSONFormat'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling filterTheRecordsByAQueryInJSONFormat'
            );
        }
        // verify the required parameter 'json' is set
        if ($json === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $json when calling filterTheRecordsByAQueryInJSONFormat'
            );
        }

        $resourcePath = '/v5/patrons/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;
        if (isset($json)) {
            $_tempBody = $json;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAPatronByVarFieldFieldTagAndVarFieldContent
     *
     * Find a patron by varField fieldTag and varField content
     *
     * @param  string $var_field_tag the varField fieldTag to search by (required)
     * @param  string $var_field_content the varField content to search by (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\Patron
     */
    public function findAPatronByVarFieldFieldTagAndVarFieldContent($var_field_tag, $var_field_content, $fields = null)
    {
        list($response) = $this->findAPatronByVarFieldFieldTagAndVarFieldContentWithHttpInfo($var_field_tag, $var_field_content, $fields);
        return $response;
    }

    /**
     * Operation findAPatronByVarFieldFieldTagAndVarFieldContentWithHttpInfo
     *
     * Find a patron by varField fieldTag and varField content
     *
     * @param  string $var_field_tag the varField fieldTag to search by (required)
     * @param  string $var_field_content the varField content to search by (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\Patron, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAPatronByVarFieldFieldTagAndVarFieldContentWithHttpInfo($var_field_tag, $var_field_content, $fields = null)
    {
        $returnType = '\Sierra\Models\Patron';
        $request = $this->findAPatronByVarFieldFieldTagAndVarFieldContentRequest($var_field_tag, $var_field_content, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\Patron',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findAPatronByVarFieldFieldTagAndVarFieldContentAsync
     *
     * Find a patron by varField fieldTag and varField content
     *
     * @param  string $var_field_tag the varField fieldTag to search by (required)
     * @param  string $var_field_content the varField content to search by (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAPatronByVarFieldFieldTagAndVarFieldContentAsync($var_field_tag, $var_field_content, $fields = null)
    {
        return $this->findAPatronByVarFieldFieldTagAndVarFieldContentAsyncWithHttpInfo($var_field_tag, $var_field_content, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAPatronByVarFieldFieldTagAndVarFieldContentAsyncWithHttpInfo
     *
     * Find a patron by varField fieldTag and varField content
     *
     * @param  string $var_field_tag the varField fieldTag to search by (required)
     * @param  string $var_field_content the varField content to search by (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAPatronByVarFieldFieldTagAndVarFieldContentAsyncWithHttpInfo($var_field_tag, $var_field_content, $fields = null)
    {
        $returnType = '\Sierra\Models\Patron';
        $request = $this->findAPatronByVarFieldFieldTagAndVarFieldContentRequest($var_field_tag, $var_field_content, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAPatronByVarFieldFieldTagAndVarFieldContent'
     *
     * @param  string $var_field_tag the varField fieldTag to search by (required)
     * @param  string $var_field_content the varField content to search by (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findAPatronByVarFieldFieldTagAndVarFieldContentRequest($var_field_tag, $var_field_content, $fields = null)
    {
        // verify the required parameter 'var_field_tag' is set
        if ($var_field_tag === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var_field_tag when calling findAPatronByVarFieldFieldTagAndVarFieldContent'
            );
        }
        // verify the required parameter 'var_field_content' is set
        if ($var_field_content === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var_field_content when calling findAPatronByVarFieldFieldTagAndVarFieldContent'
            );
        }

        $resourcePath = '/v5/patrons/find';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($var_field_tag !== null) {
            $queryParams['varFieldTag'] = ObjectSerializer::toQueryValue($var_field_tag);
        }
        // query params
        if ($var_field_content !== null) {
            $queryParams['varFieldContent'] = ObjectSerializer::toQueryValue($var_field_content);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getACheckoutByCheckoutID
     *
     * Get a checkout by checkout ID
     *
     * @param  int $checkout_id the checkout record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\Checkout
     */
    public function getACheckoutByCheckoutID($checkout_id, $fields = null)
    {
        list($response) = $this->getACheckoutByCheckoutIDWithHttpInfo($checkout_id, $fields);
        return $response;
    }

    /**
     * Operation getACheckoutByCheckoutIDWithHttpInfo
     *
     * Get a checkout by checkout ID
     *
     * @param  int $checkout_id the checkout record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\Checkout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getACheckoutByCheckoutIDWithHttpInfo($checkout_id, $fields = null)
    {
        $returnType = '\Sierra\Models\Checkout';
        $request = $this->getACheckoutByCheckoutIDRequest($checkout_id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\Checkout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getACheckoutByCheckoutIDAsync
     *
     * Get a checkout by checkout ID
     *
     * @param  int $checkout_id the checkout record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getACheckoutByCheckoutIDAsync($checkout_id, $fields = null)
    {
        return $this->getACheckoutByCheckoutIDAsyncWithHttpInfo($checkout_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getACheckoutByCheckoutIDAsyncWithHttpInfo
     *
     * Get a checkout by checkout ID
     *
     * @param  int $checkout_id the checkout record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getACheckoutByCheckoutIDAsyncWithHttpInfo($checkout_id, $fields = null)
    {
        $returnType = '\Sierra\Models\Checkout';
        $request = $this->getACheckoutByCheckoutIDRequest($checkout_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getACheckoutByCheckoutID'
     *
     * @param  int $checkout_id the checkout record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getACheckoutByCheckoutIDRequest($checkout_id, $fields = null)
    {
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling getACheckoutByCheckoutID'
            );
        }

        $resourcePath = '/v5/patrons/checkouts/{checkoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAFineRecordByFineID
     *
     * Get a fine record by fine ID
     *
     * @param  int $fine_id the fine record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\Fine
     */
    public function getAFineRecordByFineID($fine_id, $fields = null)
    {
        list($response) = $this->getAFineRecordByFineIDWithHttpInfo($fine_id, $fields);
        return $response;
    }

    /**
     * Operation getAFineRecordByFineIDWithHttpInfo
     *
     * Get a fine record by fine ID
     *
     * @param  int $fine_id the fine record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\Fine, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAFineRecordByFineIDWithHttpInfo($fine_id, $fields = null)
    {
        $returnType = '\Sierra\Models\Fine';
        $request = $this->getAFineRecordByFineIDRequest($fine_id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\Fine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAFineRecordByFineIDAsync
     *
     * Get a fine record by fine ID
     *
     * @param  int $fine_id the fine record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAFineRecordByFineIDAsync($fine_id, $fields = null)
    {
        return $this->getAFineRecordByFineIDAsyncWithHttpInfo($fine_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAFineRecordByFineIDAsyncWithHttpInfo
     *
     * Get a fine record by fine ID
     *
     * @param  int $fine_id the fine record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAFineRecordByFineIDAsyncWithHttpInfo($fine_id, $fields = null)
    {
        $returnType = '\Sierra\Models\Fine';
        $request = $this->getAFineRecordByFineIDRequest($fine_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAFineRecordByFineID'
     *
     * @param  int $fine_id the fine record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAFineRecordByFineIDRequest($fine_id, $fields = null)
    {
        // verify the required parameter 'fine_id' is set
        if ($fine_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fine_id when calling getAFineRecordByFineID'
            );
        }

        $resourcePath = '/v5/patrons/fines/{fineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($fine_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fineId' . '}',
                ObjectSerializer::toPathValue($fine_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAHoldRecordByHoldID
     *
     * Get a hold record by hold ID
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\Hold
     */
    public function getAHoldRecordByHoldID($hold_id, $fields = null)
    {
        list($response) = $this->getAHoldRecordByHoldIDWithHttpInfo($hold_id, $fields);
        return $response;
    }

    /**
     * Operation getAHoldRecordByHoldIDWithHttpInfo
     *
     * Get a hold record by hold ID
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\Hold, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAHoldRecordByHoldIDWithHttpInfo($hold_id, $fields = null)
    {
        $returnType = '\Sierra\Models\Hold';
        $request = $this->getAHoldRecordByHoldIDRequest($hold_id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\Hold',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAHoldRecordByHoldIDAsync
     *
     * Get a hold record by hold ID
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAHoldRecordByHoldIDAsync($hold_id, $fields = null)
    {
        return $this->getAHoldRecordByHoldIDAsyncWithHttpInfo($hold_id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAHoldRecordByHoldIDAsyncWithHttpInfo
     *
     * Get a hold record by hold ID
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAHoldRecordByHoldIDAsyncWithHttpInfo($hold_id, $fields = null)
    {
        $returnType = '\Sierra\Models\Hold';
        $request = $this->getAHoldRecordByHoldIDRequest($hold_id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAHoldRecordByHoldID'
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAHoldRecordByHoldIDRequest($hold_id, $fields = null)
    {
        // verify the required parameter 'hold_id' is set
        if ($hold_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hold_id when calling getAHoldRecordByHoldID'
            );
        }

        $resourcePath = '/v5/patrons/holds/{holdId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($hold_id !== null) {
            $resourcePath = str_replace(
                '{' . 'holdId' . '}',
                ObjectSerializer::toPathValue($hold_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAListOfMetadata
     *
     * Get a list of metadata
     *
     * @param  string $fields list of comma separated metadata fields (optional)
     * @param  string $language an ISO 639-1 language code (default is en) (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\Metadata[]
     */
    public function getAListOfMetadata($fields = null, $language = null)
    {
        list($response) = $this->getAListOfMetadataWithHttpInfo($fields, $language);
        return $response;
    }

    /**
     * Operation getAListOfMetadataWithHttpInfo
     *
     * Get a list of metadata
     *
     * @param  string $fields list of comma separated metadata fields (optional)
     * @param  string $language an ISO 639-1 language code (default is en) (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\Metadata[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAListOfMetadataWithHttpInfo($fields = null, $language = null)
    {
        $returnType = '\Sierra\Models\Metadata[]';
        $request = $this->getAListOfMetadataRequest($fields, $language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\Metadata[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAListOfMetadataAsync
     *
     * Get a list of metadata
     *
     * @param  string $fields list of comma separated metadata fields (optional)
     * @param  string $language an ISO 639-1 language code (default is en) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfMetadataAsync($fields = null, $language = null)
    {
        return $this->getAListOfMetadataAsyncWithHttpInfo($fields, $language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAListOfMetadataAsyncWithHttpInfo
     *
     * Get a list of metadata
     *
     * @param  string $fields list of comma separated metadata fields (optional)
     * @param  string $language an ISO 639-1 language code (default is en) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfMetadataAsyncWithHttpInfo($fields = null, $language = null)
    {
        $returnType = '\Sierra\Models\Metadata[]';
        $request = $this->getAListOfMetadataRequest($fields, $language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAListOfMetadata'
     *
     * @param  string $fields list of comma separated metadata fields (optional)
     * @param  string $language an ISO 639-1 language code (default is en) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAListOfMetadataRequest($fields = null, $language = null)
    {

        $resourcePath = '/v5/patrons/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAListOfPatrons
     *
     * Get a list of patrons
     *
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $created_date the creation date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $updated_date the modification date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $deleted_date the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param  bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param  bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     * @param  int[] $agency_codes patron data for the specified and valid agencies is returned (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\PatronResultSet
     */
    public function getAListOfPatrons($limit = null, $offset = null, $id = null, $fields = null, $created_date = null, $updated_date = null, $deleted_date = null, $deleted = null, $suppressed = null, $agency_codes = null)
    {
        list($response) = $this->getAListOfPatronsWithHttpInfo($limit, $offset, $id, $fields, $created_date, $updated_date, $deleted_date, $deleted, $suppressed, $agency_codes);
        return $response;
    }

    /**
     * Operation getAListOfPatronsWithHttpInfo
     *
     * Get a list of patrons
     *
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $created_date the creation date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $updated_date the modification date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $deleted_date the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param  bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param  bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     * @param  int[] $agency_codes patron data for the specified and valid agencies is returned (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\PatronResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAListOfPatronsWithHttpInfo($limit = null, $offset = null, $id = null, $fields = null, $created_date = null, $updated_date = null, $deleted_date = null, $deleted = null, $suppressed = null, $agency_codes = null)
    {
        $returnType = '\Sierra\Models\PatronResultSet';
        $request = $this->getAListOfPatronsRequest($limit, $offset, $id, $fields, $created_date, $updated_date, $deleted_date, $deleted, $suppressed, $agency_codes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\PatronResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAListOfPatronsAsync
     *
     * Get a list of patrons
     *
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $created_date the creation date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $updated_date the modification date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $deleted_date the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param  bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param  bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     * @param  int[] $agency_codes patron data for the specified and valid agencies is returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfPatronsAsync($limit = null, $offset = null, $id = null, $fields = null, $created_date = null, $updated_date = null, $deleted_date = null, $deleted = null, $suppressed = null, $agency_codes = null)
    {
        return $this->getAListOfPatronsAsyncWithHttpInfo($limit, $offset, $id, $fields, $created_date, $updated_date, $deleted_date, $deleted, $suppressed, $agency_codes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAListOfPatronsAsyncWithHttpInfo
     *
     * Get a list of patrons
     *
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $created_date the creation date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $updated_date the modification date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $deleted_date the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param  bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param  bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     * @param  int[] $agency_codes patron data for the specified and valid agencies is returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfPatronsAsyncWithHttpInfo($limit = null, $offset = null, $id = null, $fields = null, $created_date = null, $updated_date = null, $deleted_date = null, $deleted = null, $suppressed = null, $agency_codes = null)
    {
        $returnType = '\Sierra\Models\PatronResultSet';
        $request = $this->getAListOfPatronsRequest($limit, $offset, $id, $fields, $created_date, $updated_date, $deleted_date, $deleted, $suppressed, $agency_codes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAListOfPatrons'
     *
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $created_date the creation date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $updated_date the modification date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $deleted_date the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param  bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param  bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     * @param  int[] $agency_codes patron data for the specified and valid agencies is returned (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAListOfPatronsRequest($limit = null, $offset = null, $id = null, $fields = null, $created_date = null, $updated_date = null, $deleted_date = null, $deleted = null, $suppressed = null, $agency_codes = null)
    {

        $resourcePath = '/v5/patrons/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, 'csv', true);
        }
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($created_date !== null) {
            $queryParams['createdDate'] = ObjectSerializer::toQueryValue($created_date);
        }
        // query params
        if ($updated_date !== null) {
            $queryParams['updatedDate'] = ObjectSerializer::toQueryValue($updated_date);
        }
        // query params
        if ($deleted_date !== null) {
            $queryParams['deletedDate'] = ObjectSerializer::toQueryValue($deleted_date);
        }
        // query params
        if ($deleted !== null) {
            $queryParams['deleted'] = ObjectSerializer::toQueryValue($deleted);
        }
        // query params
        if ($suppressed !== null) {
            $queryParams['suppressed'] = ObjectSerializer::toQueryValue($suppressed);
        }
        // query params
        if (is_array($agency_codes)) {
            $agency_codes = ObjectSerializer::serializeCollection($agency_codes, 'csv', true);
        }
        if ($agency_codes !== null) {
            $queryParams['agencyCodes'] = ObjectSerializer::toQueryValue($agency_codes);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAPatronByRecordID
     *
     * Get a patron by record ID
     *
     * @param  int $id the patron record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\Patron
     */
    public function getAPatronByRecordID($id, $fields = null)
    {
        list($response) = $this->getAPatronByRecordIDWithHttpInfo($id, $fields);
        return $response;
    }

    /**
     * Operation getAPatronByRecordIDWithHttpInfo
     *
     * Get a patron by record ID
     *
     * @param  int $id the patron record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\Patron, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAPatronByRecordIDWithHttpInfo($id, $fields = null)
    {
        $returnType = '\Sierra\Models\Patron';
        $request = $this->getAPatronByRecordIDRequest($id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\Patron',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAPatronByRecordIDAsync
     *
     * Get a patron by record ID
     *
     * @param  int $id the patron record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAPatronByRecordIDAsync($id, $fields = null)
    {
        return $this->getAPatronByRecordIDAsyncWithHttpInfo($id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAPatronByRecordIDAsyncWithHttpInfo
     *
     * Get a patron by record ID
     *
     * @param  int $id the patron record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAPatronByRecordIDAsyncWithHttpInfo($id, $fields = null)
    {
        $returnType = '\Sierra\Models\Patron';
        $request = $this->getAPatronByRecordIDRequest($id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAPatronByRecordID'
     *
     * @param  int $id the patron record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAPatronByRecordIDRequest($id, $fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAPatronByRecordID'
            );
        }

        $resourcePath = '/v5/patrons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckoutDataForASinglePatronRecord
     *
     * Get checkout data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\CheckoutResultSet
     */
    public function getCheckoutDataForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null)
    {
        list($response) = $this->getCheckoutDataForASinglePatronRecordWithHttpInfo($id, $limit, $offset, $fields);
        return $response;
    }

    /**
     * Operation getCheckoutDataForASinglePatronRecordWithHttpInfo
     *
     * Get checkout data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\CheckoutResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckoutDataForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        $returnType = '\Sierra\Models\CheckoutResultSet';
        $request = $this->getCheckoutDataForASinglePatronRecordRequest($id, $limit, $offset, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\CheckoutResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckoutDataForASinglePatronRecordAsync
     *
     * Get checkout data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckoutDataForASinglePatronRecordAsync($id, $limit = null, $offset = null, $fields = null)
    {
        return $this->getCheckoutDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit, $offset, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckoutDataForASinglePatronRecordAsyncWithHttpInfo
     *
     * Get checkout data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckoutDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        $returnType = '\Sierra\Models\CheckoutResultSet';
        $request = $this->getCheckoutDataForASinglePatronRecordRequest($id, $limit, $offset, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckoutDataForASinglePatronRecord'
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCheckoutDataForASinglePatronRecordRequest($id, $limit = null, $offset = null, $fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCheckoutDataForASinglePatronRecord'
            );
        }

        $resourcePath = '/v5/patrons/{id}/checkouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckoutreadHistoryForASinglePatronRecord
     *
     * Get checkout/read history for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  string $sort_field a field to sort on (optional)
     * @param  string $sort_order the order to sort by desc or asc (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\CheckoutHistoryResultSet
     */
    public function getCheckoutreadHistoryForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null, $sort_field = null, $sort_order = null)
    {
        list($response) = $this->getCheckoutreadHistoryForASinglePatronRecordWithHttpInfo($id, $limit, $offset, $fields, $sort_field, $sort_order);
        return $response;
    }

    /**
     * Operation getCheckoutreadHistoryForASinglePatronRecordWithHttpInfo
     *
     * Get checkout/read history for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  string $sort_field a field to sort on (optional)
     * @param  string $sort_order the order to sort by desc or asc (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\CheckoutHistoryResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckoutreadHistoryForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null, $sort_field = null, $sort_order = null)
    {
        $returnType = '\Sierra\Models\CheckoutHistoryResultSet';
        $request = $this->getCheckoutreadHistoryForASinglePatronRecordRequest($id, $limit, $offset, $fields, $sort_field, $sort_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\CheckoutHistoryResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckoutreadHistoryForASinglePatronRecordAsync
     *
     * Get checkout/read history for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  string $sort_field a field to sort on (optional)
     * @param  string $sort_order the order to sort by desc or asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckoutreadHistoryForASinglePatronRecordAsync($id, $limit = null, $offset = null, $fields = null, $sort_field = null, $sort_order = null)
    {
        return $this->getCheckoutreadHistoryForASinglePatronRecordAsyncWithHttpInfo($id, $limit, $offset, $fields, $sort_field, $sort_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckoutreadHistoryForASinglePatronRecordAsyncWithHttpInfo
     *
     * Get checkout/read history for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  string $sort_field a field to sort on (optional)
     * @param  string $sort_order the order to sort by desc or asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckoutreadHistoryForASinglePatronRecordAsyncWithHttpInfo($id, $limit = null, $offset = null, $fields = null, $sort_field = null, $sort_order = null)
    {
        $returnType = '\Sierra\Models\CheckoutHistoryResultSet';
        $request = $this->getCheckoutreadHistoryForASinglePatronRecordRequest($id, $limit, $offset, $fields, $sort_field, $sort_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckoutreadHistoryForASinglePatronRecord'
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  string $sort_field a field to sort on (optional)
     * @param  string $sort_order the order to sort by desc or asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCheckoutreadHistoryForASinglePatronRecordRequest($id, $limit = null, $offset = null, $fields = null, $sort_field = null, $sort_order = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCheckoutreadHistoryForASinglePatronRecord'
            );
        }

        $resourcePath = '/v5/patrons/{id}/checkouts/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($sort_field !== null) {
            $queryParams['sortField'] = ObjectSerializer::toQueryValue($sort_field);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTheFinesDataForASinglePatronRecord
     *
     * Get the fines data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $assessed_date the assessed date of fines to retrieve (can be a range) (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\FineResultSet
     */
    public function getTheFinesDataForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null, $assessed_date = null)
    {
        list($response) = $this->getTheFinesDataForASinglePatronRecordWithHttpInfo($id, $limit, $offset, $fields, $assessed_date);
        return $response;
    }

    /**
     * Operation getTheFinesDataForASinglePatronRecordWithHttpInfo
     *
     * Get the fines data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $assessed_date the assessed date of fines to retrieve (can be a range) (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\FineResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTheFinesDataForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null, $assessed_date = null)
    {
        $returnType = '\Sierra\Models\FineResultSet';
        $request = $this->getTheFinesDataForASinglePatronRecordRequest($id, $limit, $offset, $fields, $assessed_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\FineResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTheFinesDataForASinglePatronRecordAsync
     *
     * Get the fines data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $assessed_date the assessed date of fines to retrieve (can be a range) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTheFinesDataForASinglePatronRecordAsync($id, $limit = null, $offset = null, $fields = null, $assessed_date = null)
    {
        return $this->getTheFinesDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit, $offset, $fields, $assessed_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTheFinesDataForASinglePatronRecordAsyncWithHttpInfo
     *
     * Get the fines data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $assessed_date the assessed date of fines to retrieve (can be a range) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTheFinesDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit = null, $offset = null, $fields = null, $assessed_date = null)
    {
        $returnType = '\Sierra\Models\FineResultSet';
        $request = $this->getTheFinesDataForASinglePatronRecordRequest($id, $limit, $offset, $fields, $assessed_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTheFinesDataForASinglePatronRecord'
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $assessed_date the assessed date of fines to retrieve (can be a range) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTheFinesDataForASinglePatronRecordRequest($id, $limit = null, $offset = null, $fields = null, $assessed_date = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTheFinesDataForASinglePatronRecord'
            );
        }

        $resourcePath = '/v5/patrons/{id}/fines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($assessed_date !== null) {
            $queryParams['assessedDate'] = ObjectSerializer::toQueryValue($assessed_date);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTheHoldsDataForASinglePatronRecord
     *
     * Get the holds data for a single patron record
     *
     * @param  string $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\HoldResultSet
     */
    public function getTheHoldsDataForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null)
    {
        list($response) = $this->getTheHoldsDataForASinglePatronRecordWithHttpInfo($id, $limit, $offset, $fields);
        return $response;
    }

    /**
     * Operation getTheHoldsDataForASinglePatronRecordWithHttpInfo
     *
     * Get the holds data for a single patron record
     *
     * @param  string $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\HoldResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTheHoldsDataForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        $returnType = '\Sierra\Models\HoldResultSet';
        $request = $this->getTheHoldsDataForASinglePatronRecordRequest($id, $limit, $offset, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\HoldResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTheHoldsDataForASinglePatronRecordAsync
     *
     * Get the holds data for a single patron record
     *
     * @param  string $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTheHoldsDataForASinglePatronRecordAsync($id, $limit = null, $offset = null, $fields = null)
    {
        return $this->getTheHoldsDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit, $offset, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTheHoldsDataForASinglePatronRecordAsyncWithHttpInfo
     *
     * Get the holds data for a single patron record
     *
     * @param  string $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTheHoldsDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        $returnType = '\Sierra\Models\HoldResultSet';
        $request = $this->getTheHoldsDataForASinglePatronRecordRequest($id, $limit, $offset, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTheHoldsDataForASinglePatronRecord'
     *
     * @param  string $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTheHoldsDataForASinglePatronRecordRequest($id, $limit = null, $offset = null, $fields = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTheHoldsDataForASinglePatronRecord'
            );
        }

        $resourcePath = '/v5/patrons/{id}/holds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyAHold
     *
     * Modify a hold
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  \Sierra\Models\PatronHoldPut $body the details of the hold (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\ErrorCode
     */
    public function modifyAHold($hold_id, $body, $accept_language = null)
    {
        list($response) = $this->modifyAHoldWithHttpInfo($hold_id, $body, $accept_language);
        return $response;
    }

    /**
     * Operation modifyAHoldWithHttpInfo
     *
     * Modify a hold
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  \Sierra\Models\PatronHoldPut $body the details of the hold (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyAHoldWithHttpInfo($hold_id, $body, $accept_language = null)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->modifyAHoldRequest($hold_id, $body, $accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modifyAHoldAsync
     *
     * Modify a hold
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  \Sierra\Models\PatronHoldPut $body the details of the hold (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyAHoldAsync($hold_id, $body, $accept_language = null)
    {
        return $this->modifyAHoldAsyncWithHttpInfo($hold_id, $body, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyAHoldAsyncWithHttpInfo
     *
     * Modify a hold
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  \Sierra\Models\PatronHoldPut $body the details of the hold (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyAHoldAsyncWithHttpInfo($hold_id, $body, $accept_language = null)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->modifyAHoldRequest($hold_id, $body, $accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyAHold'
     *
     * @param  int $hold_id the hold record ID (required)
     * @param  \Sierra\Models\PatronHoldPut $body the details of the hold (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modifyAHoldRequest($hold_id, $body, $accept_language = null)
    {
        // verify the required parameter 'hold_id' is set
        if ($hold_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hold_id when calling modifyAHold'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyAHold'
            );
        }

        $resourcePath = '/v5/patrons/holds/{holdId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($hold_id !== null) {
            $resourcePath = str_replace(
                '{' . 'holdId' . '}',
                ObjectSerializer::toPathValue($hold_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation placeANewHoldRequest
     *
     * Place a new hold request
     *
     * @param  int $id the patron record ID (required)
     * @param  \Sierra\Models\PatronHoldPost $body details of the new hold (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\ErrorCode
     */
    public function placeANewHoldRequest($id, $body)
    {
        list($response) = $this->placeANewHoldRequestWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation placeANewHoldRequestWithHttpInfo
     *
     * Place a new hold request
     *
     * @param  int $id the patron record ID (required)
     * @param  \Sierra\Models\PatronHoldPost $body details of the new hold (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function placeANewHoldRequestWithHttpInfo($id, $body)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->placeANewHoldRequestRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation placeANewHoldRequestAsync
     *
     * Place a new hold request
     *
     * @param  int $id the patron record ID (required)
     * @param  \Sierra\Models\PatronHoldPost $body details of the new hold (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function placeANewHoldRequestAsync($id, $body)
    {
        return $this->placeANewHoldRequestAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation placeANewHoldRequestAsyncWithHttpInfo
     *
     * Place a new hold request
     *
     * @param  int $id the patron record ID (required)
     * @param  \Sierra\Models\PatronHoldPost $body details of the new hold (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function placeANewHoldRequestAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->placeANewHoldRequestRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'placeANewHoldRequest'
     *
     * @param  int $id the patron record ID (required)
     * @param  \Sierra\Models\PatronHoldPost $body details of the new hold (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function placeANewHoldRequestRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling placeANewHoldRequest'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling placeANewHoldRequest'
            );
        }

        $resourcePath = '/v5/patrons/{id}/holds/requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestToRenewACheckout
     *
     * Request to renew a checkout
     *
     * @param  int $checkout_id the checkout ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\Checkout
     */
    public function requestToRenewACheckout($checkout_id, $accept_language = null)
    {
        list($response) = $this->requestToRenewACheckoutWithHttpInfo($checkout_id, $accept_language);
        return $response;
    }

    /**
     * Operation requestToRenewACheckoutWithHttpInfo
     *
     * Request to renew a checkout
     *
     * @param  int $checkout_id the checkout ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\Checkout, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestToRenewACheckoutWithHttpInfo($checkout_id, $accept_language = null)
    {
        $returnType = '\Sierra\Models\Checkout';
        $request = $this->requestToRenewACheckoutRequest($checkout_id, $accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\Checkout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestToRenewACheckoutAsync
     *
     * Request to renew a checkout
     *
     * @param  int $checkout_id the checkout ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestToRenewACheckoutAsync($checkout_id, $accept_language = null)
    {
        return $this->requestToRenewACheckoutAsyncWithHttpInfo($checkout_id, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestToRenewACheckoutAsyncWithHttpInfo
     *
     * Request to renew a checkout
     *
     * @param  int $checkout_id the checkout ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestToRenewACheckoutAsyncWithHttpInfo($checkout_id, $accept_language = null)
    {
        $returnType = '\Sierra\Models\Checkout';
        $request = $this->requestToRenewACheckoutRequest($checkout_id, $accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestToRenewACheckout'
     *
     * @param  int $checkout_id the checkout ID (required)
     * @param  string $accept_language the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestToRenewACheckoutRequest($checkout_id, $accept_language = null)
    {
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling requestToRenewACheckout'
            );
        }

        $resourcePath = '/v5/patrons/checkouts/{checkoutId}/renewal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateThePatronRecord
     *
     * Update the Patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  \Sierra\Models\PatronPatch $body patron request (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\ErrorCode
     */
    public function updateThePatronRecord($id, $body)
    {
        list($response) = $this->updateThePatronRecordWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateThePatronRecordWithHttpInfo
     *
     * Update the Patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  \Sierra\Models\PatronPatch $body patron request (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateThePatronRecordWithHttpInfo($id, $body)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->updateThePatronRecordRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateThePatronRecordAsync
     *
     * Update the Patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  \Sierra\Models\PatronPatch $body patron request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThePatronRecordAsync($id, $body)
    {
        return $this->updateThePatronRecordAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateThePatronRecordAsyncWithHttpInfo
     *
     * Update the Patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  \Sierra\Models\PatronPatch $body patron request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThePatronRecordAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->updateThePatronRecordRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateThePatronRecord'
     *
     * @param  int $id the patron record ID (required)
     * @param  \Sierra\Models\PatronPatch $body patron request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateThePatronRecordRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateThePatronRecord'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateThePatronRecord'
            );
        }

        $resourcePath = '/v5/patrons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validatePatronByBarcodeAndPIN
     *
     * Validate patron by barcode and PIN
     *
     * @param  \Sierra\Models\PatronValidation $body post request (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\ErrorCode
     */
    public function validatePatronByBarcodeAndPIN($body)
    {
        list($response) = $this->validatePatronByBarcodeAndPINWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation validatePatronByBarcodeAndPINWithHttpInfo
     *
     * Validate patron by barcode and PIN
     *
     * @param  \Sierra\Models\PatronValidation $body post request (required)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function validatePatronByBarcodeAndPINWithHttpInfo($body)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->validatePatronByBarcodeAndPINRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validatePatronByBarcodeAndPINAsync
     *
     * Validate patron by barcode and PIN
     *
     * @param  \Sierra\Models\PatronValidation $body post request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validatePatronByBarcodeAndPINAsync($body)
    {
        return $this->validatePatronByBarcodeAndPINAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validatePatronByBarcodeAndPINAsyncWithHttpInfo
     *
     * Validate patron by barcode and PIN
     *
     * @param  \Sierra\Models\PatronValidation $body post request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validatePatronByBarcodeAndPINAsyncWithHttpInfo($body)
    {
        $returnType = '\Sierra\Models\ErrorCode';
        $request = $this->validatePatronByBarcodeAndPINRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validatePatronByBarcodeAndPIN'
     *
     * @param  \Sierra\Models\PatronValidation $body post request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validatePatronByBarcodeAndPINRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling validatePatronByBarcodeAndPIN'
            );
        }

        $resourcePath = '/v5/patrons/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
