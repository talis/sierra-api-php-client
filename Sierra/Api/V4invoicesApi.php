<?php
/**
 * V4invoicesApi
 * PHP version 5
 *
 * @category Class
 * @package  Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sierra\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Sierra\ApiException;
use Sierra\Configuration;
use Sierra\HeaderSelector;
use Sierra\ObjectSerializer;

/**
 * V4invoicesApi Class Doc Comment
 *
 * @category Class
 * @package  Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V4invoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getALineItemRecordByLineID
     *
     * Get a line item record by line ID
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $id the invoice line ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\InvoiceLine
     */
    public function getALineItemRecordByLineID($login, $id, $fields = null)
    {
        list($response) = $this->getALineItemRecordByLineIDWithHttpInfo($login, $id, $fields);
        return $response;
    }

    /**
     * Operation getALineItemRecordByLineIDWithHttpInfo
     *
     * Get a line item record by line ID
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $id the invoice line ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\InvoiceLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function getALineItemRecordByLineIDWithHttpInfo($login, $id, $fields = null)
    {
        $returnType = '\Sierra\Models\InvoiceLine';
        $request = $this->getALineItemRecordByLineIDRequest($login, $id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\InvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getALineItemRecordByLineIDAsync
     *
     * Get a line item record by line ID
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $id the invoice line ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getALineItemRecordByLineIDAsync($login, $id, $fields = null)
    {
        return $this->getALineItemRecordByLineIDAsyncWithHttpInfo($login, $id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getALineItemRecordByLineIDAsyncWithHttpInfo
     *
     * Get a line item record by line ID
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $id the invoice line ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getALineItemRecordByLineIDAsyncWithHttpInfo($login, $id, $fields = null)
    {
        $returnType = '\Sierra\Models\InvoiceLine';
        $request = $this->getALineItemRecordByLineIDRequest($login, $id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getALineItemRecordByLineID'
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $id the invoice line ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getALineItemRecordByLineIDRequest($login, $id, $fields = null)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login when calling getALineItemRecordByLineID'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getALineItemRecordByLineID'
            );
        }

        $resourcePath = '/v4/invoices/lineItems/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($login !== null) {
            $queryParams['login'] = ObjectSerializer::toQueryValue($login);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAListOfInvoices
     *
     * Get a list of invoices
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of invoices to retrieve (optional)
     * @param  string $inv_num a comma-delimited list of invoice numbers (can include a single wildcard &#39;*&#39; to represent one or more final characters, for example, mult* or mul*) (optional)
     * @param  string[] $status_code the status value of invoice record to retrieve (optional)
     * @param  string[] $fields if none provided, data for all fields are returned; otherwise only specified fields are returned (optional)
     * @param  \DateTime $invoice_date the date of invoice records (can be a range) (optional)
     * @param  \DateTime $created_date the creation date of invoice records to retrieve (can be a range) (optional)
     * @param  \DateTime $updated_date the modification date of invoice records to retrieve (can be a range) (optional)
     * @param  bool $suppressed the suppressed flag value of invoice records to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\InvoiceResultSet
     */
    public function getAListOfInvoices($login, $limit = null, $offset = null, $id = null, $inv_num = null, $status_code = null, $fields = null, $invoice_date = null, $created_date = null, $updated_date = null, $suppressed = null)
    {
        list($response) = $this->getAListOfInvoicesWithHttpInfo($login, $limit, $offset, $id, $inv_num, $status_code, $fields, $invoice_date, $created_date, $updated_date, $suppressed);
        return $response;
    }

    /**
     * Operation getAListOfInvoicesWithHttpInfo
     *
     * Get a list of invoices
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of invoices to retrieve (optional)
     * @param  string $inv_num a comma-delimited list of invoice numbers (can include a single wildcard &#39;*&#39; to represent one or more final characters, for example, mult* or mul*) (optional)
     * @param  string[] $status_code the status value of invoice record to retrieve (optional)
     * @param  string[] $fields if none provided, data for all fields are returned; otherwise only specified fields are returned (optional)
     * @param  \DateTime $invoice_date the date of invoice records (can be a range) (optional)
     * @param  \DateTime $created_date the creation date of invoice records to retrieve (can be a range) (optional)
     * @param  \DateTime $updated_date the modification date of invoice records to retrieve (can be a range) (optional)
     * @param  bool $suppressed the suppressed flag value of invoice records to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\InvoiceResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAListOfInvoicesWithHttpInfo($login, $limit = null, $offset = null, $id = null, $inv_num = null, $status_code = null, $fields = null, $invoice_date = null, $created_date = null, $updated_date = null, $suppressed = null)
    {
        $returnType = '\Sierra\Models\InvoiceResultSet';
        $request = $this->getAListOfInvoicesRequest($login, $limit, $offset, $id, $inv_num, $status_code, $fields, $invoice_date, $created_date, $updated_date, $suppressed);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\InvoiceResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAListOfInvoicesAsync
     *
     * Get a list of invoices
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of invoices to retrieve (optional)
     * @param  string $inv_num a comma-delimited list of invoice numbers (can include a single wildcard &#39;*&#39; to represent one or more final characters, for example, mult* or mul*) (optional)
     * @param  string[] $status_code the status value of invoice record to retrieve (optional)
     * @param  string[] $fields if none provided, data for all fields are returned; otherwise only specified fields are returned (optional)
     * @param  \DateTime $invoice_date the date of invoice records (can be a range) (optional)
     * @param  \DateTime $created_date the creation date of invoice records to retrieve (can be a range) (optional)
     * @param  \DateTime $updated_date the modification date of invoice records to retrieve (can be a range) (optional)
     * @param  bool $suppressed the suppressed flag value of invoice records to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfInvoicesAsync($login, $limit = null, $offset = null, $id = null, $inv_num = null, $status_code = null, $fields = null, $invoice_date = null, $created_date = null, $updated_date = null, $suppressed = null)
    {
        return $this->getAListOfInvoicesAsyncWithHttpInfo($login, $limit, $offset, $id, $inv_num, $status_code, $fields, $invoice_date, $created_date, $updated_date, $suppressed)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAListOfInvoicesAsyncWithHttpInfo
     *
     * Get a list of invoices
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of invoices to retrieve (optional)
     * @param  string $inv_num a comma-delimited list of invoice numbers (can include a single wildcard &#39;*&#39; to represent one or more final characters, for example, mult* or mul*) (optional)
     * @param  string[] $status_code the status value of invoice record to retrieve (optional)
     * @param  string[] $fields if none provided, data for all fields are returned; otherwise only specified fields are returned (optional)
     * @param  \DateTime $invoice_date the date of invoice records (can be a range) (optional)
     * @param  \DateTime $created_date the creation date of invoice records to retrieve (can be a range) (optional)
     * @param  \DateTime $updated_date the modification date of invoice records to retrieve (can be a range) (optional)
     * @param  bool $suppressed the suppressed flag value of invoice records to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfInvoicesAsyncWithHttpInfo($login, $limit = null, $offset = null, $id = null, $inv_num = null, $status_code = null, $fields = null, $invoice_date = null, $created_date = null, $updated_date = null, $suppressed = null)
    {
        $returnType = '\Sierra\Models\InvoiceResultSet';
        $request = $this->getAListOfInvoicesRequest($login, $limit, $offset, $id, $inv_num, $status_code, $fields, $invoice_date, $created_date, $updated_date, $suppressed);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAListOfInvoices'
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of invoices to retrieve (optional)
     * @param  string $inv_num a comma-delimited list of invoice numbers (can include a single wildcard &#39;*&#39; to represent one or more final characters, for example, mult* or mul*) (optional)
     * @param  string[] $status_code the status value of invoice record to retrieve (optional)
     * @param  string[] $fields if none provided, data for all fields are returned; otherwise only specified fields are returned (optional)
     * @param  \DateTime $invoice_date the date of invoice records (can be a range) (optional)
     * @param  \DateTime $created_date the creation date of invoice records to retrieve (can be a range) (optional)
     * @param  \DateTime $updated_date the modification date of invoice records to retrieve (can be a range) (optional)
     * @param  bool $suppressed the suppressed flag value of invoice records to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAListOfInvoicesRequest($login, $limit = null, $offset = null, $id = null, $inv_num = null, $status_code = null, $fields = null, $invoice_date = null, $created_date = null, $updated_date = null, $suppressed = null)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login when calling getAListOfInvoices'
            );
        }

        $resourcePath = '/v4/invoices/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($login !== null) {
            $queryParams['login'] = ObjectSerializer::toQueryValue($login);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, 'csv', true);
        }
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if ($inv_num !== null) {
            $queryParams['invNum'] = ObjectSerializer::toQueryValue($inv_num);
        }
        // query params
        if (is_array($status_code)) {
            $status_code = ObjectSerializer::serializeCollection($status_code, 'csv', true);
        }
        if ($status_code !== null) {
            $queryParams['statusCode'] = ObjectSerializer::toQueryValue($status_code);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($invoice_date !== null) {
            $queryParams['invoiceDate'] = ObjectSerializer::toQueryValue($invoice_date);
        }
        // query params
        if ($created_date !== null) {
            $queryParams['createdDate'] = ObjectSerializer::toQueryValue($created_date);
        }
        // query params
        if ($updated_date !== null) {
            $queryParams['updatedDate'] = ObjectSerializer::toQueryValue($updated_date);
        }
        // query params
        if ($suppressed !== null) {
            $queryParams['suppressed'] = ObjectSerializer::toQueryValue($suppressed);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTheLineItemDataForASingleInvoiceRecord
     *
     * Get the line item data for a single invoice record
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $id the invoice record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Sierra\Models\InvoiceLineResultSet
     */
    public function getTheLineItemDataForASingleInvoiceRecord($login, $id, $fields = null)
    {
        list($response) = $this->getTheLineItemDataForASingleInvoiceRecordWithHttpInfo($login, $id, $fields);
        return $response;
    }

    /**
     * Operation getTheLineItemDataForASingleInvoiceRecordWithHttpInfo
     *
     * Get the line item data for a single invoice record
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $id the invoice record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \Sierra\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Sierra\Models\InvoiceLineResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTheLineItemDataForASingleInvoiceRecordWithHttpInfo($login, $id, $fields = null)
    {
        $returnType = '\Sierra\Models\InvoiceLineResultSet';
        $request = $this->getTheLineItemDataForASingleInvoiceRecordRequest($login, $id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Sierra\Models\InvoiceLineResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTheLineItemDataForASingleInvoiceRecordAsync
     *
     * Get the line item data for a single invoice record
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $id the invoice record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTheLineItemDataForASingleInvoiceRecordAsync($login, $id, $fields = null)
    {
        return $this->getTheLineItemDataForASingleInvoiceRecordAsyncWithHttpInfo($login, $id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTheLineItemDataForASingleInvoiceRecordAsyncWithHttpInfo
     *
     * Get the line item data for a single invoice record
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $id the invoice record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTheLineItemDataForASingleInvoiceRecordAsyncWithHttpInfo($login, $id, $fields = null)
    {
        $returnType = '\Sierra\Models\InvoiceLineResultSet';
        $request = $this->getTheLineItemDataForASingleInvoiceRecordRequest($login, $id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTheLineItemDataForASingleInvoiceRecord'
     *
     * @param  string $login Sierra login to verify user&#39;s credentials (whether the user is allowed to read invoice data) (required)
     * @param  int $id the invoice record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTheLineItemDataForASingleInvoiceRecordRequest($login, $id, $fields = null)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login when calling getTheLineItemDataForASingleInvoiceRecord'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTheLineItemDataForASingleInvoiceRecord'
            );
        }

        $resourcePath = '/v4/invoices/{id}/lineItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($login !== null) {
            $queryParams['login'] = ObjectSerializer::toQueryValue($login);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
