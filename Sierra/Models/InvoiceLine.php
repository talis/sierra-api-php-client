<?php
/**
 * InvoiceLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\Models;

use \ArrayAccess;
use \III\Sierra\ObjectSerializer;

/**
 * InvoiceLine Class Doc Comment
 *
 * @category Class
 * @description an invoice line item record
 * @package  III\Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'invoice' => 'string',
        'order' => 'string',
        'paidAmount' => 'double',
        'lienAmount' => 'double',
        'lienFlag' => 'int',
        'listPrice' => 'double',
        'fund' => 'string',
        'subFund' => 'int',
        'noOfCopies' => 'int',
        'externalFund' => 'int',
        'orderStatus' => 'string',
        'useTax' => 'bool',
        'lineItemNote' => 'string',
        'title' => 'string',
        'multiFlag' => 'string',
        'vendor' => 'string',
        'subStartingDate' => '\DateTime',
        'subEndingDate' => '\DateTime',
        'tax' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'invoice' => null,
        'order' => null,
        'paidAmount' => 'double',
        'lienAmount' => 'double',
        'lienFlag' => 'int32',
        'listPrice' => 'double',
        'fund' => null,
        'subFund' => 'int32',
        'noOfCopies' => 'int32',
        'externalFund' => 'int32',
        'orderStatus' => null,
        'useTax' => null,
        'lineItemNote' => null,
        'title' => null,
        'multiFlag' => null,
        'vendor' => null,
        'subStartingDate' => 'date-time',
        'subEndingDate' => 'date-time',
        'tax' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'invoice' => 'invoice',
        'order' => 'order',
        'paidAmount' => 'paidAmount',
        'lienAmount' => 'lienAmount',
        'lienFlag' => 'lienFlag',
        'listPrice' => 'listPrice',
        'fund' => 'fund',
        'subFund' => 'subFund',
        'noOfCopies' => 'noOfCopies',
        'externalFund' => 'externalFund',
        'orderStatus' => 'orderStatus',
        'useTax' => 'useTax',
        'lineItemNote' => 'lineItemNote',
        'title' => 'title',
        'multiFlag' => 'multiFlag',
        'vendor' => 'vendor',
        'subStartingDate' => 'subStartingDate',
        'subEndingDate' => 'subEndingDate',
        'tax' => 'tax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'invoice' => 'setInvoice',
        'order' => 'setOrder',
        'paidAmount' => 'setPaidAmount',
        'lienAmount' => 'setLienAmount',
        'lienFlag' => 'setLienFlag',
        'listPrice' => 'setListPrice',
        'fund' => 'setFund',
        'subFund' => 'setSubFund',
        'noOfCopies' => 'setNoOfCopies',
        'externalFund' => 'setExternalFund',
        'orderStatus' => 'setOrderStatus',
        'useTax' => 'setUseTax',
        'lineItemNote' => 'setLineItemNote',
        'title' => 'setTitle',
        'multiFlag' => 'setMultiFlag',
        'vendor' => 'setVendor',
        'subStartingDate' => 'setSubStartingDate',
        'subEndingDate' => 'setSubEndingDate',
        'tax' => 'setTax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'invoice' => 'getInvoice',
        'order' => 'getOrder',
        'paidAmount' => 'getPaidAmount',
        'lienAmount' => 'getLienAmount',
        'lienFlag' => 'getLienFlag',
        'listPrice' => 'getListPrice',
        'fund' => 'getFund',
        'subFund' => 'getSubFund',
        'noOfCopies' => 'getNoOfCopies',
        'externalFund' => 'getExternalFund',
        'orderStatus' => 'getOrderStatus',
        'useTax' => 'getUseTax',
        'lineItemNote' => 'getLineItemNote',
        'title' => 'getTitle',
        'multiFlag' => 'getMultiFlag',
        'vendor' => 'getVendor',
        'subStartingDate' => 'getSubStartingDate',
        'subEndingDate' => 'getSubEndingDate',
        'tax' => 'getTax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice'] = isset($data['invoice']) ? $data['invoice'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['paidAmount'] = isset($data['paidAmount']) ? $data['paidAmount'] : null;
        $this->container['lienAmount'] = isset($data['lienAmount']) ? $data['lienAmount'] : null;
        $this->container['lienFlag'] = isset($data['lienFlag']) ? $data['lienFlag'] : null;
        $this->container['listPrice'] = isset($data['listPrice']) ? $data['listPrice'] : null;
        $this->container['fund'] = isset($data['fund']) ? $data['fund'] : null;
        $this->container['subFund'] = isset($data['subFund']) ? $data['subFund'] : null;
        $this->container['noOfCopies'] = isset($data['noOfCopies']) ? $data['noOfCopies'] : null;
        $this->container['externalFund'] = isset($data['externalFund']) ? $data['externalFund'] : null;
        $this->container['orderStatus'] = isset($data['orderStatus']) ? $data['orderStatus'] : null;
        $this->container['useTax'] = isset($data['useTax']) ? $data['useTax'] : null;
        $this->container['lineItemNote'] = isset($data['lineItemNote']) ? $data['lineItemNote'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['multiFlag'] = isset($data['multiFlag']) ? $data['multiFlag'] : null;
        $this->container['vendor'] = isset($data['vendor']) ? $data['vendor'] : null;
        $this->container['subStartingDate'] = isset($data['subStartingDate']) ? $data['subStartingDate'] : null;
        $this->container['subEndingDate'] = isset($data['subEndingDate']) ? $data['subEndingDate'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['invoice'] === null) {
            $invalidProperties[] = "'invoice' can't be null";
        }
        if ($this->container['multiFlag'] === null) {
            $invalidProperties[] = "'multiFlag' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['invoice'] === null) {
            return false;
        }
        if ($this->container['multiFlag'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id system generated line number
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice
     *
     * @return string
     */
    public function getInvoice()
    {
        return $this->container['invoice'];
    }

    /**
     * Sets invoice
     *
     * @param string $invoice link to invoice ID
     *
     * @return $this
     */
    public function setInvoice($invoice)
    {
        $this->container['invoice'] = $invoice;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order link to order ID associated with this line item
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets paidAmount
     *
     * @return double
     */
    public function getPaidAmount()
    {
        return $this->container['paidAmount'];
    }

    /**
     * Sets paidAmount
     *
     * @param double $paidAmount paid amount, entered by user
     *
     * @return $this
     */
    public function setPaidAmount($paidAmount)
    {
        $this->container['paidAmount'] = $paidAmount;

        return $this;
    }

    /**
     * Gets lienAmount
     *
     * @return double
     */
    public function getLienAmount()
    {
        return $this->container['lienAmount'];
    }

    /**
     * Sets lienAmount
     *
     * @param double $lienAmount lien amount
     *
     * @return $this
     */
    public function setLienAmount($lienAmount)
    {
        $this->container['lienAmount'] = $lienAmount;

        return $this;
    }

    /**
     * Gets lienFlag
     *
     * @return int
     */
    public function getLienFlag()
    {
        return $this->container['lienFlag'];
    }

    /**
     * Sets lienFlag
     *
     * @param int $lienFlag lien flag
     *
     * @return $this
     */
    public function setLienFlag($lienFlag)
    {
        $this->container['lienFlag'] = $lienFlag;

        return $this;
    }

    /**
     * Gets listPrice
     *
     * @return double
     */
    public function getListPrice()
    {
        return $this->container['listPrice'];
    }

    /**
     * Sets listPrice
     *
     * @param double $listPrice list price
     *
     * @return $this
     */
    public function setListPrice($listPrice)
    {
        $this->container['listPrice'] = $listPrice;

        return $this;
    }

    /**
     * Gets fund
     *
     * @return string
     */
    public function getFund()
    {
        return $this->container['fund'];
    }

    /**
     * Sets fund
     *
     * @param string $fund internal fund code
     *
     * @return $this
     */
    public function setFund($fund)
    {
        $this->container['fund'] = $fund;

        return $this;
    }

    /**
     * Gets subFund
     *
     * @return int
     */
    public function getSubFund()
    {
        return $this->container['subFund'];
    }

    /**
     * Sets subFund
     *
     * @param int $subFund sub-fund associated with an internal fund code (max 7 per fund)
     *
     * @return $this
     */
    public function setSubFund($subFund)
    {
        $this->container['subFund'] = $subFund;

        return $this;
    }

    /**
     * Gets noOfCopies
     *
     * @return int
     */
    public function getNoOfCopies()
    {
        return $this->container['noOfCopies'];
    }

    /**
     * Sets noOfCopies
     *
     * @param int $noOfCopies number of copies of the material contained in this line item
     *
     * @return $this
     */
    public function setNoOfCopies($noOfCopies)
    {
        $this->container['noOfCopies'] = $noOfCopies;

        return $this;
    }

    /**
     * Gets externalFund
     *
     * @return int
     */
    public function getExternalFund()
    {
        return $this->container['externalFund'];
    }

    /**
     * Sets externalFund
     *
     * @param int $externalFund external fund code
     *
     * @return $this
     */
    public function setExternalFund($externalFund)
    {
        $this->container['externalFund'] = $externalFund;

        return $this;
    }

    /**
     * Gets orderStatus
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['orderStatus'];
    }

    /**
     * Sets orderStatus
     *
     * @param string $orderStatus status of this line item
     *
     * @return $this
     */
    public function setOrderStatus($orderStatus)
    {
        $this->container['orderStatus'] = $orderStatus;

        return $this;
    }

    /**
     * Gets useTax
     *
     * @return bool
     */
    public function getUseTax()
    {
        return $this->container['useTax'];
    }

    /**
     * Sets useTax
     *
     * @param bool $useTax whether use tax is used for this line item
     *
     * @return $this
     */
    public function setUseTax($useTax)
    {
        $this->container['useTax'] = $useTax;

        return $this;
    }

    /**
     * Gets lineItemNote
     *
     * @return string
     */
    public function getLineItemNote()
    {
        return $this->container['lineItemNote'];
    }

    /**
     * Sets lineItemNote
     *
     * @param string $lineItemNote note associated with this line item, entered by user
     *
     * @return $this
     */
    public function setLineItemNote($lineItemNote)
    {
        $this->container['lineItemNote'] = $lineItemNote;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title of material, supplied by system
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets multiFlag
     *
     * @return string
     */
    public function getMultiFlag()
    {
        return $this->container['multiFlag'];
    }

    /**
     * Sets multiFlag
     *
     * @param string $multiFlag multi-fund group code
     *
     * @return $this
     */
    public function setMultiFlag($multiFlag)
    {
        $this->container['multiFlag'] = $multiFlag;

        return $this;
    }

    /**
     * Gets vendor
     *
     * @return string
     */
    public function getVendor()
    {
        return $this->container['vendor'];
    }

    /**
     * Sets vendor
     *
     * @param string $vendor 5-char vendor code
     *
     * @return $this
     */
    public function setVendor($vendor)
    {
        $this->container['vendor'] = $vendor;

        return $this;
    }

    /**
     * Gets subStartingDate
     *
     * @return \DateTime
     */
    public function getSubStartingDate()
    {
        return $this->container['subStartingDate'];
    }

    /**
     * Sets subStartingDate
     *
     * @param \DateTime $subStartingDate subscription starting date, entered by user
     *
     * @return $this
     */
    public function setSubStartingDate($subStartingDate)
    {
        $this->container['subStartingDate'] = $subStartingDate;

        return $this;
    }

    /**
     * Gets subEndingDate
     *
     * @return \DateTime
     */
    public function getSubEndingDate()
    {
        return $this->container['subEndingDate'];
    }

    /**
     * Sets subEndingDate
     *
     * @param \DateTime $subEndingDate subscription end date, entered by user
     *
     * @return $this
     */
    public function setSubEndingDate($subEndingDate)
    {
        $this->container['subEndingDate'] = $subEndingDate;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double $tax amount of tax for the line item, system generated
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


