<?php
/**
 * Bib
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\Models;

use \ArrayAccess;
use \III\Sierra\ObjectSerializer;

/**
 * Bib Class Doc Comment
 *
 * @category Class
 * @description a bibliographic record
 * @package  III\Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Bib implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Bib';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'updatedDate' => '\DateTime',
        'createdDate' => '\DateTime',
        'deletedDate' => '\DateTime',
        'deleted' => 'bool',
        'suppressed' => 'bool',
        'available' => 'bool',
        'lang' => '\III\Sierra\Models\Language',
        'title' => 'string',
        'author' => 'string',
        'materialType' => '\III\Sierra\Models\MaterialType',
        'bibLevel' => '\III\Sierra\Models\BibLevel',
        'publishYear' => 'int',
        'catalogDate' => '\DateTime',
        'country' => '\III\Sierra\Models\Country',
        'orders' => '\III\Sierra\Models\OrderInfo[]',
        'normTitle' => 'string',
        'normAuthor' => 'string',
        'locations' => '\III\Sierra\Models\Location[]',
        'fixedFields' => '\III\Sierra\Models\map',
        'varFields' => '\III\Sierra\Models\VarField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'updatedDate' => 'date-time',
        'createdDate' => 'date-time',
        'deletedDate' => 'date',
        'deleted' => null,
        'suppressed' => null,
        'available' => null,
        'lang' => null,
        'title' => null,
        'author' => null,
        'materialType' => null,
        'bibLevel' => null,
        'publishYear' => 'int32',
        'catalogDate' => 'date',
        'country' => null,
        'orders' => null,
        'normTitle' => null,
        'normAuthor' => null,
        'locations' => null,
        'fixedFields' => null,
        'varFields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'updatedDate' => 'updatedDate',
        'createdDate' => 'createdDate',
        'deletedDate' => 'deletedDate',
        'deleted' => 'deleted',
        'suppressed' => 'suppressed',
        'available' => 'available',
        'lang' => 'lang',
        'title' => 'title',
        'author' => 'author',
        'materialType' => 'materialType',
        'bibLevel' => 'bibLevel',
        'publishYear' => 'publishYear',
        'catalogDate' => 'catalogDate',
        'country' => 'country',
        'orders' => 'orders',
        'normTitle' => 'normTitle',
        'normAuthor' => 'normAuthor',
        'locations' => 'locations',
        'fixedFields' => 'fixedFields',
        'varFields' => 'varFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'updatedDate' => 'setUpdatedDate',
        'createdDate' => 'setCreatedDate',
        'deletedDate' => 'setDeletedDate',
        'deleted' => 'setDeleted',
        'suppressed' => 'setSuppressed',
        'available' => 'setAvailable',
        'lang' => 'setLang',
        'title' => 'setTitle',
        'author' => 'setAuthor',
        'materialType' => 'setMaterialType',
        'bibLevel' => 'setBibLevel',
        'publishYear' => 'setPublishYear',
        'catalogDate' => 'setCatalogDate',
        'country' => 'setCountry',
        'orders' => 'setOrders',
        'normTitle' => 'setNormTitle',
        'normAuthor' => 'setNormAuthor',
        'locations' => 'setLocations',
        'fixedFields' => 'setFixedFields',
        'varFields' => 'setVarFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'updatedDate' => 'getUpdatedDate',
        'createdDate' => 'getCreatedDate',
        'deletedDate' => 'getDeletedDate',
        'deleted' => 'getDeleted',
        'suppressed' => 'getSuppressed',
        'available' => 'getAvailable',
        'lang' => 'getLang',
        'title' => 'getTitle',
        'author' => 'getAuthor',
        'materialType' => 'getMaterialType',
        'bibLevel' => 'getBibLevel',
        'publishYear' => 'getPublishYear',
        'catalogDate' => 'getCatalogDate',
        'country' => 'getCountry',
        'orders' => 'getOrders',
        'normTitle' => 'getNormTitle',
        'normAuthor' => 'getNormAuthor',
        'locations' => 'getLocations',
        'fixedFields' => 'getFixedFields',
        'varFields' => 'getVarFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['updatedDate'] = isset($data['updatedDate']) ? $data['updatedDate'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['deletedDate'] = isset($data['deletedDate']) ? $data['deletedDate'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['suppressed'] = isset($data['suppressed']) ? $data['suppressed'] : null;
        $this->container['available'] = isset($data['available']) ? $data['available'] : null;
        $this->container['lang'] = isset($data['lang']) ? $data['lang'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['materialType'] = isset($data['materialType']) ? $data['materialType'] : null;
        $this->container['bibLevel'] = isset($data['bibLevel']) ? $data['bibLevel'] : null;
        $this->container['publishYear'] = isset($data['publishYear']) ? $data['publishYear'] : null;
        $this->container['catalogDate'] = isset($data['catalogDate']) ? $data['catalogDate'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['orders'] = isset($data['orders']) ? $data['orders'] : null;
        $this->container['normTitle'] = isset($data['normTitle']) ? $data['normTitle'] : null;
        $this->container['normAuthor'] = isset($data['normAuthor']) ? $data['normAuthor'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['fixedFields'] = isset($data['fixedFields']) ? $data['fixedFields'] : null;
        $this->container['varFields'] = isset($data['varFields']) ? $data['varFields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['orders'] === null) {
            $invalidProperties[] = "'orders' can't be null";
        }
        if ($this->container['locations'] === null) {
            $invalidProperties[] = "'locations' can't be null";
        }
        if ($this->container['fixedFields'] === null) {
            $invalidProperties[] = "'fixedFields' can't be null";
        }
        if ($this->container['varFields'] === null) {
            $invalidProperties[] = "'varFields' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['deleted'] === null) {
            return false;
        }
        if ($this->container['orders'] === null) {
            return false;
        }
        if ($this->container['locations'] === null) {
            return false;
        }
        if ($this->container['fixedFields'] === null) {
            return false;
        }
        if ($this->container['varFields'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id the record ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets updatedDate
     *
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->container['updatedDate'];
    }

    /**
     * Sets updatedDate
     *
     * @param \DateTime $updatedDate the date and time of the last update to the record, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     *
     * @return $this
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->container['updatedDate'] = $updatedDate;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate the date and time the record was created, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets deletedDate
     *
     * @return \DateTime
     */
    public function getDeletedDate()
    {
        return $this->container['deletedDate'];
    }

    /**
     * Sets deletedDate
     *
     * @param \DateTime $deletedDate the date the record was deleted, in ISO 8601 format (yyyy-MM-dd)
     *
     * @return $this
     */
    public function setDeletedDate($deletedDate)
    {
        $this->container['deletedDate'] = $deletedDate;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted whether the record has been deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets suppressed
     *
     * @return bool
     */
    public function getSuppressed()
    {
        return $this->container['suppressed'];
    }

    /**
     * Sets suppressed
     *
     * @param bool $suppressed whether the record is suppressed from public display
     *
     * @return $this
     */
    public function setSuppressed($suppressed)
    {
        $this->container['suppressed'] = $suppressed;

        return $this;
    }

    /**
     * Gets available
     *
     * @return bool
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param bool $available whether the record is available for checkout
     *
     * @return $this
     */
    public function setAvailable($available)
    {
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets lang
     *
     * @return \III\Sierra\Models\Language
     */
    public function getLang()
    {
        return $this->container['lang'];
    }

    /**
     * Sets lang
     *
     * @param \III\Sierra\Models\Language $lang the language of the material (display value)
     *
     * @return $this
     */
    public function setLang($lang)
    {
        $this->container['lang'] = $lang;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title the title from the bib record
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author the most authoritative available representation of the author's name
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets materialType
     *
     * @return \III\Sierra\Models\MaterialType
     */
    public function getMaterialType()
    {
        return $this->container['materialType'];
    }

    /**
     * Sets materialType
     *
     * @param \III\Sierra\Models\MaterialType $materialType the material type, such as book, serial, map, and so forth, based on MARC 21 Leader/06 values, or UNIMARC Label/06 values
     *
     * @return $this
     */
    public function setMaterialType($materialType)
    {
        $this->container['materialType'] = $materialType;

        return $this;
    }

    /**
     * Gets bibLevel
     *
     * @return \III\Sierra\Models\BibLevel
     */
    public function getBibLevel()
    {
        return $this->container['bibLevel'];
    }

    /**
     * Sets bibLevel
     *
     * @param \III\Sierra\Models\BibLevel $bibLevel the bibliographic level, based on MARC 21 Leader/07 values or UNIMARC Label/07 values
     *
     * @return $this
     */
    public function setBibLevel($bibLevel)
    {
        $this->container['bibLevel'] = $bibLevel;

        return $this;
    }

    /**
     * Gets publishYear
     *
     * @return int
     */
    public function getPublishYear()
    {
        return $this->container['publishYear'];
    }

    /**
     * Sets publishYear
     *
     * @param int $publishYear the year of publication
     *
     * @return $this
     */
    public function setPublishYear($publishYear)
    {
        $this->container['publishYear'] = $publishYear;

        return $this;
    }

    /**
     * Gets catalogDate
     *
     * @return \DateTime
     */
    public function getCatalogDate()
    {
        return $this->container['catalogDate'];
    }

    /**
     * Sets catalogDate
     *
     * @param \DateTime $catalogDate the date the record was added to the catalog, in ISO 8601 format (yyyy-MM-dd)
     *
     * @return $this
     */
    public function setCatalogDate($catalogDate)
    {
        $this->container['catalogDate'] = $catalogDate;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \III\Sierra\Models\Country
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \III\Sierra\Models\Country $country the country of publication (display value)
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets orders
     *
     * @return \III\Sierra\Models\OrderInfo[]
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param \III\Sierra\Models\OrderInfo[] $orders the order information for the bib record
     *
     * @return $this
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }

    /**
     * Gets normTitle
     *
     * @return string
     */
    public function getNormTitle()
    {
        return $this->container['normTitle'];
    }

    /**
     * Sets normTitle
     *
     * @param string $normTitle the normalized form of the most authoritative available version of the title
     *
     * @return $this
     */
    public function setNormTitle($normTitle)
    {
        $this->container['normTitle'] = $normTitle;

        return $this;
    }

    /**
     * Gets normAuthor
     *
     * @return string
     */
    public function getNormAuthor()
    {
        return $this->container['normAuthor'];
    }

    /**
     * Sets normAuthor
     *
     * @param string $normAuthor the normalized form of the most authoritative available representation of the author's name
     *
     * @return $this
     */
    public function setNormAuthor($normAuthor)
    {
        $this->container['normAuthor'] = $normAuthor;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \III\Sierra\Models\Location[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \III\Sierra\Models\Location[] $locations the locations associated with the bib
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets fixedFields
     *
     * @return \III\Sierra\Models\map
     */
    public function getFixedFields()
    {
        return $this->container['fixedFields'];
    }

    /**
     * Sets fixedFields
     *
     * @param \III\Sierra\Models\map $fixedFields the fixed-length fields from the bib record
     *
     * @return $this
     */
    public function setFixedFields($fixedFields)
    {
        $this->container['fixedFields'] = $fixedFields;

        return $this;
    }

    /**
     * Gets varFields
     *
     * @return \III\Sierra\Models\VarField[]
     */
    public function getVarFields()
    {
        return $this->container['varFields'];
    }

    /**
     * Sets varFields
     *
     * @param \III\Sierra\Models\VarField[] $varFields the variable-length fields from the bib record
     *
     * @return $this
     */
    public function setVarFields($varFields)
    {
        $this->container['varFields'] = $varFields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


