<?php
/**
 * Fund
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\Models;

use \ArrayAccess;
use \III\Sierra\ObjectSerializer;

/**
 * Fund Class Doc Comment
 *
 * @category Class
 * @description the properties of a fund
 * @package  III\Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Fund implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Fund';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'codeNumber' => 'int',
        'accountingUnitCodeNumber' => 'int',
        'fundName' => 'string',
        'note1' => 'string',
        'extCode' => 'int',
        'extFundName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'codeNumber' => 'int32',
        'accountingUnitCodeNumber' => 'int32',
        'fundName' => null,
        'note1' => null,
        'extCode' => 'int32',
        'extFundName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'codeNumber' => 'codeNumber',
        'accountingUnitCodeNumber' => 'accountingUnitCodeNumber',
        'fundName' => 'fundName',
        'note1' => 'note1',
        'extCode' => 'extCode',
        'extFundName' => 'extFundName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'codeNumber' => 'setCodeNumber',
        'accountingUnitCodeNumber' => 'setAccountingUnitCodeNumber',
        'fundName' => 'setFundName',
        'note1' => 'setNote1',
        'extCode' => 'setExtCode',
        'extFundName' => 'setExtFundName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'codeNumber' => 'getCodeNumber',
        'accountingUnitCodeNumber' => 'getAccountingUnitCodeNumber',
        'fundName' => 'getFundName',
        'note1' => 'getNote1',
        'extCode' => 'getExtCode',
        'extFundName' => 'getExtFundName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['codeNumber'] = isset($data['codeNumber']) ? $data['codeNumber'] : null;
        $this->container['accountingUnitCodeNumber'] = isset($data['accountingUnitCodeNumber']) ? $data['accountingUnitCodeNumber'] : null;
        $this->container['fundName'] = isset($data['fundName']) ? $data['fundName'] : null;
        $this->container['note1'] = isset($data['note1']) ? $data['note1'] : null;
        $this->container['extCode'] = isset($data['extCode']) ? $data['extCode'] : null;
        $this->container['extFundName'] = isset($data['extFundName']) ? $data['extFundName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['codeNumber'] === null) {
            $invalidProperties[] = "'codeNumber' can't be null";
        }
        if ($this->container['accountingUnitCodeNumber'] === null) {
            $invalidProperties[] = "'accountingUnitCodeNumber' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['code'] === null) {
            return false;
        }
        if ($this->container['codeNumber'] === null) {
            return false;
        }
        if ($this->container['accountingUnitCodeNumber'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code a fund code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets codeNumber
     *
     * @return int
     */
    public function getCodeNumber()
    {
        return $this->container['codeNumber'];
    }

    /**
     * Sets codeNumber
     *
     * @param int $codeNumber a fund code number
     *
     * @return $this
     */
    public function setCodeNumber($codeNumber)
    {
        $this->container['codeNumber'] = $codeNumber;

        return $this;
    }

    /**
     * Gets accountingUnitCodeNumber
     *
     * @return int
     */
    public function getAccountingUnitCodeNumber()
    {
        return $this->container['accountingUnitCodeNumber'];
    }

    /**
     * Sets accountingUnitCodeNumber
     *
     * @param int $accountingUnitCodeNumber an accounting unit code number
     *
     * @return $this
     */
    public function setAccountingUnitCodeNumber($accountingUnitCodeNumber)
    {
        $this->container['accountingUnitCodeNumber'] = $accountingUnitCodeNumber;

        return $this;
    }

    /**
     * Gets fundName
     *
     * @return string
     */
    public function getFundName()
    {
        return $this->container['fundName'];
    }

    /**
     * Sets fundName
     *
     * @param string $fundName the fund name
     *
     * @return $this
     */
    public function setFundName($fundName)
    {
        $this->container['fundName'] = $fundName;

        return $this;
    }

    /**
     * Gets note1
     *
     * @return string
     */
    public function getNote1()
    {
        return $this->container['note1'];
    }

    /**
     * Sets note1
     *
     * @param string $note1 a note associated with the fund
     *
     * @return $this
     */
    public function setNote1($note1)
    {
        $this->container['note1'] = $note1;

        return $this;
    }

    /**
     * Gets extCode
     *
     * @return int
     */
    public function getExtCode()
    {
        return $this->container['extCode'];
    }

    /**
     * Sets extCode
     *
     * @param int $extCode an external fund code used to link the fund to an external fund
     *
     * @return $this
     */
    public function setExtCode($extCode)
    {
        $this->container['extCode'] = $extCode;

        return $this;
    }

    /**
     * Gets extFundName
     *
     * @return string
     */
    public function getExtFundName()
    {
        return $this->container['extFundName'];
    }

    /**
     * Sets extFundName
     *
     * @param string $extFundName the external fund name
     *
     * @return $this
     */
    public function setExtFundName($extFundName)
    {
        $this->container['extFundName'] = $extFundName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


