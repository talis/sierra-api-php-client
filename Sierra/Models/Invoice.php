<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sierra\Models;

use \ArrayAccess;
use \Sierra\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @description an invoice record
 * @package  Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'accounting_unit' => 'int',
        'inv_date' => '\DateTime',
        'inv_num' => 'string',
        'tax_type' => 'string',
        'vendors' => '\Sierra\Models\Vendor[]',
        'paid_date' => '\DateTime',
        'for_currency' => '\Sierra\Models\ForeignCurrency',
        'inv_total' => '\Sierra\Models\InvoiceTotal',
        'use_tax' => '\Sierra\Models\UseTax',
        'line_items' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'accounting_unit' => 'int32',
        'inv_date' => 'date-time',
        'inv_num' => null,
        'tax_type' => null,
        'vendors' => null,
        'paid_date' => 'date-time',
        'for_currency' => null,
        'inv_total' => null,
        'use_tax' => null,
        'line_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'accounting_unit' => 'accountingUnit',
        'inv_date' => 'invDate',
        'inv_num' => 'invNum',
        'tax_type' => 'taxType',
        'vendors' => 'vendors',
        'paid_date' => 'paidDate',
        'for_currency' => 'forCurrency',
        'inv_total' => 'invTotal',
        'use_tax' => 'useTax',
        'line_items' => 'lineItems'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'accounting_unit' => 'setAccountingUnit',
        'inv_date' => 'setInvDate',
        'inv_num' => 'setInvNum',
        'tax_type' => 'setTaxType',
        'vendors' => 'setVendors',
        'paid_date' => 'setPaidDate',
        'for_currency' => 'setForCurrency',
        'inv_total' => 'setInvTotal',
        'use_tax' => 'setUseTax',
        'line_items' => 'setLineItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'accounting_unit' => 'getAccountingUnit',
        'inv_date' => 'getInvDate',
        'inv_num' => 'getInvNum',
        'tax_type' => 'getTaxType',
        'vendors' => 'getVendors',
        'paid_date' => 'getPaidDate',
        'for_currency' => 'getForCurrency',
        'inv_total' => 'getInvTotal',
        'use_tax' => 'getUseTax',
        'line_items' => 'getLineItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['accounting_unit'] = isset($data['accounting_unit']) ? $data['accounting_unit'] : null;
        $this->container['inv_date'] = isset($data['inv_date']) ? $data['inv_date'] : null;
        $this->container['inv_num'] = isset($data['inv_num']) ? $data['inv_num'] : null;
        $this->container['tax_type'] = isset($data['tax_type']) ? $data['tax_type'] : null;
        $this->container['vendors'] = isset($data['vendors']) ? $data['vendors'] : null;
        $this->container['paid_date'] = isset($data['paid_date']) ? $data['paid_date'] : null;
        $this->container['for_currency'] = isset($data['for_currency']) ? $data['for_currency'] : null;
        $this->container['inv_total'] = isset($data['inv_total']) ? $data['inv_total'] : null;
        $this->container['use_tax'] = isset($data['use_tax']) ? $data['use_tax'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['vendors'] === null) {
            $invalidProperties[] = "'vendors' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['vendors'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id the record ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accounting_unit
     *
     * @return int
     */
    public function getAccountingUnit()
    {
        return $this->container['accounting_unit'];
    }

    /**
     * Sets accounting_unit
     *
     * @param int $accounting_unit the accounting unit
     *
     * @return $this
     */
    public function setAccountingUnit($accounting_unit)
    {
        $this->container['accounting_unit'] = $accounting_unit;

        return $this;
    }

    /**
     * Gets inv_date
     *
     * @return \DateTime
     */
    public function getInvDate()
    {
        return $this->container['inv_date'];
    }

    /**
     * Sets inv_date
     *
     * @param \DateTime $inv_date the invoice date and time as entered by the customer, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     *
     * @return $this
     */
    public function setInvDate($inv_date)
    {
        $this->container['inv_date'] = $inv_date;

        return $this;
    }

    /**
     * Gets inv_num
     *
     * @return string
     */
    public function getInvNum()
    {
        return $this->container['inv_num'];
    }

    /**
     * Sets inv_num
     *
     * @param string $inv_num invoice number as entered by the customer
     *
     * @return $this
     */
    public function setInvNum($inv_num)
    {
        $this->container['inv_num'] = $inv_num;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string $tax_type tax information if your library has enabled the feature to pay invoices using GST or VAT
     *
     * @return $this
     */
    public function setTaxType($tax_type)
    {
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets vendors
     *
     * @return \Sierra\Models\Vendor[]
     */
    public function getVendors()
    {
        return $this->container['vendors'];
    }

    /**
     * Sets vendors
     *
     * @param \Sierra\Models\Vendor[] $vendors a list of vendor details for the invoice
     *
     * @return $this
     */
    public function setVendors($vendors)
    {
        $this->container['vendors'] = $vendors;

        return $this;
    }

    /**
     * Gets paid_date
     *
     * @return \DateTime
     */
    public function getPaidDate()
    {
        return $this->container['paid_date'];
    }

    /**
     * Sets paid_date
     *
     * @param \DateTime $paid_date the date and time that the invoice was paid, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     *
     * @return $this
     */
    public function setPaidDate($paid_date)
    {
        $this->container['paid_date'] = $paid_date;

        return $this;
    }

    /**
     * Gets for_currency
     *
     * @return \Sierra\Models\ForeignCurrency
     */
    public function getForCurrency()
    {
        return $this->container['for_currency'];
    }

    /**
     * Sets for_currency
     *
     * @param \Sierra\Models\ForeignCurrency $for_currency the invoice's foreign currency code, rate and format
     *
     * @return $this
     */
    public function setForCurrency($for_currency)
    {
        $this->container['for_currency'] = $for_currency;

        return $this;
    }

    /**
     * Gets inv_total
     *
     * @return \Sierra\Models\InvoiceTotal
     */
    public function getInvTotal()
    {
        return $this->container['inv_total'];
    }

    /**
     * Sets inv_total
     *
     * @param \Sierra\Models\InvoiceTotal $inv_total the invoice totals
     *
     * @return $this
     */
    public function setInvTotal($inv_total)
    {
        $this->container['inv_total'] = $inv_total;

        return $this;
    }

    /**
     * Gets use_tax
     *
     * @return \Sierra\Models\UseTax
     */
    public function getUseTax()
    {
        return $this->container['use_tax'];
    }

    /**
     * Sets use_tax
     *
     * @param \Sierra\Models\UseTax $use_tax the invoice's use tax percentage rate and fund
     *
     * @return $this
     */
    public function setUseTax($use_tax)
    {
        $this->container['use_tax'] = $use_tax;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return string[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param string[] $line_items a list of links to line item ids for the invoice
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


