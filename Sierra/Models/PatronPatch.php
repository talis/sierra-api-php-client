<?php
/**
 * PatronPatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\Models;

use \ArrayAccess;
use \III\Sierra\ObjectSerializer;

/**
 * PatronPatch Class Doc Comment
 *
 * @category Class
 * @description a patron PUT request
 * @package  III\Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PatronPatch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PatronPatch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'emails' => 'string[]',
        'names' => 'string[]',
        'addresses' => '\III\Sierra\Models\Address[]',
        'phones' => '\III\Sierra\Models\Phone[]',
        'pin' => 'string',
        'barcodes' => 'string[]',
        'patronType' => 'int',
        'expirationDate' => '\DateTime',
        'birthDate' => '\DateTime',
        'patronCodes' => '\III\Sierra\Models\Codes',
        'blockInfo' => '\III\Sierra\Models\Block',
        'uniqueIds' => 'string[]',
        'pMessage' => 'string',
        'homeLibraryCode' => 'string',
        'langPref' => 'string',
        'fixedFields' => '\III\Sierra\Models\map',
        'varFields' => '\III\Sierra\Models\VarField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'emails' => null,
        'names' => null,
        'addresses' => null,
        'phones' => null,
        'pin' => null,
        'barcodes' => null,
        'patronType' => 'int32',
        'expirationDate' => 'date',
        'birthDate' => 'date',
        'patronCodes' => null,
        'blockInfo' => null,
        'uniqueIds' => null,
        'pMessage' => null,
        'homeLibraryCode' => null,
        'langPref' => null,
        'fixedFields' => null,
        'varFields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'emails' => 'emails',
        'names' => 'names',
        'addresses' => 'addresses',
        'phones' => 'phones',
        'pin' => 'pin',
        'barcodes' => 'barcodes',
        'patronType' => 'patronType',
        'expirationDate' => 'expirationDate',
        'birthDate' => 'birthDate',
        'patronCodes' => 'patronCodes',
        'blockInfo' => 'blockInfo',
        'uniqueIds' => 'uniqueIds',
        'pMessage' => 'pMessage',
        'homeLibraryCode' => 'homeLibraryCode',
        'langPref' => 'langPref',
        'fixedFields' => 'fixedFields',
        'varFields' => 'varFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'emails' => 'setEmails',
        'names' => 'setNames',
        'addresses' => 'setAddresses',
        'phones' => 'setPhones',
        'pin' => 'setPin',
        'barcodes' => 'setBarcodes',
        'patronType' => 'setPatronType',
        'expirationDate' => 'setExpirationDate',
        'birthDate' => 'setBirthDate',
        'patronCodes' => 'setPatronCodes',
        'blockInfo' => 'setBlockInfo',
        'uniqueIds' => 'setUniqueIds',
        'pMessage' => 'setPMessage',
        'homeLibraryCode' => 'setHomeLibraryCode',
        'langPref' => 'setLangPref',
        'fixedFields' => 'setFixedFields',
        'varFields' => 'setVarFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'emails' => 'getEmails',
        'names' => 'getNames',
        'addresses' => 'getAddresses',
        'phones' => 'getPhones',
        'pin' => 'getPin',
        'barcodes' => 'getBarcodes',
        'patronType' => 'getPatronType',
        'expirationDate' => 'getExpirationDate',
        'birthDate' => 'getBirthDate',
        'patronCodes' => 'getPatronCodes',
        'blockInfo' => 'getBlockInfo',
        'uniqueIds' => 'getUniqueIds',
        'pMessage' => 'getPMessage',
        'homeLibraryCode' => 'getHomeLibraryCode',
        'langPref' => 'getLangPref',
        'fixedFields' => 'getFixedFields',
        'varFields' => 'getVarFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['emails'] = isset($data['emails']) ? $data['emails'] : null;
        $this->container['names'] = isset($data['names']) ? $data['names'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['phones'] = isset($data['phones']) ? $data['phones'] : null;
        $this->container['pin'] = isset($data['pin']) ? $data['pin'] : null;
        $this->container['barcodes'] = isset($data['barcodes']) ? $data['barcodes'] : null;
        $this->container['patronType'] = isset($data['patronType']) ? $data['patronType'] : null;
        $this->container['expirationDate'] = isset($data['expirationDate']) ? $data['expirationDate'] : null;
        $this->container['birthDate'] = isset($data['birthDate']) ? $data['birthDate'] : null;
        $this->container['patronCodes'] = isset($data['patronCodes']) ? $data['patronCodes'] : null;
        $this->container['blockInfo'] = isset($data['blockInfo']) ? $data['blockInfo'] : null;
        $this->container['uniqueIds'] = isset($data['uniqueIds']) ? $data['uniqueIds'] : null;
        $this->container['pMessage'] = isset($data['pMessage']) ? $data['pMessage'] : null;
        $this->container['homeLibraryCode'] = isset($data['homeLibraryCode']) ? $data['homeLibraryCode'] : null;
        $this->container['langPref'] = isset($data['langPref']) ? $data['langPref'] : null;
        $this->container['fixedFields'] = isset($data['fixedFields']) ? $data['fixedFields'] : null;
        $this->container['varFields'] = isset($data['varFields']) ? $data['varFields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets emails
     *
     * @return string[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[] $emails a list of the patron's emails (must include all applicable email addresses for the patron)
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets names
     *
     * @return string[]
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param string[] $names a list of the patron's names (must include all applicable names for the patron)
     *
     * @return $this
     */
    public function setNames($names)
    {
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \III\Sierra\Models\Address[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \III\Sierra\Models\Address[] $addresses a list of the patron's addresses (must include all applicable addresses for the patron)
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \III\Sierra\Models\Phone[]
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \III\Sierra\Models\Phone[] $phones a list of the patron's phone numbers (must include all applicable phone numbers for the patron)
     *
     * @return $this
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string $pin the patron's Personal Identification Number
     *
     * @return $this
     */
    public function setPin($pin)
    {
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets barcodes
     *
     * @return string[]
     */
    public function getBarcodes()
    {
        return $this->container['barcodes'];
    }

    /**
     * Sets barcodes
     *
     * @param string[] $barcodes patron's barcode
     *
     * @return $this
     */
    public function setBarcodes($barcodes)
    {
        $this->container['barcodes'] = $barcodes;

        return $this;
    }

    /**
     * Gets patronType
     *
     * @return int
     */
    public function getPatronType()
    {
        return $this->container['patronType'];
    }

    /**
     * Sets patronType
     *
     * @param int $patronType the patron type code
     *
     * @return $this
     */
    public function setPatronType($patronType)
    {
        $this->container['patronType'] = $patronType;

        return $this;
    }

    /**
     * Gets expirationDate
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expirationDate'];
    }

    /**
     * Sets expirationDate
     *
     * @param \DateTime $expirationDate the expiration date of the patron's borrowing privileges in ISO 8601 format (yyyy-MM-dd)
     *
     * @return $this
     */
    public function setExpirationDate($expirationDate)
    {
        $this->container['expirationDate'] = $expirationDate;

        return $this;
    }

    /**
     * Gets birthDate
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birthDate'];
    }

    /**
     * Sets birthDate
     *
     * @param \DateTime $birthDate the patron's date of birth in ISO 8601 format (yyyy-MM-dd)
     *
     * @return $this
     */
    public function setBirthDate($birthDate)
    {
        $this->container['birthDate'] = $birthDate;

        return $this;
    }

    /**
     * Gets patronCodes
     *
     * @return \III\Sierra\Models\Codes
     */
    public function getPatronCodes()
    {
        return $this->container['patronCodes'];
    }

    /**
     * Sets patronCodes
     *
     * @param \III\Sierra\Models\Codes $patronCodes a list of patron codes
     *
     * @return $this
     */
    public function setPatronCodes($patronCodes)
    {
        $this->container['patronCodes'] = $patronCodes;

        return $this;
    }

    /**
     * Gets blockInfo
     *
     * @return \III\Sierra\Models\Block
     */
    public function getBlockInfo()
    {
        return $this->container['blockInfo'];
    }

    /**
     * Sets blockInfo
     *
     * @param \III\Sierra\Models\Block $blockInfo patron block information
     *
     * @return $this
     */
    public function setBlockInfo($blockInfo)
    {
        $this->container['blockInfo'] = $blockInfo;

        return $this;
    }

    /**
     * Gets uniqueIds
     *
     * @return string[]
     */
    public function getUniqueIds()
    {
        return $this->container['uniqueIds'];
    }

    /**
     * Sets uniqueIds
     *
     * @param string[] $uniqueIds the patron's unique IDs
     *
     * @return $this
     */
    public function setUniqueIds($uniqueIds)
    {
        $this->container['uniqueIds'] = $uniqueIds;

        return $this;
    }

    /**
     * Gets pMessage
     *
     * @return string
     */
    public function getPMessage()
    {
        return $this->container['pMessage'];
    }

    /**
     * Sets pMessage
     *
     * @param string $pMessage the patron's message
     *
     * @return $this
     */
    public function setPMessage($pMessage)
    {
        $this->container['pMessage'] = $pMessage;

        return $this;
    }

    /**
     * Gets homeLibraryCode
     *
     * @return string
     */
    public function getHomeLibraryCode()
    {
        return $this->container['homeLibraryCode'];
    }

    /**
     * Sets homeLibraryCode
     *
     * @param string $homeLibraryCode the patron's home library
     *
     * @return $this
     */
    public function setHomeLibraryCode($homeLibraryCode)
    {
        $this->container['homeLibraryCode'] = $homeLibraryCode;

        return $this;
    }

    /**
     * Gets langPref
     *
     * @return string
     */
    public function getLangPref()
    {
        return $this->container['langPref'];
    }

    /**
     * Sets langPref
     *
     * @param string $langPref the patron's language preference
     *
     * @return $this
     */
    public function setLangPref($langPref)
    {
        $this->container['langPref'] = $langPref;

        return $this;
    }

    /**
     * Gets fixedFields
     *
     * @return \III\Sierra\Models\map
     */
    public function getFixedFields()
    {
        return $this->container['fixedFields'];
    }

    /**
     * Sets fixedFields
     *
     * @param \III\Sierra\Models\map $fixedFields the fixed-length fields from the patron record
     *
     * @return $this
     */
    public function setFixedFields($fixedFields)
    {
        $this->container['fixedFields'] = $fixedFields;

        return $this;
    }

    /**
     * Gets varFields
     *
     * @return \III\Sierra\Models\VarField[]
     */
    public function getVarFields()
    {
        return $this->container['varFields'];
    }

    /**
     * Sets varFields
     *
     * @param \III\Sierra\Models\VarField[] $varFields the variable-length fields from the patron record
     *
     * @return $this
     */
    public function setVarFields($varFields)
    {
        $this->container['varFields'] = $varFields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


