<?php
/**
 * Fine
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\Models;

use \ArrayAccess;
use \III\Sierra\ObjectSerializer;

/**
 * Fine Class Doc Comment
 *
 * @category Class
 * @description a patron fine
 * @package  III\Sierra
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Fine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Fine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'patron' => 'string',
        'item' => 'string',
        'assessedDate' => '\DateTime',
        'description' => 'string',
        'invoiceNumber' => 'int',
        'chargeType' => '\III\Sierra\Models\ChargeType',
        'itemCharge' => 'double',
        'processingFee' => 'double',
        'billingFee' => 'double',
        'paidAmount' => 'double',
        'location' => '\III\Sierra\Models\Location',
        'initials' => 'string',
        'creationMethod' => 'string',
        'datePaid' => '\DateTime',
        'originalPatron' => 'string',
        'printBill' => 'bool',
        'terminalNumber' => 'int',
        'transferDate' => '\DateTime',
        'returnDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'patron' => null,
        'item' => null,
        'assessedDate' => 'date-time',
        'description' => null,
        'invoiceNumber' => 'int64',
        'chargeType' => null,
        'itemCharge' => 'double',
        'processingFee' => 'double',
        'billingFee' => 'double',
        'paidAmount' => 'double',
        'location' => null,
        'initials' => null,
        'creationMethod' => null,
        'datePaid' => 'date-time',
        'originalPatron' => null,
        'printBill' => null,
        'terminalNumber' => 'int32',
        'transferDate' => 'date-time',
        'returnDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'patron' => 'patron',
        'item' => 'item',
        'assessedDate' => 'assessedDate',
        'description' => 'description',
        'invoiceNumber' => 'invoiceNumber',
        'chargeType' => 'chargeType',
        'itemCharge' => 'itemCharge',
        'processingFee' => 'processingFee',
        'billingFee' => 'billingFee',
        'paidAmount' => 'paidAmount',
        'location' => 'location',
        'initials' => 'initials',
        'creationMethod' => 'creationMethod',
        'datePaid' => 'datePaid',
        'originalPatron' => 'originalPatron',
        'printBill' => 'printBill',
        'terminalNumber' => 'terminalNumber',
        'transferDate' => 'transferDate',
        'returnDate' => 'returnDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'patron' => 'setPatron',
        'item' => 'setItem',
        'assessedDate' => 'setAssessedDate',
        'description' => 'setDescription',
        'invoiceNumber' => 'setInvoiceNumber',
        'chargeType' => 'setChargeType',
        'itemCharge' => 'setItemCharge',
        'processingFee' => 'setProcessingFee',
        'billingFee' => 'setBillingFee',
        'paidAmount' => 'setPaidAmount',
        'location' => 'setLocation',
        'initials' => 'setInitials',
        'creationMethod' => 'setCreationMethod',
        'datePaid' => 'setDatePaid',
        'originalPatron' => 'setOriginalPatron',
        'printBill' => 'setPrintBill',
        'terminalNumber' => 'setTerminalNumber',
        'transferDate' => 'setTransferDate',
        'returnDate' => 'setReturnDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'patron' => 'getPatron',
        'item' => 'getItem',
        'assessedDate' => 'getAssessedDate',
        'description' => 'getDescription',
        'invoiceNumber' => 'getInvoiceNumber',
        'chargeType' => 'getChargeType',
        'itemCharge' => 'getItemCharge',
        'processingFee' => 'getProcessingFee',
        'billingFee' => 'getBillingFee',
        'paidAmount' => 'getPaidAmount',
        'location' => 'getLocation',
        'initials' => 'getInitials',
        'creationMethod' => 'getCreationMethod',
        'datePaid' => 'getDatePaid',
        'originalPatron' => 'getOriginalPatron',
        'printBill' => 'getPrintBill',
        'terminalNumber' => 'getTerminalNumber',
        'transferDate' => 'getTransferDate',
        'returnDate' => 'getReturnDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['patron'] = isset($data['patron']) ? $data['patron'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['assessedDate'] = isset($data['assessedDate']) ? $data['assessedDate'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['invoiceNumber'] = isset($data['invoiceNumber']) ? $data['invoiceNumber'] : null;
        $this->container['chargeType'] = isset($data['chargeType']) ? $data['chargeType'] : null;
        $this->container['itemCharge'] = isset($data['itemCharge']) ? $data['itemCharge'] : null;
        $this->container['processingFee'] = isset($data['processingFee']) ? $data['processingFee'] : null;
        $this->container['billingFee'] = isset($data['billingFee']) ? $data['billingFee'] : null;
        $this->container['paidAmount'] = isset($data['paidAmount']) ? $data['paidAmount'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['initials'] = isset($data['initials']) ? $data['initials'] : null;
        $this->container['creationMethod'] = isset($data['creationMethod']) ? $data['creationMethod'] : null;
        $this->container['datePaid'] = isset($data['datePaid']) ? $data['datePaid'] : null;
        $this->container['originalPatron'] = isset($data['originalPatron']) ? $data['originalPatron'] : null;
        $this->container['printBill'] = isset($data['printBill']) ? $data['printBill'] : null;
        $this->container['terminalNumber'] = isset($data['terminalNumber']) ? $data['terminalNumber'] : null;
        $this->container['transferDate'] = isset($data['transferDate']) ? $data['transferDate'] : null;
        $this->container['returnDate'] = isset($data['returnDate']) ? $data['returnDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['itemCharge'] === null) {
            $invalidProperties[] = "'itemCharge' can't be null";
        }
        if ($this->container['processingFee'] === null) {
            $invalidProperties[] = "'processingFee' can't be null";
        }
        if ($this->container['billingFee'] === null) {
            $invalidProperties[] = "'billingFee' can't be null";
        }
        if ($this->container['paidAmount'] === null) {
            $invalidProperties[] = "'paidAmount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['itemCharge'] === null) {
            return false;
        }
        if ($this->container['processingFee'] === null) {
            return false;
        }
        if ($this->container['billingFee'] === null) {
            return false;
        }
        if ($this->container['paidAmount'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id the ID of the fine
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets patron
     *
     * @return string
     */
    public function getPatron()
    {
        return $this->container['patron'];
    }

    /**
     * Sets patron
     *
     * @param string $patron the patron record number associated with the fine
     *
     * @return $this
     */
    public function setPatron($patron)
    {
        $this->container['patron'] = $patron;

        return $this;
    }

    /**
     * Gets item
     *
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param string $item the item record number associated with the fine
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets assessedDate
     *
     * @return \DateTime
     */
    public function getAssessedDate()
    {
        return $this->container['assessedDate'];
    }

    /**
     * Sets assessedDate
     *
     * @param \DateTime $assessedDate the date the fine was assessed, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     *
     * @return $this
     */
    public function setAssessedDate($assessedDate)
    {
        $this->container['assessedDate'] = $assessedDate;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description the reason for the charge
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets invoiceNumber
     *
     * @return int
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoiceNumber'];
    }

    /**
     * Sets invoiceNumber
     *
     * @param int $invoiceNumber the fine's invoice number
     *
     * @return $this
     */
    public function setInvoiceNumber($invoiceNumber)
    {
        $this->container['invoiceNumber'] = $invoiceNumber;

        return $this;
    }

    /**
     * Gets chargeType
     *
     * @return \III\Sierra\Models\ChargeType
     */
    public function getChargeType()
    {
        return $this->container['chargeType'];
    }

    /**
     * Sets chargeType
     *
     * @param \III\Sierra\Models\ChargeType $chargeType the code representing the type of charge assessed
     *
     * @return $this
     */
    public function setChargeType($chargeType)
    {
        $this->container['chargeType'] = $chargeType;

        return $this;
    }

    /**
     * Gets itemCharge
     *
     * @return double
     */
    public function getItemCharge()
    {
        return $this->container['itemCharge'];
    }

    /**
     * Sets itemCharge
     *
     * @param double $itemCharge a fine amount related to the item (the exact meaning depends on the charge code)
     *
     * @return $this
     */
    public function setItemCharge($itemCharge)
    {
        $this->container['itemCharge'] = $itemCharge;

        return $this;
    }

    /**
     * Gets processingFee
     *
     * @return double
     */
    public function getProcessingFee()
    {
        return $this->container['processingFee'];
    }

    /**
     * Sets processingFee
     *
     * @param double $processingFee a processing fee amount (the exact meaning depends on the charge code)
     *
     * @return $this
     */
    public function setProcessingFee($processingFee)
    {
        $this->container['processingFee'] = $processingFee;

        return $this;
    }

    /**
     * Gets billingFee
     *
     * @return double
     */
    public function getBillingFee()
    {
        return $this->container['billingFee'];
    }

    /**
     * Sets billingFee
     *
     * @param double $billingFee a billing fee amount (the exact meaning depends on the charge code)
     *
     * @return $this
     */
    public function setBillingFee($billingFee)
    {
        $this->container['billingFee'] = $billingFee;

        return $this;
    }

    /**
     * Gets paidAmount
     *
     * @return double
     */
    public function getPaidAmount()
    {
        return $this->container['paidAmount'];
    }

    /**
     * Sets paidAmount
     *
     * @param double $paidAmount the amount already paid for this fine
     *
     * @return $this
     */
    public function setPaidAmount($paidAmount)
    {
        $this->container['paidAmount'] = $paidAmount;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \III\Sierra\Models\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \III\Sierra\Models\Location $location the charge location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets initials
     *
     * @return string
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     *
     * @param string $initials initials
     *
     * @return $this
     */
    public function setInitials($initials)
    {
        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets creationMethod
     *
     * @return string
     */
    public function getCreationMethod()
    {
        return $this->container['creationMethod'];
    }

    /**
     * Sets creationMethod
     *
     * @param string $creationMethod the method that was used to create the fine
     *
     * @return $this
     */
    public function setCreationMethod($creationMethod)
    {
        $this->container['creationMethod'] = $creationMethod;

        return $this;
    }

    /**
     * Gets datePaid
     *
     * @return \DateTime
     */
    public function getDatePaid()
    {
        return $this->container['datePaid'];
    }

    /**
     * Sets datePaid
     *
     * @param \DateTime $datePaid the date the fine was paid
     *
     * @return $this
     */
    public function setDatePaid($datePaid)
    {
        $this->container['datePaid'] = $datePaid;

        return $this;
    }

    /**
     * Gets originalPatron
     *
     * @return string
     */
    public function getOriginalPatron()
    {
        return $this->container['originalPatron'];
    }

    /**
     * Sets originalPatron
     *
     * @param string $originalPatron the original patron record number associated with the fine
     *
     * @return $this
     */
    public function setOriginalPatron($originalPatron)
    {
        $this->container['originalPatron'] = $originalPatron;

        return $this;
    }

    /**
     * Gets printBill
     *
     * @return bool
     */
    public function getPrintBill()
    {
        return $this->container['printBill'];
    }

    /**
     * Sets printBill
     *
     * @param bool $printBill has the bill been printed
     *
     * @return $this
     */
    public function setPrintBill($printBill)
    {
        $this->container['printBill'] = $printBill;

        return $this;
    }

    /**
     * Gets terminalNumber
     *
     * @return int
     */
    public function getTerminalNumber()
    {
        return $this->container['terminalNumber'];
    }

    /**
     * Sets terminalNumber
     *
     * @param int $terminalNumber the terminal number
     *
     * @return $this
     */
    public function setTerminalNumber($terminalNumber)
    {
        $this->container['terminalNumber'] = $terminalNumber;

        return $this;
    }

    /**
     * Gets transferDate
     *
     * @return \DateTime
     */
    public function getTransferDate()
    {
        return $this->container['transferDate'];
    }

    /**
     * Sets transferDate
     *
     * @param \DateTime $transferDate the original transfer date
     *
     * @return $this
     */
    public function setTransferDate($transferDate)
    {
        $this->container['transferDate'] = $transferDate;

        return $this;
    }

    /**
     * Gets returnDate
     *
     * @return \DateTime
     */
    public function getReturnDate()
    {
        return $this->container['returnDate'];
    }

    /**
     * Sets returnDate
     *
     * @param \DateTime $returnDate the date that the item was returned
     *
     * @return $this
     */
    public function setReturnDate($returnDate)
    {
        $this->container['returnDate'] = $returnDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


