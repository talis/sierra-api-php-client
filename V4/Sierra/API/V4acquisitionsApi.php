<?php
/**
 * V4acquisitionsApi
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\V4\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use III\Sierra\V4\ApiException;
use III\Sierra\V4\Configuration;
use III\Sierra\V4\HeaderSelector;
use III\Sierra\V4\ObjectSerializer;

/**
 * V4acquisitionsApi Class Doc Comment
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V4acquisitionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createANewAcquisition
     *
     * Create a new acquisition
     *
     * @param  string $login the Sierra username to associate with created orders (required)
     * @param  string $location the shelving location or branch for which the order is placed (required)
     * @param  string $fund the fund code against which the material is encumbered and paid (required)
     * @param  string $vendor the library-defined code for the vendor who handles the order (required)
     * @param   $marc the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     * @param  int $copies the number of copies ordered (optional)
     * @param  double $price the estimated price per copy (optional)
     * @param  string $acquisitionType the library-defined acquisition type code or the method of paying for the material (optional)
     * @param  string $claim the claiming activity code (optional)
     * @param  string $code1 the library-defined order code 1 (optional)
     * @param  string $code2 the library-defined order code 2 (optional)
     * @param  string $code3 the library-defined order code 3 (optional)
     * @param  string $code4 the library-defined order code 4 (optional)
     * @param  string $format a code representing the physical form of the material (any hash mark symbols &#39;#&#39; must be URL encoded (optional)
     * @param  string $orderNote a code representing an order note to print on the purchase order form (optional)
     * @param  string $orderType a code representing the type of order (optional)
     * @param  string $raction a code representing the receiving action (optional)
     * @param  string $rloc a code representing the receiving location (optional)
     * @param  string $bloc a code representing the billing location (optional)
     * @param  string $status a system-generated code representing that financial encumbering or disencumbering status of a record (optional)
     * @param  string $tloc a code representing a temporary shelving location (optional)
     * @param  string $odate the date the material was ordered, in the format mm-dd-yy (optional)
     * @param  string $language the language of the material, based on the MARC 21 Code List for Languages (also used by UNIMARC format) (optional)
     * @param  string $country the country of publication, based on the MARC 21 Code List of Countries, or ISO 3166/MA standard for UNIMARC systems (optional)
     * @param  string $note a code representing the note that prints on the purchase order form (repeatable parameter) (optional)
     * @param  string $staffNote a free-text internal (staff) note (repeatable parameter) (optional)
     * @param  string $vendorNote a free-text note for vendor order information (repeatable parameter) (optional)
     * @param  string $vendorIDNumber the vendor&#39;s identification number for this title (repeatable parameter) (optional)
     * @param  string $volume the number of volumes for this title (optional)
     * @param  string $selector a free text note identifying the selector of the item (repeatable parameter) (optional)
     * @param  string $vendorAccount the vendor account number (repeatable parameter) (optional)
     * @param  string $currencyCode the foreign currency code (optional)
     * @param  string $identity a free text note, used to distinguish between order records (repeatable parameter) (optional)
     * @param  string $shipTo the library address to which the vendor should ship materials (repeatable parameter) (optional)
     * @param  string $requestor the requestor (repeatable parameter) (optional)
     * @param  string $oldOrderNumber the old order number (repeatable parameter) (optional)
     * @param  string $paidNote the paid note (repeatable parameter) (optional)
     * @param  string $vendorAddress the vendor address (repeatable parameter) (optional)
     * @param  string $customVarField1 custom var field 1 (repeatable parameter) (optional)
     * @param  string $customVarField2 custom var field 2 (repeatable parameter) (optional)
     * @param  string $customVarField3 custom var field 3 (repeatable parameter) (optional)
     * @param  string $customVarField4 custom var field 4 (repeatable parameter) (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\OrderBibLinks
     */
    public function createANewAcquisition($login, $location, $fund, $vendor, $marc, $copies = null, $price = null, $acquisitionType = null, $claim = null, $code1 = null, $code2 = null, $code3 = null, $code4 = null, $format = null, $orderNote = null, $orderType = null, $raction = null, $rloc = null, $bloc = null, $status = null, $tloc = null, $odate = null, $language = null, $country = null, $note = null, $staffNote = null, $vendorNote = null, $vendorIDNumber = null, $volume = null, $selector = null, $vendorAccount = null, $currencyCode = null, $identity = null, $shipTo = null, $requestor = null, $oldOrderNumber = null, $paidNote = null, $vendorAddress = null, $customVarField1 = null, $customVarField2 = null, $customVarField3 = null, $customVarField4 = null)
    {
        list($response) = $this->createANewAcquisitionWithHttpInfo($login, $location, $fund, $vendor, $marc, $copies, $price, $acquisitionType, $claim, $code1, $code2, $code3, $code4, $format, $orderNote, $orderType, $raction, $rloc, $bloc, $status, $tloc, $odate, $language, $country, $note, $staffNote, $vendorNote, $vendorIDNumber, $volume, $selector, $vendorAccount, $currencyCode, $identity, $shipTo, $requestor, $oldOrderNumber, $paidNote, $vendorAddress, $customVarField1, $customVarField2, $customVarField3, $customVarField4);
        return $response;
    }

    /**
     * Operation createANewAcquisitionWithHttpInfo
     *
     * Create a new acquisition
     *
     * @param  string $login the Sierra username to associate with created orders (required)
     * @param  string $location the shelving location or branch for which the order is placed (required)
     * @param  string $fund the fund code against which the material is encumbered and paid (required)
     * @param  string $vendor the library-defined code for the vendor who handles the order (required)
     * @param   $marc the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     * @param  int $copies the number of copies ordered (optional)
     * @param  double $price the estimated price per copy (optional)
     * @param  string $acquisitionType the library-defined acquisition type code or the method of paying for the material (optional)
     * @param  string $claim the claiming activity code (optional)
     * @param  string $code1 the library-defined order code 1 (optional)
     * @param  string $code2 the library-defined order code 2 (optional)
     * @param  string $code3 the library-defined order code 3 (optional)
     * @param  string $code4 the library-defined order code 4 (optional)
     * @param  string $format a code representing the physical form of the material (any hash mark symbols &#39;#&#39; must be URL encoded (optional)
     * @param  string $orderNote a code representing an order note to print on the purchase order form (optional)
     * @param  string $orderType a code representing the type of order (optional)
     * @param  string $raction a code representing the receiving action (optional)
     * @param  string $rloc a code representing the receiving location (optional)
     * @param  string $bloc a code representing the billing location (optional)
     * @param  string $status a system-generated code representing that financial encumbering or disencumbering status of a record (optional)
     * @param  string $tloc a code representing a temporary shelving location (optional)
     * @param  string $odate the date the material was ordered, in the format mm-dd-yy (optional)
     * @param  string $language the language of the material, based on the MARC 21 Code List for Languages (also used by UNIMARC format) (optional)
     * @param  string $country the country of publication, based on the MARC 21 Code List of Countries, or ISO 3166/MA standard for UNIMARC systems (optional)
     * @param  string $note a code representing the note that prints on the purchase order form (repeatable parameter) (optional)
     * @param  string $staffNote a free-text internal (staff) note (repeatable parameter) (optional)
     * @param  string $vendorNote a free-text note for vendor order information (repeatable parameter) (optional)
     * @param  string $vendorIDNumber the vendor&#39;s identification number for this title (repeatable parameter) (optional)
     * @param  string $volume the number of volumes for this title (optional)
     * @param  string $selector a free text note identifying the selector of the item (repeatable parameter) (optional)
     * @param  string $vendorAccount the vendor account number (repeatable parameter) (optional)
     * @param  string $currencyCode the foreign currency code (optional)
     * @param  string $identity a free text note, used to distinguish between order records (repeatable parameter) (optional)
     * @param  string $shipTo the library address to which the vendor should ship materials (repeatable parameter) (optional)
     * @param  string $requestor the requestor (repeatable parameter) (optional)
     * @param  string $oldOrderNumber the old order number (repeatable parameter) (optional)
     * @param  string $paidNote the paid note (repeatable parameter) (optional)
     * @param  string $vendorAddress the vendor address (repeatable parameter) (optional)
     * @param  string $customVarField1 custom var field 1 (repeatable parameter) (optional)
     * @param  string $customVarField2 custom var field 2 (repeatable parameter) (optional)
     * @param  string $customVarField3 custom var field 3 (repeatable parameter) (optional)
     * @param  string $customVarField4 custom var field 4 (repeatable parameter) (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\OrderBibLinks, HTTP status code, HTTP response headers (array of strings)
     */
    public function createANewAcquisitionWithHttpInfo($login, $location, $fund, $vendor, $marc, $copies = null, $price = null, $acquisitionType = null, $claim = null, $code1 = null, $code2 = null, $code3 = null, $code4 = null, $format = null, $orderNote = null, $orderType = null, $raction = null, $rloc = null, $bloc = null, $status = null, $tloc = null, $odate = null, $language = null, $country = null, $note = null, $staffNote = null, $vendorNote = null, $vendorIDNumber = null, $volume = null, $selector = null, $vendorAccount = null, $currencyCode = null, $identity = null, $shipTo = null, $requestor = null, $oldOrderNumber = null, $paidNote = null, $vendorAddress = null, $customVarField1 = null, $customVarField2 = null, $customVarField3 = null, $customVarField4 = null)
    {
        $returnType = '\III\Sierra\V4\Models\OrderBibLinks';
        $request = $this->createANewAcquisitionRequest($login, $location, $fund, $vendor, $marc, $copies, $price, $acquisitionType, $claim, $code1, $code2, $code3, $code4, $format, $orderNote, $orderType, $raction, $rloc, $bloc, $status, $tloc, $odate, $language, $country, $note, $staffNote, $vendorNote, $vendorIDNumber, $volume, $selector, $vendorAccount, $currencyCode, $identity, $shipTo, $requestor, $oldOrderNumber, $paidNote, $vendorAddress, $customVarField1, $customVarField2, $customVarField3, $customVarField4);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\OrderBibLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createANewAcquisitionAsync
     *
     * Create a new acquisition
     *
     * @param  string $login the Sierra username to associate with created orders (required)
     * @param  string $location the shelving location or branch for which the order is placed (required)
     * @param  string $fund the fund code against which the material is encumbered and paid (required)
     * @param  string $vendor the library-defined code for the vendor who handles the order (required)
     * @param   $marc the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     * @param  int $copies the number of copies ordered (optional)
     * @param  double $price the estimated price per copy (optional)
     * @param  string $acquisitionType the library-defined acquisition type code or the method of paying for the material (optional)
     * @param  string $claim the claiming activity code (optional)
     * @param  string $code1 the library-defined order code 1 (optional)
     * @param  string $code2 the library-defined order code 2 (optional)
     * @param  string $code3 the library-defined order code 3 (optional)
     * @param  string $code4 the library-defined order code 4 (optional)
     * @param  string $format a code representing the physical form of the material (any hash mark symbols &#39;#&#39; must be URL encoded (optional)
     * @param  string $orderNote a code representing an order note to print on the purchase order form (optional)
     * @param  string $orderType a code representing the type of order (optional)
     * @param  string $raction a code representing the receiving action (optional)
     * @param  string $rloc a code representing the receiving location (optional)
     * @param  string $bloc a code representing the billing location (optional)
     * @param  string $status a system-generated code representing that financial encumbering or disencumbering status of a record (optional)
     * @param  string $tloc a code representing a temporary shelving location (optional)
     * @param  string $odate the date the material was ordered, in the format mm-dd-yy (optional)
     * @param  string $language the language of the material, based on the MARC 21 Code List for Languages (also used by UNIMARC format) (optional)
     * @param  string $country the country of publication, based on the MARC 21 Code List of Countries, or ISO 3166/MA standard for UNIMARC systems (optional)
     * @param  string $note a code representing the note that prints on the purchase order form (repeatable parameter) (optional)
     * @param  string $staffNote a free-text internal (staff) note (repeatable parameter) (optional)
     * @param  string $vendorNote a free-text note for vendor order information (repeatable parameter) (optional)
     * @param  string $vendorIDNumber the vendor&#39;s identification number for this title (repeatable parameter) (optional)
     * @param  string $volume the number of volumes for this title (optional)
     * @param  string $selector a free text note identifying the selector of the item (repeatable parameter) (optional)
     * @param  string $vendorAccount the vendor account number (repeatable parameter) (optional)
     * @param  string $currencyCode the foreign currency code (optional)
     * @param  string $identity a free text note, used to distinguish between order records (repeatable parameter) (optional)
     * @param  string $shipTo the library address to which the vendor should ship materials (repeatable parameter) (optional)
     * @param  string $requestor the requestor (repeatable parameter) (optional)
     * @param  string $oldOrderNumber the old order number (repeatable parameter) (optional)
     * @param  string $paidNote the paid note (repeatable parameter) (optional)
     * @param  string $vendorAddress the vendor address (repeatable parameter) (optional)
     * @param  string $customVarField1 custom var field 1 (repeatable parameter) (optional)
     * @param  string $customVarField2 custom var field 2 (repeatable parameter) (optional)
     * @param  string $customVarField3 custom var field 3 (repeatable parameter) (optional)
     * @param  string $customVarField4 custom var field 4 (repeatable parameter) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createANewAcquisitionAsync($login, $location, $fund, $vendor, $marc, $copies = null, $price = null, $acquisitionType = null, $claim = null, $code1 = null, $code2 = null, $code3 = null, $code4 = null, $format = null, $orderNote = null, $orderType = null, $raction = null, $rloc = null, $bloc = null, $status = null, $tloc = null, $odate = null, $language = null, $country = null, $note = null, $staffNote = null, $vendorNote = null, $vendorIDNumber = null, $volume = null, $selector = null, $vendorAccount = null, $currencyCode = null, $identity = null, $shipTo = null, $requestor = null, $oldOrderNumber = null, $paidNote = null, $vendorAddress = null, $customVarField1 = null, $customVarField2 = null, $customVarField3 = null, $customVarField4 = null)
    {
        return $this->createANewAcquisitionAsyncWithHttpInfo($login, $location, $fund, $vendor, $marc, $copies, $price, $acquisitionType, $claim, $code1, $code2, $code3, $code4, $format, $orderNote, $orderType, $raction, $rloc, $bloc, $status, $tloc, $odate, $language, $country, $note, $staffNote, $vendorNote, $vendorIDNumber, $volume, $selector, $vendorAccount, $currencyCode, $identity, $shipTo, $requestor, $oldOrderNumber, $paidNote, $vendorAddress, $customVarField1, $customVarField2, $customVarField3, $customVarField4)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createANewAcquisitionAsyncWithHttpInfo
     *
     * Create a new acquisition
     *
     * @param  string $login the Sierra username to associate with created orders (required)
     * @param  string $location the shelving location or branch for which the order is placed (required)
     * @param  string $fund the fund code against which the material is encumbered and paid (required)
     * @param  string $vendor the library-defined code for the vendor who handles the order (required)
     * @param   $marc the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     * @param  int $copies the number of copies ordered (optional)
     * @param  double $price the estimated price per copy (optional)
     * @param  string $acquisitionType the library-defined acquisition type code or the method of paying for the material (optional)
     * @param  string $claim the claiming activity code (optional)
     * @param  string $code1 the library-defined order code 1 (optional)
     * @param  string $code2 the library-defined order code 2 (optional)
     * @param  string $code3 the library-defined order code 3 (optional)
     * @param  string $code4 the library-defined order code 4 (optional)
     * @param  string $format a code representing the physical form of the material (any hash mark symbols &#39;#&#39; must be URL encoded (optional)
     * @param  string $orderNote a code representing an order note to print on the purchase order form (optional)
     * @param  string $orderType a code representing the type of order (optional)
     * @param  string $raction a code representing the receiving action (optional)
     * @param  string $rloc a code representing the receiving location (optional)
     * @param  string $bloc a code representing the billing location (optional)
     * @param  string $status a system-generated code representing that financial encumbering or disencumbering status of a record (optional)
     * @param  string $tloc a code representing a temporary shelving location (optional)
     * @param  string $odate the date the material was ordered, in the format mm-dd-yy (optional)
     * @param  string $language the language of the material, based on the MARC 21 Code List for Languages (also used by UNIMARC format) (optional)
     * @param  string $country the country of publication, based on the MARC 21 Code List of Countries, or ISO 3166/MA standard for UNIMARC systems (optional)
     * @param  string $note a code representing the note that prints on the purchase order form (repeatable parameter) (optional)
     * @param  string $staffNote a free-text internal (staff) note (repeatable parameter) (optional)
     * @param  string $vendorNote a free-text note for vendor order information (repeatable parameter) (optional)
     * @param  string $vendorIDNumber the vendor&#39;s identification number for this title (repeatable parameter) (optional)
     * @param  string $volume the number of volumes for this title (optional)
     * @param  string $selector a free text note identifying the selector of the item (repeatable parameter) (optional)
     * @param  string $vendorAccount the vendor account number (repeatable parameter) (optional)
     * @param  string $currencyCode the foreign currency code (optional)
     * @param  string $identity a free text note, used to distinguish between order records (repeatable parameter) (optional)
     * @param  string $shipTo the library address to which the vendor should ship materials (repeatable parameter) (optional)
     * @param  string $requestor the requestor (repeatable parameter) (optional)
     * @param  string $oldOrderNumber the old order number (repeatable parameter) (optional)
     * @param  string $paidNote the paid note (repeatable parameter) (optional)
     * @param  string $vendorAddress the vendor address (repeatable parameter) (optional)
     * @param  string $customVarField1 custom var field 1 (repeatable parameter) (optional)
     * @param  string $customVarField2 custom var field 2 (repeatable parameter) (optional)
     * @param  string $customVarField3 custom var field 3 (repeatable parameter) (optional)
     * @param  string $customVarField4 custom var field 4 (repeatable parameter) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createANewAcquisitionAsyncWithHttpInfo($login, $location, $fund, $vendor, $marc, $copies = null, $price = null, $acquisitionType = null, $claim = null, $code1 = null, $code2 = null, $code3 = null, $code4 = null, $format = null, $orderNote = null, $orderType = null, $raction = null, $rloc = null, $bloc = null, $status = null, $tloc = null, $odate = null, $language = null, $country = null, $note = null, $staffNote = null, $vendorNote = null, $vendorIDNumber = null, $volume = null, $selector = null, $vendorAccount = null, $currencyCode = null, $identity = null, $shipTo = null, $requestor = null, $oldOrderNumber = null, $paidNote = null, $vendorAddress = null, $customVarField1 = null, $customVarField2 = null, $customVarField3 = null, $customVarField4 = null)
    {
        $returnType = '\III\Sierra\V4\Models\OrderBibLinks';
        $request = $this->createANewAcquisitionRequest($login, $location, $fund, $vendor, $marc, $copies, $price, $acquisitionType, $claim, $code1, $code2, $code3, $code4, $format, $orderNote, $orderType, $raction, $rloc, $bloc, $status, $tloc, $odate, $language, $country, $note, $staffNote, $vendorNote, $vendorIDNumber, $volume, $selector, $vendorAccount, $currencyCode, $identity, $shipTo, $requestor, $oldOrderNumber, $paidNote, $vendorAddress, $customVarField1, $customVarField2, $customVarField3, $customVarField4);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createANewAcquisition'
     *
     * @param  string $login the Sierra username to associate with created orders (required)
     * @param  string $location the shelving location or branch for which the order is placed (required)
     * @param  string $fund the fund code against which the material is encumbered and paid (required)
     * @param  string $vendor the library-defined code for the vendor who handles the order (required)
     * @param   $marc the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     * @param  int $copies the number of copies ordered (optional)
     * @param  double $price the estimated price per copy (optional)
     * @param  string $acquisitionType the library-defined acquisition type code or the method of paying for the material (optional)
     * @param  string $claim the claiming activity code (optional)
     * @param  string $code1 the library-defined order code 1 (optional)
     * @param  string $code2 the library-defined order code 2 (optional)
     * @param  string $code3 the library-defined order code 3 (optional)
     * @param  string $code4 the library-defined order code 4 (optional)
     * @param  string $format a code representing the physical form of the material (any hash mark symbols &#39;#&#39; must be URL encoded (optional)
     * @param  string $orderNote a code representing an order note to print on the purchase order form (optional)
     * @param  string $orderType a code representing the type of order (optional)
     * @param  string $raction a code representing the receiving action (optional)
     * @param  string $rloc a code representing the receiving location (optional)
     * @param  string $bloc a code representing the billing location (optional)
     * @param  string $status a system-generated code representing that financial encumbering or disencumbering status of a record (optional)
     * @param  string $tloc a code representing a temporary shelving location (optional)
     * @param  string $odate the date the material was ordered, in the format mm-dd-yy (optional)
     * @param  string $language the language of the material, based on the MARC 21 Code List for Languages (also used by UNIMARC format) (optional)
     * @param  string $country the country of publication, based on the MARC 21 Code List of Countries, or ISO 3166/MA standard for UNIMARC systems (optional)
     * @param  string $note a code representing the note that prints on the purchase order form (repeatable parameter) (optional)
     * @param  string $staffNote a free-text internal (staff) note (repeatable parameter) (optional)
     * @param  string $vendorNote a free-text note for vendor order information (repeatable parameter) (optional)
     * @param  string $vendorIDNumber the vendor&#39;s identification number for this title (repeatable parameter) (optional)
     * @param  string $volume the number of volumes for this title (optional)
     * @param  string $selector a free text note identifying the selector of the item (repeatable parameter) (optional)
     * @param  string $vendorAccount the vendor account number (repeatable parameter) (optional)
     * @param  string $currencyCode the foreign currency code (optional)
     * @param  string $identity a free text note, used to distinguish between order records (repeatable parameter) (optional)
     * @param  string $shipTo the library address to which the vendor should ship materials (repeatable parameter) (optional)
     * @param  string $requestor the requestor (repeatable parameter) (optional)
     * @param  string $oldOrderNumber the old order number (repeatable parameter) (optional)
     * @param  string $paidNote the paid note (repeatable parameter) (optional)
     * @param  string $vendorAddress the vendor address (repeatable parameter) (optional)
     * @param  string $customVarField1 custom var field 1 (repeatable parameter) (optional)
     * @param  string $customVarField2 custom var field 2 (repeatable parameter) (optional)
     * @param  string $customVarField3 custom var field 3 (repeatable parameter) (optional)
     * @param  string $customVarField4 custom var field 4 (repeatable parameter) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createANewAcquisitionRequest($login, $location, $fund, $vendor, $marc, $copies = null, $price = null, $acquisitionType = null, $claim = null, $code1 = null, $code2 = null, $code3 = null, $code4 = null, $format = null, $orderNote = null, $orderType = null, $raction = null, $rloc = null, $bloc = null, $status = null, $tloc = null, $odate = null, $language = null, $country = null, $note = null, $staffNote = null, $vendorNote = null, $vendorIDNumber = null, $volume = null, $selector = null, $vendorAccount = null, $currencyCode = null, $identity = null, $shipTo = null, $requestor = null, $oldOrderNumber = null, $paidNote = null, $vendorAddress = null, $customVarField1 = null, $customVarField2 = null, $customVarField3 = null, $customVarField4 = null)
    {
        // verify the required parameter 'login' is set
        if ($login === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $login when calling createANewAcquisition'
            );
        }
        // verify the required parameter 'location' is set
        if ($location === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $location when calling createANewAcquisition'
            );
        }
        // verify the required parameter 'fund' is set
        if ($fund === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fund when calling createANewAcquisition'
            );
        }
        // verify the required parameter 'vendor' is set
        if ($vendor === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vendor when calling createANewAcquisition'
            );
        }
        // verify the required parameter 'marc' is set
        if ($marc === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marc when calling createANewAcquisition'
            );
        }

        $resourcePath = '/v4/acquisitions/orders/classic';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($login !== null) {
            $queryParams['login'] = ObjectSerializer::toQueryValue($login);
        }
        // query params
        if ($location !== null) {
            $queryParams['location'] = ObjectSerializer::toQueryValue($location);
        }
        // query params
        if ($fund !== null) {
            $queryParams['fund'] = ObjectSerializer::toQueryValue($fund);
        }
        // query params
        if ($vendor !== null) {
            $queryParams['vendor'] = ObjectSerializer::toQueryValue($vendor);
        }
        // query params
        if ($copies !== null) {
            $queryParams['copies'] = ObjectSerializer::toQueryValue($copies);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }
        // query params
        if ($acquisitionType !== null) {
            $queryParams['acquisitionType'] = ObjectSerializer::toQueryValue($acquisitionType);
        }
        // query params
        if ($claim !== null) {
            $queryParams['claim'] = ObjectSerializer::toQueryValue($claim);
        }
        // query params
        if ($code1 !== null) {
            $queryParams['code1'] = ObjectSerializer::toQueryValue($code1);
        }
        // query params
        if ($code2 !== null) {
            $queryParams['code2'] = ObjectSerializer::toQueryValue($code2);
        }
        // query params
        if ($code3 !== null) {
            $queryParams['code3'] = ObjectSerializer::toQueryValue($code3);
        }
        // query params
        if ($code4 !== null) {
            $queryParams['code4'] = ObjectSerializer::toQueryValue($code4);
        }
        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($orderNote !== null) {
            $queryParams['orderNote'] = ObjectSerializer::toQueryValue($orderNote);
        }
        // query params
        if ($orderType !== null) {
            $queryParams['orderType'] = ObjectSerializer::toQueryValue($orderType);
        }
        // query params
        if ($raction !== null) {
            $queryParams['raction'] = ObjectSerializer::toQueryValue($raction);
        }
        // query params
        if ($rloc !== null) {
            $queryParams['rloc'] = ObjectSerializer::toQueryValue($rloc);
        }
        // query params
        if ($bloc !== null) {
            $queryParams['bloc'] = ObjectSerializer::toQueryValue($bloc);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($tloc !== null) {
            $queryParams['tloc'] = ObjectSerializer::toQueryValue($tloc);
        }
        // query params
        if ($odate !== null) {
            $queryParams['odate'] = ObjectSerializer::toQueryValue($odate);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($note !== null) {
            $queryParams['note'] = ObjectSerializer::toQueryValue($note);
        }
        // query params
        if ($staffNote !== null) {
            $queryParams['staffNote'] = ObjectSerializer::toQueryValue($staffNote);
        }
        // query params
        if ($vendorNote !== null) {
            $queryParams['vendorNote'] = ObjectSerializer::toQueryValue($vendorNote);
        }
        // query params
        if ($vendorIDNumber !== null) {
            $queryParams['vendorIDNumber'] = ObjectSerializer::toQueryValue($vendorIDNumber);
        }
        // query params
        if ($volume !== null) {
            $queryParams['volume'] = ObjectSerializer::toQueryValue($volume);
        }
        // query params
        if ($selector !== null) {
            $queryParams['selector'] = ObjectSerializer::toQueryValue($selector);
        }
        // query params
        if ($vendorAccount !== null) {
            $queryParams['vendorAccount'] = ObjectSerializer::toQueryValue($vendorAccount);
        }
        // query params
        if ($currencyCode !== null) {
            $queryParams['currencyCode'] = ObjectSerializer::toQueryValue($currencyCode);
        }
        // query params
        if ($identity !== null) {
            $queryParams['identity'] = ObjectSerializer::toQueryValue($identity);
        }
        // query params
        if ($shipTo !== null) {
            $queryParams['shipTo'] = ObjectSerializer::toQueryValue($shipTo);
        }
        // query params
        if ($requestor !== null) {
            $queryParams['requestor'] = ObjectSerializer::toQueryValue($requestor);
        }
        // query params
        if ($oldOrderNumber !== null) {
            $queryParams['oldOrderNumber'] = ObjectSerializer::toQueryValue($oldOrderNumber);
        }
        // query params
        if ($paidNote !== null) {
            $queryParams['paidNote'] = ObjectSerializer::toQueryValue($paidNote);
        }
        // query params
        if ($vendorAddress !== null) {
            $queryParams['vendorAddress'] = ObjectSerializer::toQueryValue($vendorAddress);
        }
        // query params
        if ($customVarField1 !== null) {
            $queryParams['customVarField1'] = ObjectSerializer::toQueryValue($customVarField1);
        }
        // query params
        if ($customVarField2 !== null) {
            $queryParams['customVarField2'] = ObjectSerializer::toQueryValue($customVarField2);
        }
        // query params
        if ($customVarField3 !== null) {
            $queryParams['customVarField3'] = ObjectSerializer::toQueryValue($customVarField3);
        }
        // query params
        if ($customVarField4 !== null) {
            $queryParams['customVarField4'] = ObjectSerializer::toQueryValue($customVarField4);
        }


        // body params
        $_tempBody = null;
        if (isset($marc)) {
            $_tempBody = $marc;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/marc-json', 'application/marc-xml', 'application/marc-in-json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createANewAcquisition_0
     *
     * Create a new acquisition
     *
     * @param  \III\Sierra\V4\Models\AcquisitionOrderPost $acquisitionOrderPost the order information and the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\OrderBibLinks
     */
    public function createANewAcquisition_0($acquisitionOrderPost)
    {
        list($response) = $this->createANewAcquisition_0WithHttpInfo($acquisitionOrderPost);
        return $response;
    }

    /**
     * Operation createANewAcquisition_0WithHttpInfo
     *
     * Create a new acquisition
     *
     * @param  \III\Sierra\V4\Models\AcquisitionOrderPost $acquisitionOrderPost the order information and the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\OrderBibLinks, HTTP status code, HTTP response headers (array of strings)
     */
    public function createANewAcquisition_0WithHttpInfo($acquisitionOrderPost)
    {
        $returnType = '\III\Sierra\V4\Models\OrderBibLinks';
        $request = $this->createANewAcquisition_0Request($acquisitionOrderPost);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\OrderBibLinks',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createANewAcquisition_0Async
     *
     * Create a new acquisition
     *
     * @param  \III\Sierra\V4\Models\AcquisitionOrderPost $acquisitionOrderPost the order information and the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createANewAcquisition_0Async($acquisitionOrderPost)
    {
        return $this->createANewAcquisition_0AsyncWithHttpInfo($acquisitionOrderPost)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createANewAcquisition_0AsyncWithHttpInfo
     *
     * Create a new acquisition
     *
     * @param  \III\Sierra\V4\Models\AcquisitionOrderPost $acquisitionOrderPost the order information and the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createANewAcquisition_0AsyncWithHttpInfo($acquisitionOrderPost)
    {
        $returnType = '\III\Sierra\V4\Models\OrderBibLinks';
        $request = $this->createANewAcquisition_0Request($acquisitionOrderPost);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createANewAcquisition_0'
     *
     * @param  \III\Sierra\V4\Models\AcquisitionOrderPost $acquisitionOrderPost the order information and the MARC records in: application/marc-json, application/marc-in-json or application/marc-xml (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createANewAcquisition_0Request($acquisitionOrderPost)
    {
        // verify the required parameter 'acquisitionOrderPost' is set
        if ($acquisitionOrderPost === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acquisitionOrderPost when calling createANewAcquisition_0'
            );
        }

        $resourcePath = '/v4/acquisitions/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($acquisitionOrderPost)) {
            $_tempBody = $acquisitionOrderPost;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateTheOrderData
     *
     * Validate the order data
     *
     * @param  \III\Sierra\V4\Models\AcquisitionOrder $acquisitionOrderPost the order information (required)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\ErrorCode
     */
    public function validateTheOrderData($acquisitionOrderPost)
    {
        list($response) = $this->validateTheOrderDataWithHttpInfo($acquisitionOrderPost);
        return $response;
    }

    /**
     * Operation validateTheOrderDataWithHttpInfo
     *
     * Validate the order data
     *
     * @param  \III\Sierra\V4\Models\AcquisitionOrder $acquisitionOrderPost the order information (required)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateTheOrderDataWithHttpInfo($acquisitionOrderPost)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->validateTheOrderDataRequest($acquisitionOrderPost);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()->getBody()->getContents()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateTheOrderDataAsync
     *
     * Validate the order data
     *
     * @param  \III\Sierra\V4\Models\AcquisitionOrder $acquisitionOrderPost the order information (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTheOrderDataAsync($acquisitionOrderPost)
    {
        return $this->validateTheOrderDataAsyncWithHttpInfo($acquisitionOrderPost)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateTheOrderDataAsyncWithHttpInfo
     *
     * Validate the order data
     *
     * @param  \III\Sierra\V4\Models\AcquisitionOrder $acquisitionOrderPost the order information (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTheOrderDataAsyncWithHttpInfo($acquisitionOrderPost)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->validateTheOrderDataRequest($acquisitionOrderPost);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateTheOrderData'
     *
     * @param  \III\Sierra\V4\Models\AcquisitionOrder $acquisitionOrderPost the order information (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateTheOrderDataRequest($acquisitionOrderPost)
    {
        // verify the required parameter 'acquisitionOrderPost' is set
        if ($acquisitionOrderPost === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $acquisitionOrderPost when calling validateTheOrderData'
            );
        }

        $resourcePath = '/v4/acquisitions/orders/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($acquisitionOrderPost)) {
            $_tempBody = $acquisitionOrderPost;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
