<?php
/**
 * V4patronsApi
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\V4\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use III\Sierra\V4\ApiException;
use III\Sierra\V4\Configuration;
use III\Sierra\V4\HeaderSelector;
use III\Sierra\V4\ObjectSerializer;

/**
 * V4patronsApi Class Doc Comment
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V4patronsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelAllHoldsForTheSpecifiedPatron
     *
     * Cancel all holds for the specified patron
     *
     * @param  int $id the patron record ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\ErrorCode
     */
    public function cancelAllHoldsForTheSpecifiedPatron($id, $acceptLanguage = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->cancelAllHoldsForTheSpecifiedPatronWithHttpInfo($id, $acceptLanguage);
        return $response;
    }

    /**
     * Operation cancelAllHoldsForTheSpecifiedPatronWithHttpInfo
     *
     * Cancel all holds for the specified patron
     *
     * @param  int $id the patron record ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelAllHoldsForTheSpecifiedPatronWithHttpInfo($id, $acceptLanguage = null)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->cancelAllHoldsForTheSpecifiedPatronRequest($id, $acceptLanguage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelAllHoldsForTheSpecifiedPatronAsync
     *
     * Cancel all holds for the specified patron
     *
     * @param  int $id the patron record ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAllHoldsForTheSpecifiedPatronAsync($id, $acceptLanguage = null)
    {
        return $this->cancelAllHoldsForTheSpecifiedPatronAsyncWithHttpInfo($id, $acceptLanguage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelAllHoldsForTheSpecifiedPatronAsyncWithHttpInfo
     *
     * Cancel all holds for the specified patron
     *
     * @param  int $id the patron record ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAllHoldsForTheSpecifiedPatronAsyncWithHttpInfo($id, $acceptLanguage = null)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->cancelAllHoldsForTheSpecifiedPatronRequest($id, $acceptLanguage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelAllHoldsForTheSpecifiedPatron'
     *
     * @param  int $id the patron record ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelAllHoldsForTheSpecifiedPatronRequest($id, $acceptLanguage = null, array $headers=[])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cancelAllHoldsForTheSpecifiedPatron'
            );
        }

        $resourcePath = '/v4/patrons/{id}/holds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAPatronRecord
     *
     * Create a patron record
     *
     * @param  \III\Sierra\V4\Models\PatronPatch $body post request (required)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\PatronResult
     */
    public function createAPatronRecord($body, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->createAPatronRecordWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createAPatronRecordWithHttpInfo
     *
     * Create a patron record
     *
     * @param  \III\Sierra\V4\Models\PatronPatch $body post request (required)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\PatronResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAPatronRecordWithHttpInfo($body)
    {
        $returnType = '\III\Sierra\V4\Models\PatronResult';
        $request = $this->createAPatronRecordRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\PatronResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAPatronRecordAsync
     *
     * Create a patron record
     *
     * @param  \III\Sierra\V4\Models\PatronPatch $body post request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAPatronRecordAsync($body)
    {
        return $this->createAPatronRecordAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAPatronRecordAsyncWithHttpInfo
     *
     * Create a patron record
     *
     * @param  \III\Sierra\V4\Models\PatronPatch $body post request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAPatronRecordAsyncWithHttpInfo($body)
    {
        $returnType = '\III\Sierra\V4\Models\PatronResult';
        $request = $this->createAPatronRecordRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAPatronRecord'
     *
     * @param  \III\Sierra\V4\Models\PatronPatch $body post request (required)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAPatronRecordRequest($body, array $headers=[])
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAPatronRecord'
            );
        }

        $resourcePath = '/v4/patrons/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAHoldByHoldID
     *
     * Delete a hold by hold ID
     *
     * @param  int $holdId the hold record ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\ErrorCode
     */
    public function deleteAHoldByHoldID($holdId, $acceptLanguage = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->deleteAHoldByHoldIDWithHttpInfo($holdId, $acceptLanguage);
        return $response;
    }

    /**
     * Operation deleteAHoldByHoldIDWithHttpInfo
     *
     * Delete a hold by hold ID
     *
     * @param  int $holdId the hold record ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAHoldByHoldIDWithHttpInfo($holdId, $acceptLanguage = null)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->deleteAHoldByHoldIDRequest($holdId, $acceptLanguage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAHoldByHoldIDAsync
     *
     * Delete a hold by hold ID
     *
     * @param  int $holdId the hold record ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAHoldByHoldIDAsync($holdId, $acceptLanguage = null)
    {
        return $this->deleteAHoldByHoldIDAsyncWithHttpInfo($holdId, $acceptLanguage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAHoldByHoldIDAsyncWithHttpInfo
     *
     * Delete a hold by hold ID
     *
     * @param  int $holdId the hold record ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAHoldByHoldIDAsyncWithHttpInfo($holdId, $acceptLanguage = null)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->deleteAHoldByHoldIDRequest($holdId, $acceptLanguage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAHoldByHoldID'
     *
     * @param  int $holdId the hold record ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAHoldByHoldIDRequest($holdId, $acceptLanguage = null, array $headers=[])
    {
        // verify the required parameter 'holdId' is set
        if ($holdId === null || (is_array($holdId) && count($holdId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $holdId when calling deleteAHoldByHoldID'
            );
        }

        $resourcePath = '/v4/patrons/holds/{holdId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }

        // path params
        if ($holdId !== null) {
            $resourcePath = str_replace(
                '{' . 'holdId' . '}',
                ObjectSerializer::toPathValue($holdId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAPatronRecord
     *
     * Delete a patron record
     *
     * @param  int $id the patron record ID (required)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\ErrorCode
     */
    public function deleteAPatronRecord($id, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->deleteAPatronRecordWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteAPatronRecordWithHttpInfo
     *
     * Delete a patron record
     *
     * @param  int $id the patron record ID (required)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAPatronRecordWithHttpInfo($id)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->deleteAPatronRecordRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAPatronRecordAsync
     *
     * Delete a patron record
     *
     * @param  int $id the patron record ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAPatronRecordAsync($id)
    {
        return $this->deleteAPatronRecordAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAPatronRecordAsyncWithHttpInfo
     *
     * Delete a patron record
     *
     * @param  int $id the patron record ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAPatronRecordAsyncWithHttpInfo($id)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->deleteAPatronRecordRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAPatronRecord'
     *
     * @param  int $id the patron record ID (required)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAPatronRecordRequest($id, array $headers=[])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAPatronRecord'
            );
        }

        $resourcePath = '/v4/patrons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filterTheRecordsByAQueryInJSONFormat
     *
     * Filter the records by a query in JSON format
     *
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param  int $limit the maximum number of results (required)
     * @param   $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\QueryResultSet
     */
    public function filterTheRecordsByAQueryInJSONFormat($offset, $limit, $json, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->filterTheRecordsByAQueryInJSONFormatWithHttpInfo($offset, $limit, $json);
        return $response;
    }

    /**
     * Operation filterTheRecordsByAQueryInJSONFormatWithHttpInfo
     *
     * Filter the records by a query in JSON format
     *
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param  int $limit the maximum number of results (required)
     * @param   $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\QueryResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function filterTheRecordsByAQueryInJSONFormatWithHttpInfo($offset, $limit, $json)
    {
        $returnType = '\III\Sierra\V4\Models\QueryResultSet';
        $request = $this->filterTheRecordsByAQueryInJSONFormatRequest($offset, $limit, $json);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\QueryResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filterTheRecordsByAQueryInJSONFormatAsync
     *
     * Filter the records by a query in JSON format
     *
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param  int $limit the maximum number of results (required)
     * @param   $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filterTheRecordsByAQueryInJSONFormatAsync($offset, $limit, $json)
    {
        return $this->filterTheRecordsByAQueryInJSONFormatAsyncWithHttpInfo($offset, $limit, $json)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filterTheRecordsByAQueryInJSONFormatAsyncWithHttpInfo
     *
     * Filter the records by a query in JSON format
     *
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param  int $limit the maximum number of results (required)
     * @param   $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filterTheRecordsByAQueryInJSONFormatAsyncWithHttpInfo($offset, $limit, $json)
    {
        $returnType = '\III\Sierra\V4\Models\QueryResultSet';
        $request = $this->filterTheRecordsByAQueryInJSONFormatRequest($offset, $limit, $json);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filterTheRecordsByAQueryInJSONFormat'
     *
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (required)
     * @param  int $limit the maximum number of results (required)
     * @param   $json a query in JSON format (see the Sierra API reference documentation for more information) (required)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function filterTheRecordsByAQueryInJSONFormatRequest($offset, $limit, $json, array $headers=[])
    {
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling filterTheRecordsByAQueryInJSONFormat'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling filterTheRecordsByAQueryInJSONFormat'
            );
        }
        // verify the required parameter 'json' is set
        if ($json === null || (is_array($json) && count($json) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $json when calling filterTheRecordsByAQueryInJSONFormat'
            );
        }

        $resourcePath = '/v4/patrons/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;
        if (isset($json)) {
            $_tempBody = $json;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getACheckoutByCheckoutID
     *
     * Get a checkout by checkout ID
     *
     * @param  int $checkoutId the checkout record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\Checkout
     */
    public function getACheckoutByCheckoutID($checkoutId, $fields = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getACheckoutByCheckoutIDWithHttpInfo($checkoutId, $fields);
        return $response;
    }

    /**
     * Operation getACheckoutByCheckoutIDWithHttpInfo
     *
     * Get a checkout by checkout ID
     *
     * @param  int $checkoutId the checkout record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\Checkout, HTTP status code, HTTP response headers (array of strings)
     */
    public function getACheckoutByCheckoutIDWithHttpInfo($checkoutId, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\Checkout';
        $request = $this->getACheckoutByCheckoutIDRequest($checkoutId, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\Checkout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getACheckoutByCheckoutIDAsync
     *
     * Get a checkout by checkout ID
     *
     * @param  int $checkoutId the checkout record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getACheckoutByCheckoutIDAsync($checkoutId, $fields = null)
    {
        return $this->getACheckoutByCheckoutIDAsyncWithHttpInfo($checkoutId, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getACheckoutByCheckoutIDAsyncWithHttpInfo
     *
     * Get a checkout by checkout ID
     *
     * @param  int $checkoutId the checkout record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getACheckoutByCheckoutIDAsyncWithHttpInfo($checkoutId, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\Checkout';
        $request = $this->getACheckoutByCheckoutIDRequest($checkoutId, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getACheckoutByCheckoutID'
     *
     * @param  int $checkoutId the checkout record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getACheckoutByCheckoutIDRequest($checkoutId, $fields = null, array $headers=[])
    {
        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling getACheckoutByCheckoutID'
            );
        }

        $resourcePath = '/v4/patrons/checkouts/{checkoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAFineRecordByFineID
     *
     * Get a fine record by fine ID
     *
     * @param  int $fineId the fine record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\Fine
     */
    public function getAFineRecordByFineID($fineId, $fields = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getAFineRecordByFineIDWithHttpInfo($fineId, $fields);
        return $response;
    }

    /**
     * Operation getAFineRecordByFineIDWithHttpInfo
     *
     * Get a fine record by fine ID
     *
     * @param  int $fineId the fine record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\Fine, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAFineRecordByFineIDWithHttpInfo($fineId, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\Fine';
        $request = $this->getAFineRecordByFineIDRequest($fineId, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\Fine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAFineRecordByFineIDAsync
     *
     * Get a fine record by fine ID
     *
     * @param  int $fineId the fine record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAFineRecordByFineIDAsync($fineId, $fields = null)
    {
        return $this->getAFineRecordByFineIDAsyncWithHttpInfo($fineId, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAFineRecordByFineIDAsyncWithHttpInfo
     *
     * Get a fine record by fine ID
     *
     * @param  int $fineId the fine record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAFineRecordByFineIDAsyncWithHttpInfo($fineId, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\Fine';
        $request = $this->getAFineRecordByFineIDRequest($fineId, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAFineRecordByFineID'
     *
     * @param  int $fineId the fine record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAFineRecordByFineIDRequest($fineId, $fields = null, array $headers=[])
    {
        // verify the required parameter 'fineId' is set
        if ($fineId === null || (is_array($fineId) && count($fineId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fineId when calling getAFineRecordByFineID'
            );
        }

        $resourcePath = '/v4/patrons/fines/{fineId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($fineId !== null) {
            $resourcePath = str_replace(
                '{' . 'fineId' . '}',
                ObjectSerializer::toPathValue($fineId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAHoldRecordByHoldID
     *
     * Get a hold record by hold ID
     *
     * @param  int $holdId the hold record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\Hold
     */
    public function getAHoldRecordByHoldID($holdId, $fields = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getAHoldRecordByHoldIDWithHttpInfo($holdId, $fields);
        return $response;
    }

    /**
     * Operation getAHoldRecordByHoldIDWithHttpInfo
     *
     * Get a hold record by hold ID
     *
     * @param  int $holdId the hold record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\Hold, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAHoldRecordByHoldIDWithHttpInfo($holdId, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\Hold';
        $request = $this->getAHoldRecordByHoldIDRequest($holdId, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\Hold',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAHoldRecordByHoldIDAsync
     *
     * Get a hold record by hold ID
     *
     * @param  int $holdId the hold record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAHoldRecordByHoldIDAsync($holdId, $fields = null)
    {
        return $this->getAHoldRecordByHoldIDAsyncWithHttpInfo($holdId, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAHoldRecordByHoldIDAsyncWithHttpInfo
     *
     * Get a hold record by hold ID
     *
     * @param  int $holdId the hold record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAHoldRecordByHoldIDAsyncWithHttpInfo($holdId, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\Hold';
        $request = $this->getAHoldRecordByHoldIDRequest($holdId, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAHoldRecordByHoldID'
     *
     * @param  int $holdId the hold record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAHoldRecordByHoldIDRequest($holdId, $fields = null, array $headers=[])
    {
        // verify the required parameter 'holdId' is set
        if ($holdId === null || (is_array($holdId) && count($holdId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $holdId when calling getAHoldRecordByHoldID'
            );
        }

        $resourcePath = '/v4/patrons/holds/{holdId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($holdId !== null) {
            $resourcePath = str_replace(
                '{' . 'holdId' . '}',
                ObjectSerializer::toPathValue($holdId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAListOfPatrons
     *
     * Get a list of patrons
     *
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $createdDate the creation date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $updatedDate the modification date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $deletedDate the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param  bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param  bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\PatronResultSet
     */
    public function getAListOfPatrons($limit = null, $offset = null, $id = null, $fields = null, $createdDate = null, $updatedDate = null, $deletedDate = null, $deleted = null, $suppressed = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getAListOfPatronsWithHttpInfo($limit, $offset, $id, $fields, $createdDate, $updatedDate, $deletedDate, $deleted, $suppressed);
        return $response;
    }

    /**
     * Operation getAListOfPatronsWithHttpInfo
     *
     * Get a list of patrons
     *
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $createdDate the creation date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $updatedDate the modification date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $deletedDate the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param  bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param  bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\PatronResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAListOfPatronsWithHttpInfo($limit = null, $offset = null, $id = null, $fields = null, $createdDate = null, $updatedDate = null, $deletedDate = null, $deleted = null, $suppressed = null)
    {
        $returnType = '\III\Sierra\V4\Models\PatronResultSet';
        $request = $this->getAListOfPatronsRequest($limit, $offset, $id, $fields, $createdDate, $updatedDate, $deletedDate, $deleted, $suppressed);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\PatronResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAListOfPatronsAsync
     *
     * Get a list of patrons
     *
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $createdDate the creation date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $updatedDate the modification date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $deletedDate the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param  bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param  bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfPatronsAsync($limit = null, $offset = null, $id = null, $fields = null, $createdDate = null, $updatedDate = null, $deletedDate = null, $deleted = null, $suppressed = null)
    {
        return $this->getAListOfPatronsAsyncWithHttpInfo($limit, $offset, $id, $fields, $createdDate, $updatedDate, $deletedDate, $deleted, $suppressed)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAListOfPatronsAsyncWithHttpInfo
     *
     * Get a list of patrons
     *
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $createdDate the creation date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $updatedDate the modification date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $deletedDate the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param  bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param  bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfPatronsAsyncWithHttpInfo($limit = null, $offset = null, $id = null, $fields = null, $createdDate = null, $updatedDate = null, $deletedDate = null, $deleted = null, $suppressed = null)
    {
        $returnType = '\III\Sierra\V4\Models\PatronResultSet';
        $request = $this->getAListOfPatronsRequest($limit, $offset, $id, $fields, $createdDate, $updatedDate, $deletedDate, $deleted, $suppressed);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAListOfPatrons'
     *
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $id a comma-delimited list of IDs of patron records to retrieve (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  \DateTime $createdDate the creation date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $updatedDate the modification date of patron records to retrieve (can be a range) (optional)
     * @param  \DateTime $deletedDate the deletion date of deleted patron records to retrieve (can be a range) (optional)
     * @param  bool $deleted whether to retrieve only deleted (true) or non-deleted (false) patron records (optional)
     * @param  bool $suppressed the suppressed flag value of patron records to retrieve (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAListOfPatronsRequest($limit = null, $offset = null, $id = null, $fields = null, $createdDate = null, $updatedDate = null, $deletedDate = null, $deleted = null, $suppressed = null, array $headers=[])
    {

        $resourcePath = '/v4/patrons/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($id)) {
            $id = ObjectSerializer::serializeCollection($id, 'csv', true);
        }
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($createdDate !== null) {
            $queryParams['createdDate'] = ObjectSerializer::toQueryValue($createdDate);
        }
        // query params
        if ($updatedDate !== null) {
            $queryParams['updatedDate'] = ObjectSerializer::toQueryValue($updatedDate);
        }
        // query params
        if ($deletedDate !== null) {
            $queryParams['deletedDate'] = ObjectSerializer::toQueryValue($deletedDate);
        }
        // query params
        if ($deleted !== null) {
            $queryParams['deleted'] = ObjectSerializer::toQueryValue($deleted);
        }
        // query params
        if ($suppressed !== null) {
            $queryParams['suppressed'] = ObjectSerializer::toQueryValue($suppressed);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAPatronByBarcode
     *
     * Get a patron by barcode
     *
     * @param  string $barcode the patron barcode (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\Patron
     */
    public function getAPatronByBarcode($barcode, $fields = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getAPatronByBarcodeWithHttpInfo($barcode, $fields);
        return $response;
    }

    /**
     * Operation getAPatronByBarcodeWithHttpInfo
     *
     * Get a patron by barcode
     *
     * @param  string $barcode the patron barcode (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\Patron, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAPatronByBarcodeWithHttpInfo($barcode, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\Patron';
        $request = $this->getAPatronByBarcodeRequest($barcode, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\Patron',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAPatronByBarcodeAsync
     *
     * Get a patron by barcode
     *
     * @param  string $barcode the patron barcode (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAPatronByBarcodeAsync($barcode, $fields = null)
    {
        return $this->getAPatronByBarcodeAsyncWithHttpInfo($barcode, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAPatronByBarcodeAsyncWithHttpInfo
     *
     * Get a patron by barcode
     *
     * @param  string $barcode the patron barcode (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAPatronByBarcodeAsyncWithHttpInfo($barcode, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\Patron';
        $request = $this->getAPatronByBarcodeRequest($barcode, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAPatronByBarcode'
     *
     * @param  string $barcode the patron barcode (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAPatronByBarcodeRequest($barcode, $fields = null, array $headers=[])
    {
        // verify the required parameter 'barcode' is set
        if ($barcode === null || (is_array($barcode) && count($barcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $barcode when calling getAPatronByBarcode'
            );
        }

        $resourcePath = '/v4/patrons/find';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($barcode !== null) {
            $queryParams['barcode'] = ObjectSerializer::toQueryValue($barcode);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAPatronByRecordID
     *
     * Get a patron by record ID
     *
     * @param  int $id the patron record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\Patron
     */
    public function getAPatronByRecordID($id, $fields = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getAPatronByRecordIDWithHttpInfo($id, $fields);
        return $response;
    }

    /**
     * Operation getAPatronByRecordIDWithHttpInfo
     *
     * Get a patron by record ID
     *
     * @param  int $id the patron record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\Patron, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAPatronByRecordIDWithHttpInfo($id, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\Patron';
        $request = $this->getAPatronByRecordIDRequest($id, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\Patron',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAPatronByRecordIDAsync
     *
     * Get a patron by record ID
     *
     * @param  int $id the patron record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAPatronByRecordIDAsync($id, $fields = null)
    {
        return $this->getAPatronByRecordIDAsyncWithHttpInfo($id, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAPatronByRecordIDAsyncWithHttpInfo
     *
     * Get a patron by record ID
     *
     * @param  int $id the patron record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAPatronByRecordIDAsyncWithHttpInfo($id, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\Patron';
        $request = $this->getAPatronByRecordIDRequest($id, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAPatronByRecordID'
     *
     * @param  int $id the patron record ID (required)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAPatronByRecordIDRequest($id, $fields = null, array $headers=[])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAPatronByRecordID'
            );
        }

        $resourcePath = '/v4/patrons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckoutDataForASinglePatronRecord
     *
     * Get checkout data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\CheckoutResultSet
     */
    public function getCheckoutDataForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getCheckoutDataForASinglePatronRecordWithHttpInfo($id, $limit, $offset, $fields);
        return $response;
    }

    /**
     * Operation getCheckoutDataForASinglePatronRecordWithHttpInfo
     *
     * Get checkout data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\CheckoutResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckoutDataForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\CheckoutResultSet';
        $request = $this->getCheckoutDataForASinglePatronRecordRequest($id, $limit, $offset, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\CheckoutResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckoutDataForASinglePatronRecordAsync
     *
     * Get checkout data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckoutDataForASinglePatronRecordAsync($id, $limit = null, $offset = null, $fields = null)
    {
        return $this->getCheckoutDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit, $offset, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckoutDataForASinglePatronRecordAsyncWithHttpInfo
     *
     * Get checkout data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckoutDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\CheckoutResultSet';
        $request = $this->getCheckoutDataForASinglePatronRecordRequest($id, $limit, $offset, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckoutDataForASinglePatronRecord'
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCheckoutDataForASinglePatronRecordRequest($id, $limit = null, $offset = null, $fields = null, array $headers=[])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCheckoutDataForASinglePatronRecord'
            );
        }

        $resourcePath = '/v4/patrons/{id}/checkouts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCheckoutreadHistoryForASinglePatronRecord
     *
     * Get checkout/read history for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  string $sortField a field to sort on (optional)
     * @param  string $sortOrder the order to sort by desc or asc (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\CheckoutHistoryResultSet
     */
    public function getCheckoutreadHistoryForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null, $sortField = null, $sortOrder = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getCheckoutreadHistoryForASinglePatronRecordWithHttpInfo($id, $limit, $offset, $fields, $sortField, $sortOrder);
        return $response;
    }

    /**
     * Operation getCheckoutreadHistoryForASinglePatronRecordWithHttpInfo
     *
     * Get checkout/read history for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  string $sortField a field to sort on (optional)
     * @param  string $sortOrder the order to sort by desc or asc (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\CheckoutHistoryResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCheckoutreadHistoryForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null, $sortField = null, $sortOrder = null)
    {
        $returnType = '\III\Sierra\V4\Models\CheckoutHistoryResultSet';
        $request = $this->getCheckoutreadHistoryForASinglePatronRecordRequest($id, $limit, $offset, $fields, $sortField, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\CheckoutHistoryResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCheckoutreadHistoryForASinglePatronRecordAsync
     *
     * Get checkout/read history for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  string $sortField a field to sort on (optional)
     * @param  string $sortOrder the order to sort by desc or asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckoutreadHistoryForASinglePatronRecordAsync($id, $limit = null, $offset = null, $fields = null, $sortField = null, $sortOrder = null)
    {
        return $this->getCheckoutreadHistoryForASinglePatronRecordAsyncWithHttpInfo($id, $limit, $offset, $fields, $sortField, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCheckoutreadHistoryForASinglePatronRecordAsyncWithHttpInfo
     *
     * Get checkout/read history for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  string $sortField a field to sort on (optional)
     * @param  string $sortOrder the order to sort by desc or asc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCheckoutreadHistoryForASinglePatronRecordAsyncWithHttpInfo($id, $limit = null, $offset = null, $fields = null, $sortField = null, $sortOrder = null)
    {
        $returnType = '\III\Sierra\V4\Models\CheckoutHistoryResultSet';
        $request = $this->getCheckoutreadHistoryForASinglePatronRecordRequest($id, $limit, $offset, $fields, $sortField, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCheckoutreadHistoryForASinglePatronRecord'
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param  string $sortField a field to sort on (optional)
     * @param  string $sortOrder the order to sort by desc or asc (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCheckoutreadHistoryForASinglePatronRecordRequest($id, $limit = null, $offset = null, $fields = null, $sortField = null, $sortOrder = null, array $headers=[])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCheckoutreadHistoryForASinglePatronRecord'
            );
        }

        $resourcePath = '/v4/patrons/{id}/checkouts/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($sortField !== null) {
            $queryParams['sortField'] = ObjectSerializer::toQueryValue($sortField);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMetadataList
     *
     * get metadata list
     *
     * @param  string $fields list of comma separated metadata fields (optional)
     * @param  string $language an ISO 639-1 language code (default is en) (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\Metadata[]
     */
    public function getMetadataList($fields = null, $language = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getMetadataListWithHttpInfo($fields, $language);
        return $response;
    }

    /**
     * Operation getMetadataListWithHttpInfo
     *
     * get metadata list
     *
     * @param  string $fields list of comma separated metadata fields (optional)
     * @param  string $language an ISO 639-1 language code (default is en) (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\Metadata[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMetadataListWithHttpInfo($fields = null, $language = null)
    {
        $returnType = '\III\Sierra\V4\Models\Metadata[]';
        $request = $this->getMetadataListRequest($fields, $language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\Metadata[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMetadataListAsync
     *
     * get metadata list
     *
     * @param  string $fields list of comma separated metadata fields (optional)
     * @param  string $language an ISO 639-1 language code (default is en) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetadataListAsync($fields = null, $language = null)
    {
        return $this->getMetadataListAsyncWithHttpInfo($fields, $language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMetadataListAsyncWithHttpInfo
     *
     * get metadata list
     *
     * @param  string $fields list of comma separated metadata fields (optional)
     * @param  string $language an ISO 639-1 language code (default is en) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMetadataListAsyncWithHttpInfo($fields = null, $language = null)
    {
        $returnType = '\III\Sierra\V4\Models\Metadata[]';
        $request = $this->getMetadataListRequest($fields, $language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMetadataList'
     *
     * @param  string $fields list of comma separated metadata fields (optional)
     * @param  string $language an ISO 639-1 language code (default is en) (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMetadataListRequest($fields = null, $language = null, array $headers=[])
    {

        $resourcePath = '/v4/patrons/metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTheFinesDataForASinglePatronRecord
     *
     * Get the fines data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\FineResultSet
     */
    public function getTheFinesDataForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getTheFinesDataForASinglePatronRecordWithHttpInfo($id, $limit, $offset, $fields);
        return $response;
    }

    /**
     * Operation getTheFinesDataForASinglePatronRecordWithHttpInfo
     *
     * Get the fines data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\FineResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTheFinesDataForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\FineResultSet';
        $request = $this->getTheFinesDataForASinglePatronRecordRequest($id, $limit, $offset, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\FineResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTheFinesDataForASinglePatronRecordAsync
     *
     * Get the fines data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTheFinesDataForASinglePatronRecordAsync($id, $limit = null, $offset = null, $fields = null)
    {
        return $this->getTheFinesDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit, $offset, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTheFinesDataForASinglePatronRecordAsyncWithHttpInfo
     *
     * Get the fines data for a single patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTheFinesDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\FineResultSet';
        $request = $this->getTheFinesDataForASinglePatronRecordRequest($id, $limit, $offset, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTheFinesDataForASinglePatronRecord'
     *
     * @param  int $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTheFinesDataForASinglePatronRecordRequest($id, $limit = null, $offset = null, $fields = null, array $headers=[])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTheFinesDataForASinglePatronRecord'
            );
        }

        $resourcePath = '/v4/patrons/{id}/fines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTheHoldsDataForASinglePatronRecord
     *
     * Get the holds data for a single patron record
     *
     * @param  string $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\HoldResultSet
     */
    public function getTheHoldsDataForASinglePatronRecord($id, $limit = null, $offset = null, $fields = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->getTheHoldsDataForASinglePatronRecordWithHttpInfo($id, $limit, $offset, $fields);
        return $response;
    }

    /**
     * Operation getTheHoldsDataForASinglePatronRecordWithHttpInfo
     *
     * Get the holds data for a single patron record
     *
     * @param  string $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\HoldResultSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTheHoldsDataForASinglePatronRecordWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\HoldResultSet';
        $request = $this->getTheHoldsDataForASinglePatronRecordRequest($id, $limit, $offset, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\HoldResultSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTheHoldsDataForASinglePatronRecordAsync
     *
     * Get the holds data for a single patron record
     *
     * @param  string $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTheHoldsDataForASinglePatronRecordAsync($id, $limit = null, $offset = null, $fields = null)
    {
        return $this->getTheHoldsDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit, $offset, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTheHoldsDataForASinglePatronRecordAsyncWithHttpInfo
     *
     * Get the holds data for a single patron record
     *
     * @param  string $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTheHoldsDataForASinglePatronRecordAsyncWithHttpInfo($id, $limit = null, $offset = null, $fields = null)
    {
        $returnType = '\III\Sierra\V4\Models\HoldResultSet';
        $request = $this->getTheHoldsDataForASinglePatronRecordRequest($id, $limit, $offset, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTheHoldsDataForASinglePatronRecord'
     *
     * @param  string $id the patron record ID (required)
     * @param  int $limit the maximum number of results (optional)
     * @param  int $offset the beginning record (zero-indexed) of the result set returned (optional)
     * @param  string[] $fields a comma-delimited list of fields to retrieve (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTheHoldsDataForASinglePatronRecordRequest($id, $limit = null, $offset = null, $fields = null, array $headers=[])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getTheHoldsDataForASinglePatronRecord'
            );
        }

        $resourcePath = '/v4/patrons/{id}/holds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // query params
        if (is_array($fields)) {
            $fields = ObjectSerializer::serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyAHold
     *
     * Modify a hold
     *
     * @param  int $holdId the hold record ID (required)
     * @param  \III\Sierra\V4\Models\PatronHoldPut $body the details of the hold (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\ErrorCode
     */
    public function modifyAHold($holdId, $body, $acceptLanguage = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->modifyAHoldWithHttpInfo($holdId, $body, $acceptLanguage);
        return $response;
    }

    /**
     * Operation modifyAHoldWithHttpInfo
     *
     * Modify a hold
     *
     * @param  int $holdId the hold record ID (required)
     * @param  \III\Sierra\V4\Models\PatronHoldPut $body the details of the hold (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyAHoldWithHttpInfo($holdId, $body, $acceptLanguage = null)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->modifyAHoldRequest($holdId, $body, $acceptLanguage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modifyAHoldAsync
     *
     * Modify a hold
     *
     * @param  int $holdId the hold record ID (required)
     * @param  \III\Sierra\V4\Models\PatronHoldPut $body the details of the hold (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyAHoldAsync($holdId, $body, $acceptLanguage = null)
    {
        return $this->modifyAHoldAsyncWithHttpInfo($holdId, $body, $acceptLanguage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyAHoldAsyncWithHttpInfo
     *
     * Modify a hold
     *
     * @param  int $holdId the hold record ID (required)
     * @param  \III\Sierra\V4\Models\PatronHoldPut $body the details of the hold (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyAHoldAsyncWithHttpInfo($holdId, $body, $acceptLanguage = null)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->modifyAHoldRequest($holdId, $body, $acceptLanguage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyAHold'
     *
     * @param  int $holdId the hold record ID (required)
     * @param  \III\Sierra\V4\Models\PatronHoldPut $body the details of the hold (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modifyAHoldRequest($holdId, $body, $acceptLanguage = null, array $headers=[])
    {
        // verify the required parameter 'holdId' is set
        if ($holdId === null || (is_array($holdId) && count($holdId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $holdId when calling modifyAHold'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling modifyAHold'
            );
        }

        $resourcePath = '/v4/patrons/holds/{holdId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }

        // path params
        if ($holdId !== null) {
            $resourcePath = str_replace(
                '{' . 'holdId' . '}',
                ObjectSerializer::toPathValue($holdId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation placeANewHoldRequest
     *
     * Place a new hold request
     *
     * @param  int $id the patron record ID (required)
     * @param  \III\Sierra\V4\Models\PatronHoldPost $body details of the new hold (required)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\ErrorCode
     */
    public function placeANewHoldRequest($id, $body, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->placeANewHoldRequestWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation placeANewHoldRequestWithHttpInfo
     *
     * Place a new hold request
     *
     * @param  int $id the patron record ID (required)
     * @param  \III\Sierra\V4\Models\PatronHoldPost $body details of the new hold (required)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function placeANewHoldRequestWithHttpInfo($id, $body)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->placeANewHoldRequestRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation placeANewHoldRequestAsync
     *
     * Place a new hold request
     *
     * @param  int $id the patron record ID (required)
     * @param  \III\Sierra\V4\Models\PatronHoldPost $body details of the new hold (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function placeANewHoldRequestAsync($id, $body)
    {
        return $this->placeANewHoldRequestAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation placeANewHoldRequestAsyncWithHttpInfo
     *
     * Place a new hold request
     *
     * @param  int $id the patron record ID (required)
     * @param  \III\Sierra\V4\Models\PatronHoldPost $body details of the new hold (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function placeANewHoldRequestAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->placeANewHoldRequestRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'placeANewHoldRequest'
     *
     * @param  int $id the patron record ID (required)
     * @param  \III\Sierra\V4\Models\PatronHoldPost $body details of the new hold (required)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function placeANewHoldRequestRequest($id, $body, array $headers=[])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling placeANewHoldRequest'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling placeANewHoldRequest'
            );
        }

        $resourcePath = '/v4/patrons/{id}/holds/requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestToRenewACheckout
     *
     * Request to renew a checkout
     *
     * @param  int $checkoutId the checkout ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\Checkout
     */
    public function requestToRenewACheckout($checkoutId, $acceptLanguage = null, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->requestToRenewACheckoutWithHttpInfo($checkoutId, $acceptLanguage);
        return $response;
    }

    /**
     * Operation requestToRenewACheckoutWithHttpInfo
     *
     * Request to renew a checkout
     *
     * @param  int $checkoutId the checkout ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\Checkout, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestToRenewACheckoutWithHttpInfo($checkoutId, $acceptLanguage = null)
    {
        $returnType = '\III\Sierra\V4\Models\Checkout';
        $request = $this->requestToRenewACheckoutRequest($checkoutId, $acceptLanguage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\Checkout',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation requestToRenewACheckoutAsync
     *
     * Request to renew a checkout
     *
     * @param  int $checkoutId the checkout ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestToRenewACheckoutAsync($checkoutId, $acceptLanguage = null)
    {
        return $this->requestToRenewACheckoutAsyncWithHttpInfo($checkoutId, $acceptLanguage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestToRenewACheckoutAsyncWithHttpInfo
     *
     * Request to renew a checkout
     *
     * @param  int $checkoutId the checkout ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestToRenewACheckoutAsyncWithHttpInfo($checkoutId, $acceptLanguage = null)
    {
        $returnType = '\III\Sierra\V4\Models\Checkout';
        $request = $this->requestToRenewACheckoutRequest($checkoutId, $acceptLanguage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestToRenewACheckout'
     *
     * @param  int $checkoutId the checkout ID (required)
     * @param  string $acceptLanguage the Accept-Language header (optional)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function requestToRenewACheckoutRequest($checkoutId, $acceptLanguage = null, array $headers=[])
    {
        // verify the required parameter 'checkoutId' is set
        if ($checkoutId === null || (is_array($checkoutId) && count($checkoutId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkoutId when calling requestToRenewACheckout'
            );
        }

        $resourcePath = '/v4/patrons/checkouts/{checkoutId}/renewal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }

        // path params
        if ($checkoutId !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkoutId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateThePatronRecord
     *
     * Update the Patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  \III\Sierra\V4\Models\PatronPatch $body patron request (required)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\ErrorCode
     */
    public function updateThePatronRecord($id, $body, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->updateThePatronRecordWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation updateThePatronRecordWithHttpInfo
     *
     * Update the Patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  \III\Sierra\V4\Models\PatronPatch $body patron request (required)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateThePatronRecordWithHttpInfo($id, $body)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->updateThePatronRecordRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateThePatronRecordAsync
     *
     * Update the Patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  \III\Sierra\V4\Models\PatronPatch $body patron request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThePatronRecordAsync($id, $body)
    {
        return $this->updateThePatronRecordAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateThePatronRecordAsyncWithHttpInfo
     *
     * Update the Patron record
     *
     * @param  int $id the patron record ID (required)
     * @param  \III\Sierra\V4\Models\PatronPatch $body patron request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateThePatronRecordAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->updateThePatronRecordRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateThePatronRecord'
     *
     * @param  int $id the patron record ID (required)
     * @param  \III\Sierra\V4\Models\PatronPatch $body patron request (required)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateThePatronRecordRequest($id, $body, array $headers=[])
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateThePatronRecord'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateThePatronRecord'
            );
        }

        $resourcePath = '/v4/patrons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validatePatronByBarcodeAndPIN
     *
     * Validate patron by barcode and PIN
     *
     * @param  \III\Sierra\V4\Models\PatronValidation $body post request (required)
     * @param string $acceptHeaderMimeType Optional accept header mime type
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \III\Sierra\V4\Models\ErrorCode
     */
    public function validatePatronByBarcodeAndPIN($body, $acceptHeaderMimeType='')
    {
        $this->headerSelector->setAcceptHeaderMimeType($acceptHeaderMimeType);
        list($response) = $this->validatePatronByBarcodeAndPINWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation validatePatronByBarcodeAndPINWithHttpInfo
     *
     * Validate patron by barcode and PIN
     *
     * @param  \III\Sierra\V4\Models\PatronValidation $body post request (required)
     *
     * @throws \III\Sierra\V4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \III\Sierra\V4\Models\ErrorCode, HTTP status code, HTTP response headers (array of strings)
     */
    public function validatePatronByBarcodeAndPINWithHttpInfo($body)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->validatePatronByBarcodeAndPINRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\III\Sierra\V4\Models\ErrorCode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validatePatronByBarcodeAndPINAsync
     *
     * Validate patron by barcode and PIN
     *
     * @param  \III\Sierra\V4\Models\PatronValidation $body post request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validatePatronByBarcodeAndPINAsync($body)
    {
        return $this->validatePatronByBarcodeAndPINAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validatePatronByBarcodeAndPINAsyncWithHttpInfo
     *
     * Validate patron by barcode and PIN
     *
     * @param  \III\Sierra\V4\Models\PatronValidation $body post request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validatePatronByBarcodeAndPINAsyncWithHttpInfo($body)
    {
        $returnType = '\III\Sierra\V4\Models\ErrorCode';
        $request = $this->validatePatronByBarcodeAndPINRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validatePatronByBarcodeAndPIN'
     *
     * @param  \III\Sierra\V4\Models\PatronValidation $body post request (required)
     * @param string[] headers any special headers to set - overrides default headers
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validatePatronByBarcodeAndPINRequest($body, array $headers=[])
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling validatePatronByBarcodeAndPIN'
            );
        }

        $resourcePath = '/v4/patrons/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
