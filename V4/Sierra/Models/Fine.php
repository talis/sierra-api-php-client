<?php
/**
 * Fine
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * Fine Class Doc Comment
 *
 * @category    Class
 * @description a patron fine
 * @package     III\Sierra\V4
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Fine implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'patron' => 'string',
        'item' => 'string',
        'assessedDate' => '\DateTime',
        'description' => 'string',
        'invoiceNumber' => 'int',
        'chargeType' => '\Models\ChargeType',
        'itemCharge' => 'double',
        'processingFee' => 'double',
        'billingFee' => 'double',
        'paidAmount' => 'double',
        'location' => '\Models\Location'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'patron' => 'patron',
        'item' => 'item',
        'assessedDate' => 'assessedDate',
        'description' => 'description',
        'invoiceNumber' => 'invoiceNumber',
        'chargeType' => 'chargeType',
        'itemCharge' => 'itemCharge',
        'processingFee' => 'processingFee',
        'billingFee' => 'billingFee',
        'paidAmount' => 'paidAmount',
        'location' => 'location'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'patron' => 'setPatron',
        'item' => 'setItem',
        'assessedDate' => 'setAssessedDate',
        'description' => 'setDescription',
        'invoiceNumber' => 'setInvoiceNumber',
        'chargeType' => 'setChargeType',
        'itemCharge' => 'setItemCharge',
        'processingFee' => 'setProcessingFee',
        'billingFee' => 'setBillingFee',
        'paidAmount' => 'setPaidAmount',
        'location' => 'setLocation'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'patron' => 'getPatron',
        'item' => 'getItem',
        'assessedDate' => 'getAssessedDate',
        'description' => 'getDescription',
        'invoiceNumber' => 'getInvoiceNumber',
        'chargeType' => 'getChargeType',
        'itemCharge' => 'getItemCharge',
        'processingFee' => 'getProcessingFee',
        'billingFee' => 'getBillingFee',
        'paidAmount' => 'getPaidAmount',
        'location' => 'getLocation'
    );
  
    
    /**
      * $id the ID of the fine
      * @var string
      */
    protected $id;
    
    /**
      * $patron the patron record number associated with the fine
      * @var string
      */
    protected $patron;
    
    /**
      * $item the item record number associated with the fine
      * @var string
      */
    protected $item;
    
    /**
      * $assessedDate the date the fine was assessed, in ISO 8601 format (yyyy-MM-dd)
      * @var \DateTime
      */
    protected $assessedDate;
    
    /**
      * $description the reason for the charge
      * @var string
      */
    protected $description;
    
    /**
      * $invoiceNumber the fine's invoice number
      * @var int
      */
    protected $invoiceNumber;
    
    /**
      * $chargeType the code representing the type of charge assessed
      * @var \Models\ChargeType
      */
    protected $chargeType;
    
    /**
      * $itemCharge a fine amount related to the item (the exact meaning depends on the charge code)
      * @var double
      */
    protected $itemCharge;
    
    /**
      * $processingFee a processing fee amount (the exact meaning depends on the charge code)
      * @var double
      */
    protected $processingFee;
    
    /**
      * $billingFee a billing fee amount (the exact meaning depends on the charge code)
      * @var double
      */
    protected $billingFee;
    
    /**
      * $paidAmount the amount already paid for this fine
      * @var double
      */
    protected $paidAmount;
    
    /**
      * $location the charge location
      * @var \Models\Location
      */
    protected $location;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->patron = $data["patron"];
            $this->item = $data["item"];
            $this->assessedDate = $data["assessedDate"];
            $this->description = $data["description"];
            $this->invoiceNumber = $data["invoiceNumber"];
            $this->chargeType = $data["chargeType"];
            $this->itemCharge = $data["itemCharge"];
            $this->processingFee = $data["processingFee"];
            $this->billingFee = $data["billingFee"];
            $this->paidAmount = $data["paidAmount"];
            $this->location = $data["location"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id the ID of the fine
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets patron
     * @return string
     */
    public function getPatron()
    {
        return $this->patron;
    }
  
    /**
     * Sets patron
     * @param string $patron the patron record number associated with the fine
     * @return $this
     */
    public function setPatron($patron)
    {
        
        $this->patron = $patron;
        return $this;
    }
    
    /**
     * Gets item
     * @return string
     */
    public function getItem()
    {
        return $this->item;
    }
  
    /**
     * Sets item
     * @param string $item the item record number associated with the fine
     * @return $this
     */
    public function setItem($item)
    {
        
        $this->item = $item;
        return $this;
    }
    
    /**
     * Gets assessedDate
     * @return \DateTime
     */
    public function getAssessedDate()
    {
        return $this->assessedDate;
    }
  
    /**
     * Sets assessedDate
     * @param \DateTime $assessedDate the date the fine was assessed, in ISO 8601 format (yyyy-MM-dd)
     * @return $this
     */
    public function setAssessedDate($assessedDate)
    {
        
        $this->assessedDate = $assessedDate;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description the reason for the charge
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets invoiceNumber
     * @return int
     */
    public function getInvoiceNumber()
    {
        return $this->invoiceNumber;
    }
  
    /**
     * Sets invoiceNumber
     * @param int $invoiceNumber the fine's invoice number
     * @return $this
     */
    public function setInvoiceNumber($invoiceNumber)
    {
        
        $this->invoiceNumber = $invoiceNumber;
        return $this;
    }
    
    /**
     * Gets chargeType
     * @return \Models\ChargeType
     */
    public function getChargeType()
    {
        return $this->chargeType;
    }
  
    /**
     * Sets chargeType
     * @param \Models\ChargeType $chargeType the code representing the type of charge assessed
     * @return $this
     */
    public function setChargeType($chargeType)
    {
        
        $this->chargeType = $chargeType;
        return $this;
    }
    
    /**
     * Gets itemCharge
     * @return double
     */
    public function getItemCharge()
    {
        return $this->itemCharge;
    }
  
    /**
     * Sets itemCharge
     * @param double $itemCharge a fine amount related to the item (the exact meaning depends on the charge code)
     * @return $this
     */
    public function setItemCharge($itemCharge)
    {
        
        $this->itemCharge = $itemCharge;
        return $this;
    }
    
    /**
     * Gets processingFee
     * @return double
     */
    public function getProcessingFee()
    {
        return $this->processingFee;
    }
  
    /**
     * Sets processingFee
     * @param double $processingFee a processing fee amount (the exact meaning depends on the charge code)
     * @return $this
     */
    public function setProcessingFee($processingFee)
    {
        
        $this->processingFee = $processingFee;
        return $this;
    }
    
    /**
     * Gets billingFee
     * @return double
     */
    public function getBillingFee()
    {
        return $this->billingFee;
    }
  
    /**
     * Sets billingFee
     * @param double $billingFee a billing fee amount (the exact meaning depends on the charge code)
     * @return $this
     */
    public function setBillingFee($billingFee)
    {
        
        $this->billingFee = $billingFee;
        return $this;
    }
    
    /**
     * Gets paidAmount
     * @return double
     */
    public function getPaidAmount()
    {
        return $this->paidAmount;
    }
  
    /**
     * Sets paidAmount
     * @param double $paidAmount the amount already paid for this fine
     * @return $this
     */
    public function setPaidAmount($paidAmount)
    {
        
        $this->paidAmount = $paidAmount;
        return $this;
    }
    
    /**
     * Gets location
     * @return \Models\Location
     */
    public function getLocation()
    {
        return $this->location;
    }
  
    /**
     * Sets location
     * @param \Models\Location $location the charge location
     * @return $this
     */
    public function setLocation($location)
    {
        
        $this->location = $location;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
