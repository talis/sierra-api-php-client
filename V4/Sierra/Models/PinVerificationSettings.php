<?php
/**
 * PinVerificationSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * PinVerificationSettings Class Doc Comment
 *
 * @category    Class
 * @description the settings for PIN verification
 * @package     III\Sierra\V4
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PinVerificationSettings implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'minimumChars' => 'int',
        'maximumChars' => 'int',
        'numOnly' => 'bool',
        'mixed' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'minimumChars' => 'minimumChars',
        'maximumChars' => 'maximumChars',
        'numOnly' => 'numOnly',
        'mixed' => 'mixed'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'minimumChars' => 'setMinimumChars',
        'maximumChars' => 'setMaximumChars',
        'numOnly' => 'setNumOnly',
        'mixed' => 'setMixed'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'minimumChars' => 'getMinimumChars',
        'maximumChars' => 'getMaximumChars',
        'numOnly' => 'getNumOnly',
        'mixed' => 'getMixed'
    );
  
    
    /**
      * $minimumChars the minimum number of characters allowed for a PIN
      * @var int
      */
    protected $minimumChars;
    
    /**
      * $maximumChars the maximum number of characters allowed for a PIN
      * @var int
      */
    protected $maximumChars;
    
    /**
      * $numOnly whether the PIN must contain only numbers
      * @var bool
      */
    protected $numOnly;
    
    /**
      * $mixed whether the PIN must contain both numbers and letters
      * @var bool
      */
    protected $mixed;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->minimumChars = $data["minimumChars"];
            $this->maximumChars = $data["maximumChars"];
            $this->numOnly = $data["numOnly"];
            $this->mixed = $data["mixed"];
        }
    }
    
    /**
     * Gets minimumChars
     * @return int
     */
    public function getMinimumChars()
    {
        return $this->minimumChars;
    }
  
    /**
     * Sets minimumChars
     * @param int $minimumChars the minimum number of characters allowed for a PIN
     * @return $this
     */
    public function setMinimumChars($minimumChars)
    {
        
        $this->minimumChars = $minimumChars;
        return $this;
    }
    
    /**
     * Gets maximumChars
     * @return int
     */
    public function getMaximumChars()
    {
        return $this->maximumChars;
    }
  
    /**
     * Sets maximumChars
     * @param int $maximumChars the maximum number of characters allowed for a PIN
     * @return $this
     */
    public function setMaximumChars($maximumChars)
    {
        
        $this->maximumChars = $maximumChars;
        return $this;
    }
    
    /**
     * Gets numOnly
     * @return bool
     */
    public function getNumOnly()
    {
        return $this->numOnly;
    }
  
    /**
     * Sets numOnly
     * @param bool $numOnly whether the PIN must contain only numbers
     * @return $this
     */
    public function setNumOnly($numOnly)
    {
        
        $this->numOnly = $numOnly;
        return $this;
    }
    
    /**
     * Gets mixed
     * @return bool
     */
    public function getMixed()
    {
        return $this->mixed;
    }
  
    /**
     * Sets mixed
     * @param bool $mixed whether the PIN must contain both numbers and letters
     * @return $this
     */
    public function setMixed($mixed)
    {
        
        $this->mixed = $mixed;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
