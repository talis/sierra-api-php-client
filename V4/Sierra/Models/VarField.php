<?php
/**
 * VarField
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * VarField Class Doc Comment
 *
 * @category    Class
 * @description a variable-length field for a bibliographic record or item record
 * @package     III\Sierra\V4
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VarField implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'fieldTag' => '\Models\Char',
        'marcTag' => 'string',
        'ind1' => '\Models\Char',
        'ind2' => '\Models\Char',
        'content' => 'string',
        'subfields' => '\Models\SubField[]'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'fieldTag' => 'fieldTag',
        'marcTag' => 'marcTag',
        'ind1' => 'ind1',
        'ind2' => 'ind2',
        'content' => 'content',
        'subfields' => 'subfields'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'fieldTag' => 'setFieldTag',
        'marcTag' => 'setMarcTag',
        'ind1' => 'setInd1',
        'ind2' => 'setInd2',
        'content' => 'setContent',
        'subfields' => 'setSubfields'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'fieldTag' => 'getFieldTag',
        'marcTag' => 'getMarcTag',
        'ind1' => 'getInd1',
        'ind2' => 'getInd2',
        'content' => 'getContent',
        'subfields' => 'getSubfields'
    );
  
    
    /**
      * $fieldTag the Innovative variable-length field type tag
      * @var \Models\Char
      */
    protected $fieldTag;
    
    /**
      * $marcTag the MARC tag
      * @var string
      */
    protected $marcTag;
    
    /**
      * $ind1 the first MARC indicator, if present
      * @var \Models\Char
      */
    protected $ind1;
    
    /**
      * $ind2 the second MARC indicator, if present
      * @var \Models\Char
      */
    protected $ind2;
    
    /**
      * $content the field content for varfields with no subfields
      * @var string
      */
    protected $content;
    
    /**
      * $subfields a list of subfields, if present
      * @var \Models\SubField[]
      */
    protected $subfields;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->fieldTag = $data["fieldTag"];
            $this->marcTag = $data["marcTag"];
            $this->ind1 = $data["ind1"];
            $this->ind2 = $data["ind2"];
            $this->content = $data["content"];
            $this->subfields = $data["subfields"];
        }
    }
    
    /**
     * Gets fieldTag
     * @return \Models\Char
     */
    public function getFieldTag()
    {
        return $this->fieldTag;
    }
  
    /**
     * Sets fieldTag
     * @param \Models\Char $fieldTag the Innovative variable-length field type tag
     * @return $this
     */
    public function setFieldTag($fieldTag)
    {
        
        $this->fieldTag = $fieldTag;
        return $this;
    }
    
    /**
     * Gets marcTag
     * @return string
     */
    public function getMarcTag()
    {
        return $this->marcTag;
    }
  
    /**
     * Sets marcTag
     * @param string $marcTag the MARC tag
     * @return $this
     */
    public function setMarcTag($marcTag)
    {
        
        $this->marcTag = $marcTag;
        return $this;
    }
    
    /**
     * Gets ind1
     * @return \Models\Char
     */
    public function getInd1()
    {
        return $this->ind1;
    }
  
    /**
     * Sets ind1
     * @param \Models\Char $ind1 the first MARC indicator, if present
     * @return $this
     */
    public function setInd1($ind1)
    {
        
        $this->ind1 = $ind1;
        return $this;
    }
    
    /**
     * Gets ind2
     * @return \Models\Char
     */
    public function getInd2()
    {
        return $this->ind2;
    }
  
    /**
     * Sets ind2
     * @param \Models\Char $ind2 the second MARC indicator, if present
     * @return $this
     */
    public function setInd2($ind2)
    {
        
        $this->ind2 = $ind2;
        return $this;
    }
    
    /**
     * Gets content
     * @return string
     */
    public function getContent()
    {
        return $this->content;
    }
  
    /**
     * Sets content
     * @param string $content the field content for varfields with no subfields
     * @return $this
     */
    public function setContent($content)
    {
        
        $this->content = $content;
        return $this;
    }
    
    /**
     * Gets subfields
     * @return \Models\SubField[]
     */
    public function getSubfields()
    {
        return $this->subfields;
    }
  
    /**
     * Sets subfields
     * @param \Models\SubField[] $subfields a list of subfields, if present
     * @return $this
     */
    public function setSubfields($subfields)
    {
        
        $this->subfields = $subfields;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
