<?php
/**
 * TokenInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\V4\Models;

use \ArrayAccess;
use \III\Sierra\V4\ObjectSerializer;

/**
 * TokenInfo Class Doc Comment
 *
 * @category Class
 * @description the token information details
 * @package  III\Sierra\V4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokenInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TokenInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'patronId' => 'string',
        'keyId' => 'string',
        'grantType' => 'string',
        'authorizationScheme' => 'string',
        'expiresIn' => 'int',
        'roles' => '\III\Sierra\V4\Models\TokenInfoRole[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'patronId' => null,
        'keyId' => null,
        'grantType' => null,
        'authorizationScheme' => null,
        'expiresIn' => 'int64',
        'roles' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'patronId' => 'patronId',
        'keyId' => 'keyId',
        'grantType' => 'grantType',
        'authorizationScheme' => 'authorizationScheme',
        'expiresIn' => 'expiresIn',
        'roles' => 'roles'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'patronId' => 'setPatronId',
        'keyId' => 'setKeyId',
        'grantType' => 'setGrantType',
        'authorizationScheme' => 'setAuthorizationScheme',
        'expiresIn' => 'setExpiresIn',
        'roles' => 'setRoles'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'patronId' => 'getPatronId',
        'keyId' => 'getKeyId',
        'grantType' => 'getGrantType',
        'authorizationScheme' => 'getAuthorizationScheme',
        'expiresIn' => 'getExpiresIn',
        'roles' => 'getRoles'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['patronId'] = isset($data['patronId']) ? $data['patronId'] : null;
        $this->container['keyId'] = isset($data['keyId']) ? $data['keyId'] : null;
        $this->container['grantType'] = isset($data['grantType']) ? $data['grantType'] : null;
        $this->container['authorizationScheme'] = isset($data['authorizationScheme']) ? $data['authorizationScheme'] : null;
        $this->container['expiresIn'] = isset($data['expiresIn']) ? $data['expiresIn'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['keyId'] === null) {
            $invalidProperties[] = "'keyId' can't be null";
        }
        if ($this->container['authorizationScheme'] === null) {
            $invalidProperties[] = "'authorizationScheme' can't be null";
        }
        if ($this->container['expiresIn'] === null) {
            $invalidProperties[] = "'expiresIn' can't be null";
        }
        if ($this->container['roles'] === null) {
            $invalidProperties[] = "'roles' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['keyId'] === null) {
            return false;
        }
        if ($this->container['authorizationScheme'] === null) {
            return false;
        }
        if ($this->container['expiresIn'] === null) {
            return false;
        }
        if ($this->container['roles'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets patronId
     *
     * @return string
     */
    public function getPatronId()
    {
        return $this->container['patronId'];
    }

    /**
     * Sets patronId
     *
     * @param string $patronId the associated patron ID (applies only to authorization code grant sessions)
     *
     * @return $this
     */
    public function setPatronId($patronId)
    {
        $this->container['patronId'] = $patronId;

        return $this;
    }

    /**
     * Gets keyId
     *
     * @return string
     */
    public function getKeyId()
    {
        return $this->container['keyId'];
    }

    /**
     * Sets keyId
     *
     * @param string $keyId the key ID
     *
     * @return $this
     */
    public function setKeyId($keyId)
    {
        $this->container['keyId'] = $keyId;

        return $this;
    }

    /**
     * Gets grantType
     *
     * @return string
     */
    public function getGrantType()
    {
        return $this->container['grantType'];
    }

    /**
     * Sets grantType
     *
     * @param string $grantType the grant type, i.e., authorization code grant or client credentials grant
     *
     * @return $this
     */
    public function setGrantType($grantType)
    {
        $this->container['grantType'] = $grantType;

        return $this;
    }

    /**
     * Gets authorizationScheme
     *
     * @return string
     */
    public function getAuthorizationScheme()
    {
        return $this->container['authorizationScheme'];
    }

    /**
     * Sets authorizationScheme
     *
     * @param string $authorizationScheme the authorization scheme, such as 'Bearer' or 'Basic'
     *
     * @return $this
     */
    public function setAuthorizationScheme($authorizationScheme)
    {
        $this->container['authorizationScheme'] = $authorizationScheme;

        return $this;
    }

    /**
     * Gets expiresIn
     *
     * @return int
     */
    public function getExpiresIn()
    {
        return $this->container['expiresIn'];
    }

    /**
     * Sets expiresIn
     *
     * @param int $expiresIn the remaining time (in seconds) after which the token expires
     *
     * @return $this
     */
    public function setExpiresIn($expiresIn)
    {
        $this->container['expiresIn'] = $expiresIn;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \III\Sierra\V4\Models\TokenInfoRole[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \III\Sierra\V4\Models\TokenInfoRole[] $roles the user role associated with the token
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


