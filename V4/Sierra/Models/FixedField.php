<?php
/**
 * FixedField
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * FixedField Class Doc Comment
 *
 * @category    Class
 * @description a fixed-length field from a bibliographic record or item record
 * @package     III\Sierra\V4
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FixedField implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'label' => 'string',
        'value' => '\Models\FixedFieldVal',
        'display' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'label' => 'label',
        'value' => 'value',
        'display' => 'display'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'label' => 'setLabel',
        'value' => 'setValue',
        'display' => 'setDisplay'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'label' => 'getLabel',
        'value' => 'getValue',
        'display' => 'getDisplay'
    );
  
    
    /**
      * $label the customizable label for the field
      * @var string
      */
    protected $label;
    
    /**
      * $value the stored value of the field (can be a String, LocalDate, DateTime, Boolean, Long, or Decimal depending on the field)
      * @var \Models\FixedFieldVal
      */
    protected $value;
    
    /**
      * $display the display value of the field
      * @var string
      */
    protected $display;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->label = $data["label"];
            $this->value = $data["value"];
            $this->display = $data["display"];
        }
    }
    
    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->label;
    }
  
    /**
     * Sets label
     * @param string $label the customizable label for the field
     * @return $this
     */
    public function setLabel($label)
    {
        
        $this->label = $label;
        return $this;
    }
    
    /**
     * Gets value
     * @return \Models\FixedFieldVal
     */
    public function getValue()
    {
        return $this->value;
    }
  
    /**
     * Sets value
     * @param \Models\FixedFieldVal $value the stored value of the field (can be a String, LocalDate, DateTime, Boolean, Long, or Decimal depending on the field)
     * @return $this
     */
    public function setValue($value)
    {
        
        $this->value = $value;
        return $this;
    }
    
    /**
     * Gets display
     * @return string
     */
    public function getDisplay()
    {
        return $this->display;
    }
  
    /**
     * Sets display
     * @param string $display the display value of the field
     * @return $this
     */
    public function setDisplay($display)
    {
        
        $this->display = $display;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
