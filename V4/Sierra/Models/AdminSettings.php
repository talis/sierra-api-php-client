<?php
/**
 * AdminSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * AdminSettings Class Doc Comment
 *
 * @category    Class
 * @description Administrator settings
 * @package     III\Sierra\V4
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AdminSettings implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'canConfig' => 'bool',
        'accessTier' => 'string',
        'rootUrl' => 'string',
        'emailSenderName' => 'string',
        'emailSenderEmail' => 'string',
        'emailSubject' => 'string',
        'emailHost' => 'string',
        'emailUser' => 'string',
        'apiEnabled' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'canConfig' => 'canConfig',
        'accessTier' => 'accessTier',
        'rootUrl' => 'rootUrl',
        'emailSenderName' => 'emailSenderName',
        'emailSenderEmail' => 'emailSenderEmail',
        'emailSubject' => 'emailSubject',
        'emailHost' => 'emailHost',
        'emailUser' => 'emailUser',
        'apiEnabled' => 'apiEnabled'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'canConfig' => 'setCanConfig',
        'accessTier' => 'setAccessTier',
        'rootUrl' => 'setRootUrl',
        'emailSenderName' => 'setEmailSenderName',
        'emailSenderEmail' => 'setEmailSenderEmail',
        'emailSubject' => 'setEmailSubject',
        'emailHost' => 'setEmailHost',
        'emailUser' => 'setEmailUser',
        'apiEnabled' => 'setApiEnabled'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'canConfig' => 'getCanConfig',
        'accessTier' => 'getAccessTier',
        'rootUrl' => 'getRootUrl',
        'emailSenderName' => 'getEmailSenderName',
        'emailSenderEmail' => 'getEmailSenderEmail',
        'emailSubject' => 'getEmailSubject',
        'emailHost' => 'getEmailHost',
        'emailUser' => 'getEmailUser',
        'apiEnabled' => 'getApiEnabled'
    );
  
    
    /**
      * $canConfig whether the API management interface is enabled
      * @var bool
      */
    protected $canConfig;
    
    /**
      * $accessTier the site's access tier (basic or premium)
      * @var string
      */
    protected $accessTier;
    
    /**
      * $rootUrl the root URL for the Sierra API
      * @var string
      */
    protected $rootUrl;
    
    /**
      * $emailSenderName the email sender's name
      * @var string
      */
    protected $emailSenderName;
    
    /**
      * $emailSenderEmail the email sender's email address
      * @var string
      */
    protected $emailSenderEmail;
    
    /**
      * $emailSubject the email subject line
      * @var string
      */
    protected $emailSubject;
    
    /**
      * $emailHost the email host server
      * @var string
      */
    protected $emailHost;
    
    /**
      * $emailUser the email account user name
      * @var string
      */
    protected $emailUser;
    
    /**
      * $apiEnabled whether the API is enabled
      * @var bool
      */
    protected $apiEnabled;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->canConfig = $data["canConfig"];
            $this->accessTier = $data["accessTier"];
            $this->rootUrl = $data["rootUrl"];
            $this->emailSenderName = $data["emailSenderName"];
            $this->emailSenderEmail = $data["emailSenderEmail"];
            $this->emailSubject = $data["emailSubject"];
            $this->emailHost = $data["emailHost"];
            $this->emailUser = $data["emailUser"];
            $this->apiEnabled = $data["apiEnabled"];
        }
    }
    
    /**
     * Gets canConfig
     * @return bool
     */
    public function getCanConfig()
    {
        return $this->canConfig;
    }
  
    /**
     * Sets canConfig
     * @param bool $canConfig whether the API management interface is enabled
     * @return $this
     */
    public function setCanConfig($canConfig)
    {
        
        $this->canConfig = $canConfig;
        return $this;
    }
    
    /**
     * Gets accessTier
     * @return string
     */
    public function getAccessTier()
    {
        return $this->accessTier;
    }
  
    /**
     * Sets accessTier
     * @param string $accessTier the site's access tier (basic or premium)
     * @return $this
     */
    public function setAccessTier($accessTier)
    {
        
        $this->accessTier = $accessTier;
        return $this;
    }
    
    /**
     * Gets rootUrl
     * @return string
     */
    public function getRootUrl()
    {
        return $this->rootUrl;
    }
  
    /**
     * Sets rootUrl
     * @param string $rootUrl the root URL for the Sierra API
     * @return $this
     */
    public function setRootUrl($rootUrl)
    {
        
        $this->rootUrl = $rootUrl;
        return $this;
    }
    
    /**
     * Gets emailSenderName
     * @return string
     */
    public function getEmailSenderName()
    {
        return $this->emailSenderName;
    }
  
    /**
     * Sets emailSenderName
     * @param string $emailSenderName the email sender's name
     * @return $this
     */
    public function setEmailSenderName($emailSenderName)
    {
        
        $this->emailSenderName = $emailSenderName;
        return $this;
    }
    
    /**
     * Gets emailSenderEmail
     * @return string
     */
    public function getEmailSenderEmail()
    {
        return $this->emailSenderEmail;
    }
  
    /**
     * Sets emailSenderEmail
     * @param string $emailSenderEmail the email sender's email address
     * @return $this
     */
    public function setEmailSenderEmail($emailSenderEmail)
    {
        
        $this->emailSenderEmail = $emailSenderEmail;
        return $this;
    }
    
    /**
     * Gets emailSubject
     * @return string
     */
    public function getEmailSubject()
    {
        return $this->emailSubject;
    }
  
    /**
     * Sets emailSubject
     * @param string $emailSubject the email subject line
     * @return $this
     */
    public function setEmailSubject($emailSubject)
    {
        
        $this->emailSubject = $emailSubject;
        return $this;
    }
    
    /**
     * Gets emailHost
     * @return string
     */
    public function getEmailHost()
    {
        return $this->emailHost;
    }
  
    /**
     * Sets emailHost
     * @param string $emailHost the email host server
     * @return $this
     */
    public function setEmailHost($emailHost)
    {
        
        $this->emailHost = $emailHost;
        return $this;
    }
    
    /**
     * Gets emailUser
     * @return string
     */
    public function getEmailUser()
    {
        return $this->emailUser;
    }
  
    /**
     * Sets emailUser
     * @param string $emailUser the email account user name
     * @return $this
     */
    public function setEmailUser($emailUser)
    {
        
        $this->emailUser = $emailUser;
        return $this;
    }
    
    /**
     * Gets apiEnabled
     * @return bool
     */
    public function getApiEnabled()
    {
        return $this->apiEnabled;
    }
  
    /**
     * Sets apiEnabled
     * @param bool $apiEnabled whether the API is enabled
     * @return $this
     */
    public function setApiEnabled($apiEnabled)
    {
        
        $this->apiEnabled = $apiEnabled;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
