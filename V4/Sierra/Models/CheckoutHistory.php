<?php
/**
 * CheckoutHistory
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * CheckoutHistory Class Doc Comment
 *
 * @category    Class
 * @description the data describing the checkout history
 * @package     III\Sierra\V4
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CheckoutHistory implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'patron' => 'string',
        'item' => 'string',
        'bib' => 'string',
        'outDate' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'patron' => 'patron',
        'item' => 'item',
        'bib' => 'bib',
        'outDate' => 'outDate'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'patron' => 'setPatron',
        'item' => 'setItem',
        'bib' => 'setBib',
        'outDate' => 'setOutDate'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'patron' => 'getPatron',
        'item' => 'getItem',
        'bib' => 'getBib',
        'outDate' => 'getOutDate'
    );
  
    
    /**
      * $patron the patron record number associated with the checkout
      * @var string
      */
    protected $patron;
    
    /**
      * $item the item record number associated with the checkout
      * @var string
      */
    protected $item;
    
    /**
      * $bib the bib record number associated with the checkout
      * @var string
      */
    protected $bib;
    
    /**
      * $outDate the checkout date and time for the item, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
      * @var \DateTime
      */
    protected $outDate;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->patron = $data["patron"];
            $this->item = $data["item"];
            $this->bib = $data["bib"];
            $this->outDate = $data["outDate"];
        }
    }
    
    /**
     * Gets patron
     * @return string
     */
    public function getPatron()
    {
        return $this->patron;
    }
  
    /**
     * Sets patron
     * @param string $patron the patron record number associated with the checkout
     * @return $this
     */
    public function setPatron($patron)
    {
        
        $this->patron = $patron;
        return $this;
    }
    
    /**
     * Gets item
     * @return string
     */
    public function getItem()
    {
        return $this->item;
    }
  
    /**
     * Sets item
     * @param string $item the item record number associated with the checkout
     * @return $this
     */
    public function setItem($item)
    {
        
        $this->item = $item;
        return $this;
    }
    
    /**
     * Gets bib
     * @return string
     */
    public function getBib()
    {
        return $this->bib;
    }
  
    /**
     * Sets bib
     * @param string $bib the bib record number associated with the checkout
     * @return $this
     */
    public function setBib($bib)
    {
        
        $this->bib = $bib;
        return $this;
    }
    
    /**
     * Gets outDate
     * @return \DateTime
     */
    public function getOutDate()
    {
        return $this->outDate;
    }
  
    /**
     * Sets outDate
     * @param \DateTime $outDate the checkout date and time for the item, in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ssZZ)
     * @return $this
     */
    public function setOutDate($outDate)
    {
        
        $this->outDate = $outDate;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
