<?php
/**
 * DsSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * DsSettings Class Doc Comment
 *
 * @category    Class
 * @description The data service settings
 * @package     III\Sierra\V4
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DsSettings implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'dataserviceUrl' => 'string',
        'milshPort' => 'int',
        'xCircSettings' => '\Models\XClientSettings',
        'xCirc2Settings' => '\Models\XClientSettings',
        'messageTag' => 'string',
        'mildataSettings' => '\Models\MildataSettings',
        'milprotoSettings' => '\Models\MilprotoSettings'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'dataserviceUrl' => 'dataserviceUrl',
        'milshPort' => 'milshPort',
        'xCircSettings' => 'xCircSettings',
        'xCirc2Settings' => 'xCirc2Settings',
        'messageTag' => 'messageTag',
        'mildataSettings' => 'mildataSettings',
        'milprotoSettings' => 'milprotoSettings'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'dataserviceUrl' => 'setDataserviceUrl',
        'milshPort' => 'setMilshPort',
        'xCircSettings' => 'setXCircSettings',
        'xCirc2Settings' => 'setXCirc2Settings',
        'messageTag' => 'setMessageTag',
        'mildataSettings' => 'setMildataSettings',
        'milprotoSettings' => 'setMilprotoSettings'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'dataserviceUrl' => 'getDataserviceUrl',
        'milshPort' => 'getMilshPort',
        'xCircSettings' => 'getXCircSettings',
        'xCirc2Settings' => 'getXCirc2Settings',
        'messageTag' => 'getMessageTag',
        'mildataSettings' => 'getMildataSettings',
        'milprotoSettings' => 'getMilprotoSettings'
    );
  
    
    /**
      * $dataserviceUrl the data service URL
      * @var string
      */
    protected $dataserviceUrl;
    
    /**
      * $milshPort the data service milsh port
      * @var int
      */
    protected $milshPort;
    
    /**
      * $xCircSettings the default data service xcirc settings
      * @var \Models\XClientSettings
      */
    protected $xCircSettings;
    
    /**
      * $xCirc2Settings the data service xcirc2 settings
      * @var \Models\XClientSettings
      */
    protected $xCirc2Settings;
    
    /**
      * $messageTag a data service message tag
      * @var string
      */
    protected $messageTag;
    
    /**
      * $mildataSettings MILDATA settings
      * @var \Models\MildataSettings
      */
    protected $mildataSettings;
    
    /**
      * $milprotoSettings MILPROTO settings
      * @var \Models\MilprotoSettings
      */
    protected $milprotoSettings;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->dataserviceUrl = $data["dataserviceUrl"];
            $this->milshPort = $data["milshPort"];
            $this->xCircSettings = $data["xCircSettings"];
            $this->xCirc2Settings = $data["xCirc2Settings"];
            $this->messageTag = $data["messageTag"];
            $this->mildataSettings = $data["mildataSettings"];
            $this->milprotoSettings = $data["milprotoSettings"];
        }
    }
    
    /**
     * Gets dataserviceUrl
     * @return string
     */
    public function getDataserviceUrl()
    {
        return $this->dataserviceUrl;
    }
  
    /**
     * Sets dataserviceUrl
     * @param string $dataserviceUrl the data service URL
     * @return $this
     */
    public function setDataserviceUrl($dataserviceUrl)
    {
        
        $this->dataserviceUrl = $dataserviceUrl;
        return $this;
    }
    
    /**
     * Gets milshPort
     * @return int
     */
    public function getMilshPort()
    {
        return $this->milshPort;
    }
  
    /**
     * Sets milshPort
     * @param int $milshPort the data service milsh port
     * @return $this
     */
    public function setMilshPort($milshPort)
    {
        
        $this->milshPort = $milshPort;
        return $this;
    }
    
    /**
     * Gets xCircSettings
     * @return \Models\XClientSettings
     */
    public function getXCircSettings()
    {
        return $this->xCircSettings;
    }
  
    /**
     * Sets xCircSettings
     * @param \Models\XClientSettings $xCircSettings the default data service xcirc settings
     * @return $this
     */
    public function setXCircSettings($xCircSettings)
    {
        
        $this->xCircSettings = $xCircSettings;
        return $this;
    }
    
    /**
     * Gets xCirc2Settings
     * @return \Models\XClientSettings
     */
    public function getXCirc2Settings()
    {
        return $this->xCirc2Settings;
    }
  
    /**
     * Sets xCirc2Settings
     * @param \Models\XClientSettings $xCirc2Settings the data service xcirc2 settings
     * @return $this
     */
    public function setXCirc2Settings($xCirc2Settings)
    {
        
        $this->xCirc2Settings = $xCirc2Settings;
        return $this;
    }
    
    /**
     * Gets messageTag
     * @return string
     */
    public function getMessageTag()
    {
        return $this->messageTag;
    }
  
    /**
     * Sets messageTag
     * @param string $messageTag a data service message tag
     * @return $this
     */
    public function setMessageTag($messageTag)
    {
        
        $this->messageTag = $messageTag;
        return $this;
    }
    
    /**
     * Gets mildataSettings
     * @return \Models\MildataSettings
     */
    public function getMildataSettings()
    {
        return $this->mildataSettings;
    }
  
    /**
     * Sets mildataSettings
     * @param \Models\MildataSettings $mildataSettings MILDATA settings
     * @return $this
     */
    public function setMildataSettings($mildataSettings)
    {
        
        $this->mildataSettings = $mildataSettings;
        return $this;
    }
    
    /**
     * Gets milprotoSettings
     * @return \Models\MilprotoSettings
     */
    public function getMilprotoSettings()
    {
        return $this->milprotoSettings;
    }
  
    /**
     * Sets milprotoSettings
     * @param \Models\MilprotoSettings $milprotoSettings MILPROTO settings
     * @return $this
     */
    public function setMilprotoSettings($milprotoSettings)
    {
        
        $this->milprotoSettings = $milprotoSettings;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
