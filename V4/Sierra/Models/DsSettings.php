<?php
/**
 * DsSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\V4\Models;

use \ArrayAccess;
use \III\Sierra\V4\ObjectSerializer;

/**
 * DsSettings Class Doc Comment
 *
 * @category Class
 * @description The data service settings
 * @package  III\Sierra\V4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DsSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DsSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dataserviceUrl' => 'string',
        'milshPort' => 'int',
        'xCircSettings' => '\III\Sierra\V4\Models\XClientSettings',
        'xCirc2Settings' => '\III\Sierra\V4\Models\XClientSettings',
        'messageTag' => 'string',
        'mildataSettings' => '\III\Sierra\V4\Models\MildataSettings',
        'milprotoSettings' => '\III\Sierra\V4\Models\MilprotoSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dataserviceUrl' => null,
        'milshPort' => 'int32',
        'xCircSettings' => null,
        'xCirc2Settings' => null,
        'messageTag' => null,
        'mildataSettings' => null,
        'milprotoSettings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dataserviceUrl' => 'dataserviceUrl',
        'milshPort' => 'milshPort',
        'xCircSettings' => 'xCircSettings',
        'xCirc2Settings' => 'xCirc2Settings',
        'messageTag' => 'messageTag',
        'mildataSettings' => 'mildataSettings',
        'milprotoSettings' => 'milprotoSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dataserviceUrl' => 'setDataserviceUrl',
        'milshPort' => 'setMilshPort',
        'xCircSettings' => 'setXCircSettings',
        'xCirc2Settings' => 'setXCirc2Settings',
        'messageTag' => 'setMessageTag',
        'mildataSettings' => 'setMildataSettings',
        'milprotoSettings' => 'setMilprotoSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dataserviceUrl' => 'getDataserviceUrl',
        'milshPort' => 'getMilshPort',
        'xCircSettings' => 'getXCircSettings',
        'xCirc2Settings' => 'getXCirc2Settings',
        'messageTag' => 'getMessageTag',
        'mildataSettings' => 'getMildataSettings',
        'milprotoSettings' => 'getMilprotoSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dataserviceUrl'] = isset($data['dataserviceUrl']) ? $data['dataserviceUrl'] : null;
        $this->container['milshPort'] = isset($data['milshPort']) ? $data['milshPort'] : null;
        $this->container['xCircSettings'] = isset($data['xCircSettings']) ? $data['xCircSettings'] : null;
        $this->container['xCirc2Settings'] = isset($data['xCirc2Settings']) ? $data['xCirc2Settings'] : null;
        $this->container['messageTag'] = isset($data['messageTag']) ? $data['messageTag'] : null;
        $this->container['mildataSettings'] = isset($data['mildataSettings']) ? $data['mildataSettings'] : null;
        $this->container['milprotoSettings'] = isset($data['milprotoSettings']) ? $data['milprotoSettings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dataserviceUrl'] === null) {
            $invalidProperties[] = "'dataserviceUrl' can't be null";
        }
        if ($this->container['milshPort'] === null) {
            $invalidProperties[] = "'milshPort' can't be null";
        }
        if ($this->container['xCircSettings'] === null) {
            $invalidProperties[] = "'xCircSettings' can't be null";
        }
        if ($this->container['xCirc2Settings'] === null) {
            $invalidProperties[] = "'xCirc2Settings' can't be null";
        }
        if ($this->container['messageTag'] === null) {
            $invalidProperties[] = "'messageTag' can't be null";
        }
        if ($this->container['mildataSettings'] === null) {
            $invalidProperties[] = "'mildataSettings' can't be null";
        }
        if ($this->container['milprotoSettings'] === null) {
            $invalidProperties[] = "'milprotoSettings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['dataserviceUrl'] === null) {
            return false;
        }
        if ($this->container['milshPort'] === null) {
            return false;
        }
        if ($this->container['xCircSettings'] === null) {
            return false;
        }
        if ($this->container['xCirc2Settings'] === null) {
            return false;
        }
        if ($this->container['messageTag'] === null) {
            return false;
        }
        if ($this->container['mildataSettings'] === null) {
            return false;
        }
        if ($this->container['milprotoSettings'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets dataserviceUrl
     *
     * @return string
     */
    public function getDataserviceUrl()
    {
        return $this->container['dataserviceUrl'];
    }

    /**
     * Sets dataserviceUrl
     *
     * @param string $dataserviceUrl the data service URL
     *
     * @return $this
     */
    public function setDataserviceUrl($dataserviceUrl)
    {
        $this->container['dataserviceUrl'] = $dataserviceUrl;

        return $this;
    }

    /**
     * Gets milshPort
     *
     * @return int
     */
    public function getMilshPort()
    {
        return $this->container['milshPort'];
    }

    /**
     * Sets milshPort
     *
     * @param int $milshPort the data service milsh port
     *
     * @return $this
     */
    public function setMilshPort($milshPort)
    {
        $this->container['milshPort'] = $milshPort;

        return $this;
    }

    /**
     * Gets xCircSettings
     *
     * @return \III\Sierra\V4\Models\XClientSettings
     */
    public function getXCircSettings()
    {
        return $this->container['xCircSettings'];
    }

    /**
     * Sets xCircSettings
     *
     * @param \III\Sierra\V4\Models\XClientSettings $xCircSettings the default data service xcirc settings
     *
     * @return $this
     */
    public function setXCircSettings($xCircSettings)
    {
        $this->container['xCircSettings'] = $xCircSettings;

        return $this;
    }

    /**
     * Gets xCirc2Settings
     *
     * @return \III\Sierra\V4\Models\XClientSettings
     */
    public function getXCirc2Settings()
    {
        return $this->container['xCirc2Settings'];
    }

    /**
     * Sets xCirc2Settings
     *
     * @param \III\Sierra\V4\Models\XClientSettings $xCirc2Settings the data service xcirc2 settings
     *
     * @return $this
     */
    public function setXCirc2Settings($xCirc2Settings)
    {
        $this->container['xCirc2Settings'] = $xCirc2Settings;

        return $this;
    }

    /**
     * Gets messageTag
     *
     * @return string
     */
    public function getMessageTag()
    {
        return $this->container['messageTag'];
    }

    /**
     * Sets messageTag
     *
     * @param string $messageTag a data service message tag
     *
     * @return $this
     */
    public function setMessageTag($messageTag)
    {
        $this->container['messageTag'] = $messageTag;

        return $this;
    }

    /**
     * Gets mildataSettings
     *
     * @return \III\Sierra\V4\Models\MildataSettings
     */
    public function getMildataSettings()
    {
        return $this->container['mildataSettings'];
    }

    /**
     * Sets mildataSettings
     *
     * @param \III\Sierra\V4\Models\MildataSettings $mildataSettings MILDATA settings
     *
     * @return $this
     */
    public function setMildataSettings($mildataSettings)
    {
        $this->container['mildataSettings'] = $mildataSettings;

        return $this;
    }

    /**
     * Gets milprotoSettings
     *
     * @return \III\Sierra\V4\Models\MilprotoSettings
     */
    public function getMilprotoSettings()
    {
        return $this->container['milprotoSettings'];
    }

    /**
     * Sets milprotoSettings
     *
     * @param \III\Sierra\V4\Models\MilprotoSettings $milprotoSettings MILPROTO settings
     *
     * @return $this
     */
    public function setMilprotoSettings($milprotoSettings)
    {
        $this->container['milprotoSettings'] = $milprotoSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


