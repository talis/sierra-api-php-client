<?php
/**
 * MilprotoSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * MilprotoSettings Class Doc Comment
 *
 * @category    Class
 * @description MILPROTO settings
 * @package     III\Sierra\V4
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MilprotoSettings implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'host' => 'string',
        'port' => 'int',
        'persistent' => 'bool',
        'username' => 'string',
        'password' => 'string',
        'accountingUnit' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'host' => 'host',
        'port' => 'port',
        'persistent' => 'persistent',
        'username' => 'username',
        'password' => 'password',
        'accountingUnit' => 'accountingUnit'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'host' => 'setHost',
        'port' => 'setPort',
        'persistent' => 'setPersistent',
        'username' => 'setUsername',
        'password' => 'setPassword',
        'accountingUnit' => 'setAccountingUnit'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'host' => 'getHost',
        'port' => 'getPort',
        'persistent' => 'getPersistent',
        'username' => 'getUsername',
        'password' => 'getPassword',
        'accountingUnit' => 'getAccountingUnit'
    );
  
    
    /**
      * $host the host of MILPROTO service
      * @var string
      */
    protected $host;
    
    /**
      * $port the port of MILPROTO service
      * @var int
      */
    protected $port;
    
    /**
      * $persistent the persistence setting of MILPROTO service
      * @var bool
      */
    protected $persistent;
    
    /**
      * $username the user name of MILAPP Connection
      * @var string
      */
    protected $username;
    
    /**
      * $password the password of MILAPP Connection
      * @var string
      */
    protected $password;
    
    /**
      * $accountingUnit the accounting unit
      * @var int
      */
    protected $accountingUnit;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->host = $data["host"];
            $this->port = $data["port"];
            $this->persistent = $data["persistent"];
            $this->username = $data["username"];
            $this->password = $data["password"];
            $this->accountingUnit = $data["accountingUnit"];
        }
    }
    
    /**
     * Gets host
     * @return string
     */
    public function getHost()
    {
        return $this->host;
    }
  
    /**
     * Sets host
     * @param string $host the host of MILPROTO service
     * @return $this
     */
    public function setHost($host)
    {
        
        $this->host = $host;
        return $this;
    }
    
    /**
     * Gets port
     * @return int
     */
    public function getPort()
    {
        return $this->port;
    }
  
    /**
     * Sets port
     * @param int $port the port of MILPROTO service
     * @return $this
     */
    public function setPort($port)
    {
        
        $this->port = $port;
        return $this;
    }
    
    /**
     * Gets persistent
     * @return bool
     */
    public function getPersistent()
    {
        return $this->persistent;
    }
  
    /**
     * Sets persistent
     * @param bool $persistent the persistence setting of MILPROTO service
     * @return $this
     */
    public function setPersistent($persistent)
    {
        
        $this->persistent = $persistent;
        return $this;
    }
    
    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }
  
    /**
     * Sets username
     * @param string $username the user name of MILAPP Connection
     * @return $this
     */
    public function setUsername($username)
    {
        
        $this->username = $username;
        return $this;
    }
    
    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }
  
    /**
     * Sets password
     * @param string $password the password of MILAPP Connection
     * @return $this
     */
    public function setPassword($password)
    {
        
        $this->password = $password;
        return $this;
    }
    
    /**
     * Gets accountingUnit
     * @return int
     */
    public function getAccountingUnit()
    {
        return $this->accountingUnit;
    }
  
    /**
     * Sets accountingUnit
     * @param int $accountingUnit the accounting unit
     * @return $this
     */
    public function setAccountingUnit($accountingUnit)
    {
        
        $this->accountingUnit = $accountingUnit;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
