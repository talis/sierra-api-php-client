<?php
/**
 * Info
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace III\Sierra\V4\Models;

use \ArrayAccess;
use \III\Sierra\V4\ObjectSerializer;

/**
 * Info Class Doc Comment
 *
 * @category Class
 * @description API information details
 * @package  III\Sierra\V4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Info implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'apiInfo' => '\III\Sierra\V4\Models\DisplayableApiInfo',
        'dbSettings' => '\III\Sierra\V4\Models\DbSettings',
        'dsSettings' => '\III\Sierra\V4\Models\DsSettings',
        'adminSettings' => '\III\Sierra\V4\Models\AdminSettings',
        'webpacSettings' => '\III\Sierra\V4\Models\WebpacPXClientSettings',
        'pinVerificationSettings' => '\III\Sierra\V4\Models\PinVerificationSettings',
        'marc2INNSettings' => '\III\Sierra\V4\Models\Marc2INNSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'apiInfo' => null,
        'dbSettings' => null,
        'dsSettings' => null,
        'adminSettings' => null,
        'webpacSettings' => null,
        'pinVerificationSettings' => null,
        'marc2INNSettings' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'apiInfo' => 'apiInfo',
        'dbSettings' => 'dbSettings',
        'dsSettings' => 'dsSettings',
        'adminSettings' => 'adminSettings',
        'webpacSettings' => 'webpacSettings',
        'pinVerificationSettings' => 'pinVerificationSettings',
        'marc2INNSettings' => 'marc2INNSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'apiInfo' => 'setApiInfo',
        'dbSettings' => 'setDbSettings',
        'dsSettings' => 'setDsSettings',
        'adminSettings' => 'setAdminSettings',
        'webpacSettings' => 'setWebpacSettings',
        'pinVerificationSettings' => 'setPinVerificationSettings',
        'marc2INNSettings' => 'setMarc2INNSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'apiInfo' => 'getApiInfo',
        'dbSettings' => 'getDbSettings',
        'dsSettings' => 'getDsSettings',
        'adminSettings' => 'getAdminSettings',
        'webpacSettings' => 'getWebpacSettings',
        'pinVerificationSettings' => 'getPinVerificationSettings',
        'marc2INNSettings' => 'getMarc2INNSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['apiInfo'] = isset($data['apiInfo']) ? $data['apiInfo'] : null;
        $this->container['dbSettings'] = isset($data['dbSettings']) ? $data['dbSettings'] : null;
        $this->container['dsSettings'] = isset($data['dsSettings']) ? $data['dsSettings'] : null;
        $this->container['adminSettings'] = isset($data['adminSettings']) ? $data['adminSettings'] : null;
        $this->container['webpacSettings'] = isset($data['webpacSettings']) ? $data['webpacSettings'] : null;
        $this->container['pinVerificationSettings'] = isset($data['pinVerificationSettings']) ? $data['pinVerificationSettings'] : null;
        $this->container['marc2INNSettings'] = isset($data['marc2INNSettings']) ? $data['marc2INNSettings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['apiInfo'] === null) {
            $invalidProperties[] = "'apiInfo' can't be null";
        }
        if ($this->container['dbSettings'] === null) {
            $invalidProperties[] = "'dbSettings' can't be null";
        }
        if ($this->container['dsSettings'] === null) {
            $invalidProperties[] = "'dsSettings' can't be null";
        }
        if ($this->container['adminSettings'] === null) {
            $invalidProperties[] = "'adminSettings' can't be null";
        }
        if ($this->container['webpacSettings'] === null) {
            $invalidProperties[] = "'webpacSettings' can't be null";
        }
        if ($this->container['pinVerificationSettings'] === null) {
            $invalidProperties[] = "'pinVerificationSettings' can't be null";
        }
        if ($this->container['marc2INNSettings'] === null) {
            $invalidProperties[] = "'marc2INNSettings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets apiInfo
     *
     * @return \III\Sierra\V4\Models\DisplayableApiInfo
     */
    public function getApiInfo()
    {
        return $this->container['apiInfo'];
    }

    /**
     * Sets apiInfo
     *
     * @param \III\Sierra\V4\Models\DisplayableApiInfo $apiInfo the API name, version, and revision
     *
     * @return $this
     */
    public function setApiInfo($apiInfo)
    {
        $this->container['apiInfo'] = $apiInfo;

        return $this;
    }

    /**
     * Gets dbSettings
     *
     * @return \III\Sierra\V4\Models\DbSettings
     */
    public function getDbSettings()
    {
        return $this->container['dbSettings'];
    }

    /**
     * Sets dbSettings
     *
     * @param \III\Sierra\V4\Models\DbSettings $dbSettings the database settings
     *
     * @return $this
     */
    public function setDbSettings($dbSettings)
    {
        $this->container['dbSettings'] = $dbSettings;

        return $this;
    }

    /**
     * Gets dsSettings
     *
     * @return \III\Sierra\V4\Models\DsSettings
     */
    public function getDsSettings()
    {
        return $this->container['dsSettings'];
    }

    /**
     * Sets dsSettings
     *
     * @param \III\Sierra\V4\Models\DsSettings $dsSettings the dataservice settings
     *
     * @return $this
     */
    public function setDsSettings($dsSettings)
    {
        $this->container['dsSettings'] = $dsSettings;

        return $this;
    }

    /**
     * Gets adminSettings
     *
     * @return \III\Sierra\V4\Models\AdminSettings
     */
    public function getAdminSettings()
    {
        return $this->container['adminSettings'];
    }

    /**
     * Sets adminSettings
     *
     * @param \III\Sierra\V4\Models\AdminSettings $adminSettings the admin settings
     *
     * @return $this
     */
    public function setAdminSettings($adminSettings)
    {
        $this->container['adminSettings'] = $adminSettings;

        return $this;
    }

    /**
     * Gets webpacSettings
     *
     * @return \III\Sierra\V4\Models\WebpacPXClientSettings
     */
    public function getWebpacSettings()
    {
        return $this->container['webpacSettings'];
    }

    /**
     * Sets webpacSettings
     *
     * @param \III\Sierra\V4\Models\WebpacPXClientSettings $webpacSettings the WebPAC settings
     *
     * @return $this
     */
    public function setWebpacSettings($webpacSettings)
    {
        $this->container['webpacSettings'] = $webpacSettings;

        return $this;
    }

    /**
     * Gets pinVerificationSettings
     *
     * @return \III\Sierra\V4\Models\PinVerificationSettings
     */
    public function getPinVerificationSettings()
    {
        return $this->container['pinVerificationSettings'];
    }

    /**
     * Sets pinVerificationSettings
     *
     * @param \III\Sierra\V4\Models\PinVerificationSettings $pinVerificationSettings the settings for PIN verification
     *
     * @return $this
     */
    public function setPinVerificationSettings($pinVerificationSettings)
    {
        $this->container['pinVerificationSettings'] = $pinVerificationSettings;

        return $this;
    }

    /**
     * Gets marc2INNSettings
     *
     * @return \III\Sierra\V4\Models\Marc2INNSettings
     */
    public function getMarc2INNSettings()
    {
        return $this->container['marc2INNSettings'];
    }

    /**
     * Sets marc2INNSettings
     *
     * @param \III\Sierra\V4\Models\Marc2INNSettings $marc2INNSettings the settings for marc2INN
     *
     * @return $this
     */
    public function setMarc2INNSettings($marc2INNSettings)
    {
        $this->container['marc2INNSettings'] = $marc2INNSettings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


