<?php
/**
 * PatronHoldPost
 *
 * PHP version 5
 *
 * @category Class
 * @package  III\Sierra\V4
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Models;

use \ArrayAccess;
/**
 * PatronHoldPost Class Doc Comment
 *
 * @category    Class
 * @description a hold
 * @package     III\Sierra\V4
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PatronHoldPost implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'recordType' => 'string',
        'recordNumber' => 'int',
        'pickupLocation' => 'string',
        'neededBy' => '\DateTime',
        'numberOfCopies' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'recordType' => 'recordType',
        'recordNumber' => 'recordNumber',
        'pickupLocation' => 'pickupLocation',
        'neededBy' => 'neededBy',
        'numberOfCopies' => 'numberOfCopies'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'recordType' => 'setRecordType',
        'recordNumber' => 'setRecordNumber',
        'pickupLocation' => 'setPickupLocation',
        'neededBy' => 'setNeededBy',
        'numberOfCopies' => 'setNumberOfCopies'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'recordType' => 'getRecordType',
        'recordNumber' => 'getRecordNumber',
        'pickupLocation' => 'getPickupLocation',
        'neededBy' => 'getNeededBy',
        'numberOfCopies' => 'getNumberOfCopies'
    );
  
    
    /**
      * $recordType the record type code, i.e., bib (b), item (i), or volume (j), associated with the hold
      * @var string
      */
    protected $recordType;
    
    /**
      * $recordNumber the held record number
      * @var int
      */
    protected $recordNumber;
    
    /**
      * $pickupLocation the pickup location code
      * @var string
      */
    protected $pickupLocation;
    
    /**
      * $neededBy the date after which the held item is no longer needed, in ISO 8601 format (yyyy-MM-dd)
      * @var \DateTime
      */
    protected $neededBy;
    
    /**
      * $numberOfCopies the number of copies to hold
      * @var int
      */
    protected $numberOfCopies;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->recordType = $data["recordType"];
            $this->recordNumber = $data["recordNumber"];
            $this->pickupLocation = $data["pickupLocation"];
            $this->neededBy = $data["neededBy"];
            $this->numberOfCopies = $data["numberOfCopies"];
        }
    }
    
    /**
     * Gets recordType
     * @return string
     */
    public function getRecordType()
    {
        return $this->recordType;
    }
  
    /**
     * Sets recordType
     * @param string $recordType the record type code, i.e., bib (b), item (i), or volume (j), associated with the hold
     * @return $this
     */
    public function setRecordType($recordType)
    {
        
        $this->recordType = $recordType;
        return $this;
    }
    
    /**
     * Gets recordNumber
     * @return int
     */
    public function getRecordNumber()
    {
        return $this->recordNumber;
    }
  
    /**
     * Sets recordNumber
     * @param int $recordNumber the held record number
     * @return $this
     */
    public function setRecordNumber($recordNumber)
    {
        
        $this->recordNumber = $recordNumber;
        return $this;
    }
    
    /**
     * Gets pickupLocation
     * @return string
     */
    public function getPickupLocation()
    {
        return $this->pickupLocation;
    }
  
    /**
     * Sets pickupLocation
     * @param string $pickupLocation the pickup location code
     * @return $this
     */
    public function setPickupLocation($pickupLocation)
    {
        
        $this->pickupLocation = $pickupLocation;
        return $this;
    }
    
    /**
     * Gets neededBy
     * @return \DateTime
     */
    public function getNeededBy()
    {
        return $this->neededBy;
    }
  
    /**
     * Sets neededBy
     * @param \DateTime $neededBy the date after which the held item is no longer needed, in ISO 8601 format (yyyy-MM-dd)
     * @return $this
     */
    public function setNeededBy($neededBy)
    {
        
        $this->neededBy = $neededBy;
        return $this;
    }
    
    /**
     * Gets numberOfCopies
     * @return int
     */
    public function getNumberOfCopies()
    {
        return $this->numberOfCopies;
    }
  
    /**
     * Sets numberOfCopies
     * @param int $numberOfCopies the number of copies to hold
     * @return $this
     */
    public function setNumberOfCopies($numberOfCopies)
    {
        
        $this->numberOfCopies = $numberOfCopies;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
